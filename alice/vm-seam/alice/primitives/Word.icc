//
// Authors:
//   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
//   Leif Kornstaedt <kornstae@ps.uni-sb.de>
//
// Copyright:
//   Thorsten Brunklaus, 2000
//   Leif Kornstaedt, 2000-2002
//
// Last Change:
//   $Date$ by $Author$
//   $Revision$
//

#include "alice/Authoring.hh"

#define LARGE_WORD_PRECISION 32
#define STANDARD_WORD_PRECISION 31

#if STANDARD_WORD_PRECISION > INT_PRECISION
#error Standard word width too large
#endif
#if WORD_PRECISION > STANDARD_WORD_PRECISION
#error Word width too large
#endif

#define STRINGIFY(x) #x
#define XSTRINGIFY(x) STRINGIFY(x)
#define CONCAT(x,y) x##y
#define XCONCAT(x,y) CONCAT(x,y)

//--** ops implementable more efficiently directly on tagged representation

#define NONBITS (STORE_WORD_WIDTH - WORD_PRECISION)
#define NONBITS_EXP (static_cast<u_int>(1) << NONBITS)

#define STANDARD_WORD_NONBITS (STORE_WORD_WIDTH - STANDARD_WORD_PRECISION)
#define STANDARD_WORD_NONBITS_EXP (static_cast<u_int>(1) << STANDARD_WORD_NONBITS)

#define DECLARE_WORDN(w, x, n)						\
  u_int w = Store::WordToInt(x);					\
  if (static_cast<s_int>(w) == INVALID_INT) { REQUEST(x); } else {}	\
  w &= static_cast<u_int>(-1) >> (STORE_WORD_WIDTH - n);
#define DECLARE_WORD(w, x) DECLARE_WORDN(w, x, WORD_PRECISION)
#define DECLARE_STANDARD_WORD(w, x) \
  DECLARE_WORDN(w, x, STANDARD_WORD_PRECISION)
#define RETURN_WORD(w)							\
  RETURN_INT(mydiv(static_cast<s_int>((w) * NONBITS_EXP), NONBITS_EXP))
#define RETURN_LARGE_WORD(w) RETURN_WORD32(w)

#define WORD_WORD_TO_WORD_OP(name, op)		\
  DEFINE2(name) {				\
    DECLARE_WORD(i, x0);			\
    DECLARE_WORD(j, x1);			\
    RETURN_WORD(i op j);			\
  } END

#define WORD_WORD_TO_BOOL_OP(name, op)		\
  DEFINE2(name) {				\
    DECLARE_WORD(i, x0);			\
    DECLARE_WORD(j, x1);			\
    RETURN_BOOL(i op j);			\
  } END

WORD_WORD_TO_WORD_OP(Word_opadd, +)
WORD_WORD_TO_WORD_OP(Word_opsub, -)
WORD_WORD_TO_WORD_OP(Word_opmul, *)

DEFINE1(Word_opneg) {
  DECLARE_WORD(i, x0);
  RETURN_WORD(-i);
} END

WORD_WORD_TO_BOOL_OP(Word_opless, <)
WORD_WORD_TO_BOOL_OP(Word_opgreater, >)
WORD_WORD_TO_BOOL_OP(Word_oplessEq, <=)
WORD_WORD_TO_BOOL_OP(Word_opgreaterEq, >=)

// In the shifting operations, we need to check whether
// the shift count exceeds WORD_PRECISION explicitly:
// in C results of shifts >= the size of the data type are undefined

DEFINE2(Word_opshl) {
  DECLARE_WORD(i, x0);
  DECLARE_STANDARD_WORD(j, x1);
  if (j >= WORD_PRECISION)
    RETURN_WORD(0); // see above
  RETURN_WORD(i << j);
} END

// Assume that >> implements a logical right shift (as on x86).

DEFINE2(Word_opshr) {
  DECLARE_WORD(i, x0);
  DECLARE_STANDARD_WORD(j, x1);
  if (j >= WORD_PRECISION)
    RETURN_WORD(0); // see above
  RETURN_WORD(i >> j);
} END

DEFINE2(Word_oparithshr) {
  DECLARE_WORD(i, x0);
  DECLARE_STANDARD_WORD(j, x1);
  if (j > WORD_PRECISION - 1) j = WORD_PRECISION - 1; // see above
  //--** this implementation can be improved on many architectures
  if (i & (1 << (WORD_PRECISION - 1))) {
    RETURN_WORD((i >> j) | ~(static_cast<u_int>(-1) >> (j + NONBITS)));
  } else {
    RETURN_WORD(i >> j);
  }
} END

WORD_WORD_TO_WORD_OP(Word_andb, &)

DEFINE2(Word_div) {
  DECLARE_WORD(i, x0);
  DECLARE_WORD(j, x1);
  if (j == 0)
    RAISE(PrimitiveTable::General_Div);
  RETURN_WORD(i / j);
} END

DEFINE1(Word_fromInt) {
  DECLARE_INT(i, x0);
  RETURN_WORD(i);
} END

DEFINE1(Word_fromLargeInt) {
  TEST_INTINF(i, x0);
  if (i!=INVALID_INT)
    RETURN_WORD(i);
  DECLARE_INTINF(ii, x0);
  RETURN_WORD(mpz_get_si(ii->big()));
} END

DEFINE1(Word_fromLarge) {
  DECLARE_WORD32(w, x0);
  if (w & 1<<31)
    RETURN_WORD(w & ((1U<<31)-1));
  RETURN_WORD(w);
} END

DEFINE2(Word_mod) {
  DECLARE_WORD(i, x0);
  DECLARE_WORD(j, x1);
  if (j == 0)
    RAISE(PrimitiveTable::General_Div);
  RETURN_WORD(i % j);
} END

DEFINE1(Word_notb) {
  DECLARE_WORD(i, x0);
  RETURN_WORD(~i);
} END

WORD_WORD_TO_WORD_OP(Word_orb, |)

DEFINE1(Word_toInt) {
  DECLARE_WORD(i, x0);
  if (i > static_cast<u_int>(MAX_VALID_INT))
    RAISE(PrimitiveTable::General_Overflow);
  RETURN_INT(i);
} END

DEFINE1(Word_toIntX) {
  DECLARE_WORD(i, x0);
  if (i & (1 << (WORD_PRECISION - 1))) {
    RETURN_INT(i | ~(static_cast<u_int>(-1) >> NONBITS));
  } else {
    RETURN_INT(i);
  }
} END

DEFINE1(Word_toLargeInt) {
  DECLARE_WORD(i, x0);
  BigInt *b = BigInt::New(i);
  RETURN_INTINF(b);
} END

DEFINE1(Word_toLargeIntX) {
  DECLARE_WORD(i, x0);
  BigInt *b;
  if (i & (1 << (WORD_PRECISION - 1))) {
    b = BigInt::New(i | ~(static_cast<u_int>(-1) >> NONBITS));
  } else {
    b = BigInt::New(i);
  }
  RETURN_INTINF(b);
} END

DEFINE1(Word_toLarge) {
  DECLARE_WORD(i, x0);
  RETURN_LARGE_WORD(static_cast<uint32_t>(i));
} END

DEFINE1(Word_toLargeX) {
  DECLARE_WORD(i, x0);
  if (i & (1 << (WORD_PRECISION - 1))) {
    RETURN_LARGE_WORD(static_cast<uint32_t>(i | ~(static_cast<u_int>(-1) >> NONBITS)));
  } else {
    RETURN_LARGE_WORD(static_cast<uint32_t>(i));
  }
} END

WORD_WORD_TO_WORD_OP(Word_xorb, ^)

void PrimitiveTable::XCONCAT(Register,WordN)() {
  Register(XSTRINGIFY(WordN)".+", Word_opadd, 2);
  Register(XSTRINGIFY(WordN)".-", Word_opsub, 2);
  Register(XSTRINGIFY(WordN)".*", Word_opmul, 2);
  Register(XSTRINGIFY(WordN)".~", Word_opneg, 1);
  Register(XSTRINGIFY(WordN)".<", Word_opless, 2);
  Register(XSTRINGIFY(WordN)".>", Word_opgreater, 2);
  Register(XSTRINGIFY(WordN)".<=", Word_oplessEq, 2);
  Register(XSTRINGIFY(WordN)".>=", Word_opgreaterEq, 2);
  Register(XSTRINGIFY(WordN)".<<", Word_opshl, 2);
  Register(XSTRINGIFY(WordN)".>>", Word_opshr, 2);
  Register(XSTRINGIFY(WordN)".~>>", Word_oparithshr, 2);
  Register(XSTRINGIFY(WordN)".andb", Word_andb, 2);
  Register(XSTRINGIFY(WordN)".div", Word_div, 2);
  Register(XSTRINGIFY(WordN)".fromInt", Word_fromInt, 1);
  Register(XSTRINGIFY(WordN)".fromLargeInt", Word_fromLargeInt, 1);
  Register(XSTRINGIFY(WordN)".fromLarge", Word_fromLarge, 1);
  Register(XSTRINGIFY(WordN)".mod", Word_mod, 2);
  Register(XSTRINGIFY(WordN)".notb", Word_notb, 1);
  Register(XSTRINGIFY(WordN)".orb", Word_orb, 2);
  Register(XSTRINGIFY(WordN)".toInt", Word_toInt, 1);
  Register(XSTRINGIFY(WordN)".toIntX", Word_toIntX, 1);
  Register(XSTRINGIFY(WordN)".toLargeInt", Word_toLargeInt, 1);
  Register(XSTRINGIFY(WordN)".toLargeIntX", Word_toLargeIntX, 1);
  Register(XSTRINGIFY(WordN)".toLarge", Word_toLarge, 1);
  Register(XSTRINGIFY(WordN)".toLargeX", Word_toLargeX, 1);
  Register(XSTRINGIFY(WordN)".xorb", Word_xorb, 2);
}
