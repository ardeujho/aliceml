//
// Authors:
//   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
//   Leif Kornstaedt <kornstae@ps.uni-sb.de>
//
// Copyright:
//   Thorsten Brunklaus, 2000-2002
//   Leif Kornstaedt, 2000-2002
//
// Last Change:
//   $Date$ by $Author$
//   $Revision$
//

#include <cstdio>
#include "alice/Authoring.hh"


#define STRINGIFY(x) #x
#define XSTRINGIFY(x) STRINGIFY(x)
#define CONCAT(x,y) x##y
#define XCONCAT(x,y) CONCAT(x,y)

#define VectorTabulateFrame XCONCAT(XVector,TabulateFrame)
#define VectorTabulateWorker XCONCAT(XVector,TabulateWorker)

#define DECLARE_XVECTOR(vector, x) DECLARE_BLOCKTYPE(XVector, vector, x)


namespace {
  
  //
  // VectorTabulateWorker
  //
  class VectorTabulateWorker: public Worker {
  private:
    static VectorTabulateWorker *self;

    VectorTabulateWorker(): Worker() {}
  public:
    static void Init() {
      self = new VectorTabulateWorker();
    }

    static void PushFrame(XVector *vector, word closure, u_int i, u_int n);
    virtual u_int GetFrameSize(StackFrame *sFrame);
    virtual Result Run(StackFrame *sFrame);
    virtual const char *Identify();
    virtual void DumpFrame(StackFrame *sFrame, std::ostream& out);
  };

  class VectorTabulateFrame: private StackFrame {
  private:
    enum { VECTOR_POS, CLOSURE_POS, INDEX_POS, NUMBEROFELEMENTS_POS, SIZE };
  public:
    static VectorTabulateFrame *New(Worker *worker, XVector *vector,
				    word closure, u_int index,
				    u_int numberOfElements) {
      NEW_STACK_FRAME(frame, worker, SIZE);
      frame->InitArg(VECTOR_POS, vector->ToWord());
      frame->InitArg(CLOSURE_POS, closure);
      frame->InitArg(INDEX_POS, index);
      frame->InitArg(NUMBEROFELEMENTS_POS, numberOfElements);
      return static_cast<VectorTabulateFrame *>(frame);
    }

    u_int GetSize() {
      return StackFrame::GetSize() + SIZE;
    }
    XVector *GetVector() {
      return XVector::FromWord(GetArg(VECTOR_POS));
    }
    word GetClosure() {
      return GetArg(CLOSURE_POS);
    }
    u_int GetIndex() {
      return Store::WordToInt(GetArg(INDEX_POS));
    }
    void UpdateIndex(u_int i) {
      ReplaceArg(INDEX_POS, i);
    }
    u_int GetNumberOfElements() {
      return Store::WordToInt(GetArg(NUMBEROFELEMENTS_POS));
    }
  };

  VectorTabulateWorker *VectorTabulateWorker::self;

  void VectorTabulateWorker::PushFrame(XVector *vector,
				      word closure, u_int i, u_int n) {
    VectorTabulateFrame::New(self, vector, closure, i, n);
  }

  u_int VectorTabulateWorker::GetFrameSize(StackFrame *sFrame) {
    VectorTabulateFrame *frame = reinterpret_cast<VectorTabulateFrame *>(sFrame);
    Assert(sFrame->GetWorker() == this);
    return frame->GetSize();
  }

  Worker::Result VectorTabulateWorker::Run(StackFrame *sFrame) {
    VectorTabulateFrame *frame = reinterpret_cast<VectorTabulateFrame *>(sFrame);
    Assert(sFrame->GetWorker() == this);
    XVector *vector = frame->GetVector();
    word closure    = frame->GetClosure();
    u_int i         = frame->GetIndex();
    u_int n         = frame->GetNumberOfElements();
    Construct();
    word wValue = Scheduler::GetCurrentArg(0);
#if REQUEST_ELEMS_INT
    if (Store::WordToInt(wValue) == INVALID_INT) {
      Scheduler::SetCurrentData(wValue);
      return Worker::REQUEST;
    }
#endif
    vector->LateInit(i, wValue);
    if (++i == n) {
      Scheduler::PopFrame(frame->GetSize());
      Scheduler::SetNArgs(1);
      Scheduler::SetCurrentArg(0, vector->ToWord());
      return Worker::CONTINUE;
    } else {
      frame->UpdateIndex(i);
      Scheduler::SetNArgs(1);
      Scheduler::SetCurrentArg(0, Store::IntToWord(i));
      return Scheduler::PushCall(closure);
    }
  }

  const char *VectorTabulateWorker::Identify() {
    return "VectorTabulateWorker";
  }

  void VectorTabulateWorker::DumpFrame(StackFrame *sFrame, std::ostream& out) {
    VectorTabulateFrame *frame = reinterpret_cast<VectorTabulateFrame *>(sFrame);
    Assert(sFrame->GetWorker() == this);
    out << STRINGIFY(XVector)".tabulate " << frame->GetIndex() << " of " << frame->GetNumberOfElements() << std::endl;
  }

}


//
// Primitives
//
DEFINE1(Vector_concat) {
  DECLARE_LIST_ELEMS(tagVal, length, x0, DECLARE_XVECTOR(v, tagVal->Sel(0)));
  TagVal *list = tagVal;
  u_int totalLength = 0;
  while (list != INVALID_POINTER) {
    totalLength += XVector::FromWord(list->Sel(0))->GetLength();
    list = TagVal::FromWord(list->Sel(1));
  }
  if (length > XVector::maxLen)
    RAISE(PrimitiveTable::General_Size);
  XVector *vector = XVector::New(totalLength);
  u_int i = 0;
  while (tagVal != INVALID_POINTER) {
    XVector *v = XVector::FromWord(tagVal->Sel(0));
    u_int n = v->GetLength();
    for (u_int j = n; j--; )
      vector->Init(i + j, v->Sub(j));
    i += n;
    tagVal = TagVal::FromWord(tagVal->Sel(1));
  }
  Assert(i == totalLength);
  RETURN(vector->ToWord());
} END

DEFINE3(Vector_extract) {
  DECLARE_XVECTOR(vector, x0);
  DECLARE_INT(i, x1);
  DECLARE_INT(n, x2);
  if (i < 0 || n < 0 || static_cast<u_int>(i + n) > vector->GetLength())
    RAISE(PrimitiveTable::General_Subscript);
  XVector *newVector = XVector::New(n);
#if REQUEST_ELEMS_INT
  newVector->InitChunk(0, n, vector->GetValue() + i);
#else
  for (u_int j = n; j--; ) newVector->Init(j, vector->Sub(i + j));
#endif
  RETURN(newVector->ToWord());
} END

DEFINE1(Vector_fromList) {
#if REQUEST_ELEMS_INT
  DECLARE_LIST_ELEMS(tagVal, length, x0, DECLARE_INT(c, tagVal->Sel(0)));
#else
  DECLARE_LIST(tagVal, length, x0);
#endif
  if (length > XVector::maxLen)
    RAISE(PrimitiveTable::General_Size);
  XVector *vector = XVector::New(length);
  u_int i = 0;
  while (tagVal != INVALID_POINTER) {
    vector->Init(i++, tagVal->Sel(0));
    tagVal = TagVal::FromWord(tagVal->Sel(1));
  }
  Assert(i == length);
  RETURN(vector->ToWord());
} END

DEFINE1(Vector_length) {
  DECLARE_XVECTOR(vector, x0);
  RETURN_INT(vector->GetLength());
} END

DEFINE2(Vector_sub) {
  DECLARE_XVECTOR(vector, x0);
  DECLARE_INT(index, x1);
  if (static_cast<u_int>(index) >= vector->GetLength())
    RAISE(PrimitiveTable::General_Subscript);
  RETURN(vector->Sub(index));
} END

DEFINE2(Vector_tabulate) {
  DECLARE_INT(length, x0);
  if (length == 0) {
    RETURN(XVector::New(0)->ToWord());
  } else if (length < 0 || static_cast<u_int>(length) > XVector::maxLen) {
    RAISE(PrimitiveTable::General_Size);
  } else {
    word wClosure = x1;
    XVector *vector = XVector::New(length);
    VectorTabulateWorker::PushFrame(vector, wClosure, 0, length);
    Scheduler::SetNArgs(1);
    Scheduler::SetCurrentArg(0, Store::IntToWord(0));
    return Scheduler::PushCall(wClosure);
  }
} END

DEFINE1(Vector_toList) {
  DECLARE_XVECTOR(vector, x0);
  word list = Store::IntToWord(Types::nil);
  for (u_int i = vector->GetLength(); i--; ) {
    TagVal *cons = TagVal::New(Types::cons, 2);
    cons->Init(0, vector->Sub(i));
    cons->Init(1, list);
    list = cons->ToWord();
  }
  RETURN(list);
} END

void PrimitiveTable::XCONCAT(Register,XVector)() {
  VectorTabulateWorker::Init();
  Register(XSTRINGIFY(XVector)".concat", Vector_concat, 1);
  Register(XSTRINGIFY(XVector)".extract", Vector_extract, 3);
  Register(XSTRINGIFY(XVector)".fromList", Vector_fromList, 1);
  Register(XSTRINGIFY(XVector)".maxLen", Store::IntToWord(XVector::maxLen));
  Register(XSTRINGIFY(XVector)".length", Vector_length, 1);
  Register(XSTRINGIFY(XVector)".sub", Vector_sub, 2);
  Register(XSTRINGIFY(XVector)".tabulate", Vector_tabulate, 2);
  Register(XSTRINGIFY(XVector)".toList", Vector_toList, 1);
}
