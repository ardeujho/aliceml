import signature HOSE           from "HOSE-sig"
import structure TextIO         from "x-alice:/lib/system/TextIO"
import structure OS             from "x-alice:/lib/system/OS"
import structure AbsSyn         from "AbsSyn"
import structure Collect        from "Collect"
import structure Parse          from "Parse"
import structure Extract        from "Extract"
import structure Table          from "Table"
import structure Output         from "Output"


structure Hose :> HOSE =
    struct

    val binName = "alicelex"

	val inFile = ref ""
	val outFile = ref ""


	fun printEx s = (TextIO.output (TextIO.stdErr, s);
			 TextIO.flushOut TextIO.stdErr;
			 OS.Process.exit OS.Process.failure)


	fun handleEx (AbsSyn.Error s) = printEx s
	  | handleEx exn =
	    printEx (binName ^ ": unhandled internal exception: "
		     ^ General.exnName exn ^ "\n")


	fun hose () =
	    let 
		    
		val _ = AbsSyn.errorFile := !inFile

		val lexList =
		    let
			val inputStream = TextIO.openIn (!inFile)
			val input = TextIO.inputAll inputStream
			val _ = TextIO.closeIn inputStream
		    in
			Collect.collect (Parse.parse input)
		    end

		val lexMap  = Extract.extract (lexList)

		val autoMap = Table.makeAuto lexMap

		val out = TextIO.openOut (!outFile)

	    in	    
		Output.printLexList(out, lexList, autoMap);
		TextIO.closeOut out
	    end


	fun usage() = printEx ("Usage: " ^ binName ^" infile [-o outfile]\n"  ^
                    "Report bugs using our online bug-tracking system:\n" ^
                    "http://www.ps.uni-sb.de/alice/bugzilla\n") 



	    
	fun start process = (process(); OS.Process.success)


	fun setFiles infile outfile = (inFile := infile; outFile := outfile)


	fun  main' [infile, "-o", outfile] = (setFiles infile outfile;
					                      start hose) 
	  | main' ["-o", outfile, infile] = (setFiles infile outfile;
					     start hose) 
	  | main' [infile]                = (setFiles infile ( infile ^ ".aml" );
					                     start hose)
	  | main' _                       = usage () 


	fun main() =
	    let
        (*
		(* ugly hack to circumvent the problem that "hose-image"
		 * is sometimes an element of the CommandLine.arguments()
		 * (Windows)
		 *)
		val args = case CommandLine.arguments() of
		    ("hose-image"::xs) => xs
		  | xs                 => xs
          *)
        val args = CommandLine.arguments ()
	    in
        
		OS.Process.exit(main' args)
	    end
	handle (IO.Io {name,function="openIn",cause}) =>
	    printEx "input file does not exist\n"
	     | (IO.Io {name,function="openOut",cause}) =>
	    printEx "invalid output file\n"
	     | (IO.Io {name,function="inputAll",cause}) =>
	    printEx "input file seems to be a directory\n"
	     | exn => handleEx exn
       
    end


val _   = Hose.main () 
