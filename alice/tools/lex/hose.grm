open AbsSyn

fun pError (e, po) =
    raise Error ("Parse Error in file " ^ (!errorFile)
		 ^ "\nin line(s) " ^ posToString po ^ ": " ^ e ^ "\n")

(* makeVector : bool array -> BoolVector.vector
 * converts array to Vector
 *)
fun makeVector c = (BoolVector.tabulate (257, (fn x => Array.sub(c,x))))
	
	
(* used by: stringToExp
 * shrink : char list * char list -> char list, takes (char list, nil),
 * combines several chars to one (if possible) and returns the new char list
 * Example: shrink([#"\\",#"1",#"2",#"3",#"3"], []) = [#"\123",#"3"]
 *                                                  = [#"{",   #"3"]
 *)
fun shrink (nil, xs, po) = rev xs
  | shrink (#"\\"::cs, xs, po) = shrink (escape (cs, xs, po))
  | shrink (c::cs, xs, po) = shrink (cs, c::xs, po)
    
    
(* escape takes (char list, char list)
 * reads an escaped char from the first list, attaches it to the second list
 * and returns the pair
 *)
and escape (#"a"::cs, xs, po)  = (cs, #"\007"::xs, po)
  | escape (#"b"::cs, xs, po)  = (cs, #"\008"::xs, po)
  | escape (#"t"::cs, xs, po)  = (cs, #"\009"::xs, po) 
  | escape (#"n"::cs, xs, po)  = (cs, #"\010"::xs, po)
  | escape (#"v"::cs, xs, po)  = (cs, #"\011"::xs, po)
  | escape (#"f"::cs, xs, po)  = (cs, #"\012"::xs, po)
  | escape (#"r"::cs, xs, po)  = (cs, #"\013"::xs, po)
  | escape (#"\""::cs, xs, po) = (cs, #"\""::xs, po)
  | escape (#"\\"::cs, xs, po) = (cs, #"\\"::xs, po)
  | escape (#"^"::cs, xs, po)  = escape2 (cs, xs, po)
  | escape (c::cs, xs, po)     =
    if Char.isDigit c then escape3 (c::cs, xs, po)
    else if Char.isSpace c then escape4 (cs, xs, po)
	 else pError ( "bad escape character \\" ^ (Char.toString c), po)
  | escape ( _ , _ , po)       = pError ("bad escape character \\", po)
			     
			     
(* escape2 scans for chars from #"\^@" to #"\^_"
 *)
and escape2 (c::cs, xs, po) =
    let 
	val range = Char.ord c 
    in
	if range>63 andalso range<96 then (cs, Char.chr(range-64) ::xs, po)
	else pError ("bad escape character \\^" ^ (Char.toString c), po)
    end
  | escape2 ( _   , _ , po)   = pError ("bad escape character \\^", po)
    
    
(* escape3 scans for chars like #"\123"
 *)
and escape3 (a::b::c::cs, xs, po) =
    let
	val zero = Char.ord #"0"
	val a_ = Char.ord a - zero
	val b_ = if Char.isDigit b then Char.ord b - zero
		 else pError ("bad escape character \\" ^ (implode [a,b,c]), po)
	val c_ = if Char.isDigit c then Char.ord c - zero
		 else pError ("bad escape character \\" ^ (implode [a,b,c]), po)
	val num = 100*a_+10*b_+c_
    in 
	if num < 256 then (cs, Char.chr(num)::xs, po)
	else pError ("bad escape character \\" ^ (implode [a,b,c]), po)
    end
  | escape3 (cs, xs, po) = pError ("bad escape character \\" ^ implode cs, po)
    
    
(* escape4 scans for end of a gap like #" \n \\"
 *)
and escape4 (#"\\"::cs, xs, po) = (cs, xs, po)
  | escape4 (c::cs, xs, po) =
    if Char.isSpace c then escape4 (cs, xs, po)
    else pError ("bad character in gap: " ^ Char.toString c, po)
  | escape4 ( _   , _ , po) = pError ("bad gap", po)


(* wildcard : unit -> BoolVector.vector
 * returns a vector filled with true, except for 'eof'
 *)
fun wildcard ( ) =
    let
	val c = Array.array (257, true)
    in
	Array.update (c, 256, false);
	makeVector c
    end
    
    
(* used by: stringToExp
 * oneChar : char -> AbsSyn.regexp
 * returns CHARS, a vector filled with false except for ord char
 *)
fun oneChar (c, p) =
    let
	val arr = Array.array (257, false)
    in
	(Array.update(arr,Char.ord c, true);
	 CHARS (makeVector arr, 0, p) )
    end


(* stringToExp string * position -> regexp
 * returns the regexp representing the string
 *)
fun stringToExp (s, po) =
    let
	val xs = shrink (explode (String.substring(s, 1, String.size s - 2)), nil, po)
	fun first nil = (nil, EPS)
	  | first (c::cs) = (cs, oneChar (c, po) )
	fun fold (nil , a) = a
	  | fold (c::cs, a) = fold (cs, CAT(a, oneChar (c, po), po))
    in
	fold (first xs)
    end
    
		    
(* makeRep : regexp * int * int -> regexp
 * returns a regexp representing the given regexp repeated n to m times
 *)
fun makeRep (r, n, m, p) =
    let
	val i = m-n
	fun concat 0 = AbsSyn.EPS
	  | concat 1 = r
	  | concat y = AbsSyn.CAT (concat (y-1), r, p)
	val t = concat n
	fun alt (0, dat) = dat 
	  | alt (1, AbsSyn.EPS) = AbsSyn.ALT (AbsSyn.EPS, r, p) 
	  | alt (x, dat) =
	    if x < 0 then pError ("bad repetition", p)
	    else alt (x-1, AbsSyn.CAT (dat, AbsSyn.ALT (r, AbsSyn.EPS, p), p))
    in
	alt (i, t)
    end


(* makeArray : string * bool -> bool array
 * returns an array with all fields (except the char ords of the string)
 * set to the bool value
 * example: makeArray ("A-Z -", true) =
 *                       false for A,B,...,Z,' ','-' and true for the rest
 *)
fun makeArray (s, b, po) =
    let
	val nb = not b
	val c = Array.array (257, b)
	val cl = shrink (explode (String.substring (s, 1, String.size s - 2)),
			 nil, po)
	fun insert (a::(#"-")::b::ys, x) =
	    (insertSequence (a, b, nb, x); insert (ys,x) )
	  | insert (a::ys, x) = (Array.update(x,Char.ord a,nb); insert (ys, x) )
	  | insert (nil,   x) = x
    in
	Array.update (c, 256, false);
	insert (cl, c)
    end
    
    
(* insertSequence : char * char * bool * bool array -> unit
 * updates the array x from a to b with bool value t
 *)
and insertSequence (a,b,t,x) = 
    let
	val i = ref (Char.ord a)
	val j = Char.ord b
    in
	while !i<=j do
	    (Array.update(x,!i,t);
	     i:= !i + 1 )
    end


(* addEof : lrule list -> lrule list -> lrule list
 * adds "eof" to each lrule in the list
 *)
fun addEof [] ys = rev ys
  | addEof ((LRULE (reg, act, pos)) :: lrl) ys =
    addEof lrl (LRULE (CAT(reg, REGID ("eof", (~1, ~1)), pos), act, pos) :: ys)


%%


%header (functor MkLrVals (structure Token: TOKEN))


%eop EOF

%pos int


%term     REGEXP 
	| LEXER
        | REGCASE
        | OF
	| AND 
	| MLKEY of string 
	| EQ 
	| LPAR 
	| RPAR 
	| TIMES 
	| PLUS 
	| QMARK 
	| DRARROW 
	| BAR
	| CARAT
	| LBRACK
	| RBRACK
	| COMMA
	| LBRACE
	| RBRACE
	| WILDCARD
	| MLOP of string 
	| NUM of int
	| REAL of real
	| STRING of string
	| ID of string
	| MLTOK of string
	| EOF

%nonterm  start of lex list
	| program of lex list
	| lexdec' of lex list
	| lexdec of lex
	| regbind of regbind list
	| lexbind of lexbind list
	| lmatch of lrule list
	| lrule of lrule
	| regexp of regexp
	| regexp' of regexp 
	| regexp'' of regexp 
	| explist of atexp list
	| explist' of atexp list
        | caseexp of atexp
        | atexp' of atexp
	| atexp of atexp

%name Parser

%noshift EOF
%nodefault


%left DRARROW
%left BAR

%%





start	: program					( program )


program	: explist lexdec'    (SML (EXP (explist, (explistleft, explistright)),
				   (explistleft, explistright))
			      :: lexdec')

        | explist            ( [SML (EXP (explist, (explistleft, explistright)),
				     (explistleft, explistright))] )


lexdec'	: lexdec lexdec'     ( lexdec::lexdec' )
	| lexdec             ( [lexdec] )


lexdec	: REGEXP regbind     ( REG (regbind, (REGEXPleft, regbindright)))

	| LEXER lexbind	     ( LEX (lexbind, (LEXERleft, lexbindright)))

	| MLKEY explist      ( SML (EXP (ATEXP (MLKEY, (MLKEYleft, MLKEYright))
					 ::explist, (MLKEYleft, explistright)),
				    (MLKEYleft, explistright)))


regbind	: ID EQ regexp'' AND regbind   ( REGBIND (ID,regexp'',
						  (IDleft, regexp''right))
					::regbind )

	| ID EQ regexp''	       ( [REGBIND (ID,regexp'',
						   (IDleft, regexp''right))] )


lexbind	: ID EQ lmatch AND lexbind     ( LEXBIND (ID,
						  LMATCH (lmatch,
							  (lmatchleft,
							   lmatchright)),
						  (IDleft, lmatchright))
					::lexbind )

	| ID EQ lmatch    ( [LEXBIND (ID, LMATCH (lmatch, (lmatchleft,
							   lmatchright)),
				      (IDleft, lmatchright) )])


lmatch	: lrule BAR lmatch	( (lrule::lmatch) )

	| lrule	%prec DRARROW	( [lrule] )


lrule	: regexp'' DRARROW LPAR explist lexdec' RPAR
             ( LRULE (regexp'',
		      PAREXP (SML (EXP (explist, (explistleft, explistright)),
				   (explistleft, explistright)) :: lexdec',
			      (LPARleft, RPARright)),
		      (regexp''left, RPARright) ) )

	| regexp'' DRARROW LPAR explist RPAR		
             ( LRULE (regexp'',
		      PAREXP ([(SML (EXP (explist, (explistleft, explistright)),
				     (explistleft, explistright) ) ) ],
			      (LPARleft, RPARright)),
		      (regexp''left, RPARright) ) )


regexp'': regexp' BAR regexp''	  ( ALT(regexp', regexp'',
					(regexp'left, regexp''right) ) )

	| regexp'		  ( regexp' )


regexp'	: regexp		  ( regexp )

	| regexp regexp'	  ( CAT(regexp, regexp', (regexpleft,
							  regexp'right) ) )


regexp	: LPAR regexp'' RPAR	  ( regexp'' )

	| WILDCARD		  ( CHARS(wildcard(), 0, (WILDCARDleft,
							  WILDCARDright) ) )

	| LBRACK STRING RBRACK    ( CHARS
				   (makeVector
				    (makeArray (STRING, false,
						(LBRACKleft, RBRACKright))),
				    0, (LBRACKleft, RBRACKright) ) )

	| LBRACK CARAT STRING RBRACK  ( CHARS
				       (makeVector
					(makeArray (STRING, true,
						    (LBRACKleft, RBRACKright))),
					0, (LBRACKleft, RBRACKright) ) )

	| STRING	( stringToExp(STRING, (STRINGleft, STRINGright) ) )

	| ID		( REGID (ID, (IDleft, IDright) ) )

	| regexp TIMES	( CLOSURE(regexp, (regexpleft, TIMESright) ) )

	| regexp PLUS   ( CAT (regexp,
			       CLOSURE (regexp, (regexpleft, PLUSright) ),
			       (regexpleft, PLUSright) ) )

	| regexp QMARK	( ALT(EPS, regexp, (regexpleft, QMARKright) ) )

	| regexp LBRACE NUM RBRACE	( makeRep(regexp, NUM, NUM,
						  (regexpleft, RBRACEright) ) )

	| regexp LBRACE NUM COMMA NUM RBRACE  
              ( makeRep (regexp, NUM1, NUM2, (regexpleft, RBRACEright) ) )


explist	: caseexp explist    ( caseexp :: explist )
	| 		     ( [] )

explist': atexp'             ( [atexp'] )
        | atexp' explist'    ( atexp' :: explist')

caseexp  : REGCASE explist' OF lmatch
                     ( REGCASE (explist',
				LMATCH (addEof lmatch [],
					(lmatchleft, lmatchright)),
				(REGCASEleft, lmatchright) ) )

        | atexp      ( atexp )

atexp   : atexp'            ( atexp' )
        | OF                ( ATEXP ("of", (OFleft, OFright) ) )


atexp'	: AND		    ( ATEXP ("and", (ANDleft, ANDright) ) )
	| EQ		    ( ATEXP ("=", (EQleft, EQright) ) )
	| TIMES		    ( ATEXP ("*", (TIMESleft, TIMESright) ) )
	| PLUS		    ( ATEXP ("+", (PLUSleft, PLUSright) ) )
	| QMARK		    ( ATEXP ("?", (QMARKleft, QMARKright) ) )
	| DRARROW	    ( ATEXP ("=>", (DRARROWleft, DRARROWright) ) )
	| BAR		    ( ATEXP ("|", (BARleft, BARright) ) )
	| CARAT	            ( ATEXP ("^", (CARATleft, CARATright) ) )
	| LBRACK            ( ATEXP ("[", (LBRACKleft, LBRACKright) ) )
	| RBRACK            ( ATEXP ("]", (RBRACKleft, RBRACKright) ) )
	| COMMA	            ( ATEXP (",", (COMMAleft, COMMAright) ) )
	| LBRACE	    ( ATEXP ("{", (LBRACEleft, LBRACEright) ) )
	| RBRACE	    ( ATEXP ("}", (RBRACEleft, RBRACEright) ) )
	| LPAR program RPAR ( PAREXP (program, (LPARleft, RPARright) ) )
	| WILDCARD	    ( ATEXP ("_", (WILDCARDleft, WILDCARDright) ) )
	| MLOP		    ( ATEXP (MLOP, (MLOPleft, MLOPright) ) )
	| NUM		    ( ATEXP (Int.toString NUM, (NUMleft, NUMright) ) )
	| REAL		    ( ATEXP (Real.toString REAL, (REALleft, REALright)))
	| STRING	    ( ATEXP (STRING, (STRINGleft, STRINGright) ) )
	| ID		    ( ATEXP (ID, (IDleft, IDright) ) )
	| MLTOK		    ( ATEXP (MLTOK, (MLTOKleft, MLTOKright) ) )

