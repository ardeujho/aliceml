import signature TABLE          from "TABLE-sig"
import structure IntMap
       structure IntSet
       structure SetMap
       structure BoolVector
       structure StringMap      from "Container"
import structure AbsSyn         from "AbsSyn"


structure Table :> TABLE =
    struct

	open AbsSyn


	type auto_map = (int IntMap.map
			 * int vector IntMap.map
			 * AbsSyn.atexp IntMap.map) StringMap.map


	fun ++ x = ( x := !x + 1; !x)


	fun tError e =
	    raise Error ("Internal Error in structure Table in file "
			 ^ (!errorFile) ^ ": " ^ e ^ "\n")

	fun tpError (e, po) =
	    raise Error ("Internal Error in structure Table in file "
			 ^ (!errorFile) ^ "\nin line(s) "
			 ^ posToString po ^ ": " ^ e ^ "\n")


	(* nullable: regexp -> bool
	 * returns if regexp could be empty
	 *)
	fun nullable (EPS                ) = true
	  | nullable (CAT (re1, re2, _ ) ) = nullable re1 andalso nullable re2
	  | nullable (CLOSURE (re, _ )   ) = true
	  | nullable (CHARS _            ) = false
	  | nullable (ALT (re1, re2, _ ) ) = nullable re1 orelse nullable re2
	  | nullable (REGID (s, po )     ) =
	    tpError("still regid in regexp :" ^ s, po)
	  | nullable (END _              ) = false


	(* firstpos: regexp -> IntSet.set
	 * returns a set containing all possible first positions of regexp
	 *)
	fun firstpos (EPS                ) = IntSet.empty
	  | firstpos (CAT (re1, re2, _ ) ) =
	    if nullable re1 then IntSet.union (firstpos re1, firstpos re2)
	    else firstpos re1
	  | firstpos (CLOSURE (re, _ )   ) = firstpos re
	  | firstpos (CHARS ( _, i, _ )  ) = IntSet.singleton i
	  | firstpos (ALT (re1, re2, _ ) ) =
		IntSet.union (firstpos(re1), firstpos re2)
	  | firstpos (REGID (s, po )     ) =
		tpError("still regid in regexp: " ^ s, po)
	  | firstpos (END i              ) = IntSet.singleton i


	(* lastpos : regexp -> IntSet.set
	 * returns a set containing all possible last positions of regexp
	 *)
	fun lastpos (EPS                ) = IntSet.empty
	  | lastpos (CAT (re1, re2, _ ) ) =
	    if nullable re2 then IntSet.union (lastpos re1, lastpos re2)
	    else lastpos(re2)
	  | lastpos (CLOSURE (re, _ )   ) = lastpos re
	  | lastpos (CHARS ( _, i, _ )  ) = IntSet.singleton i
	  | lastpos (ALT (re1, re2, _ ) ) =
		IntSet.union (lastpos re1, lastpos re2)
	  | lastpos (REGID (s, po )     ) =
		tpError("still regid in regexp: " ^ s, po)
	  | lastpos (END i              ) = IntSet.singleton i


	(* fpandchar : regexp -> IntSet.set IntMap.map * regexp IntMap.map
	 * returns (fpmap, charmap) where fpmap contains for each key
	 * an IntSet.set containing the possible following positions of key
	 * and charmap contains for each key the regexp that belongs to that key
	 *)
	fun fpandchar re =
	    let
		val fpmap = IntMap.empty
		val charmap = IntMap.empty
	    in
		 fpandchar' (re, fpmap, charmap)
	    end


	and fpandchar' (EPS               , fpmap, charmap) = (fpmap, charmap)
	  | fpandchar' (CAT (re1, re2, _ ), fpmap, charmap) = 
	    let
		val (fpmap', charmap') = fpandchar' (re1, fpmap, charmap)
		val (fpmap'', charmap'') = fpandchar' (re2, fpmap', charmap')
		val fpmap''' = insert(fpmap'', lastpos re1, firstpos re2)
	    in		
		(fpmap''', charmap'')
	    end
	  | fpandchar' (CLOSURE (re, _ )  , fpmap, charmap) =
	    let
		val (fpmap', charmap') = fpandchar' (re, fpmap, charmap)
		val fpmap'' = insert(fpmap', lastpos re, firstpos re)
	    in
		(fpmap'', charmap')
	    end
	  | fpandchar' (CHARS (vec,i, po ) , fpmap, charmap) =
	    let
		val charmap' =  IntMap.insert(charmap, i, CHARS (vec, i, po) )
	    in
		(fpmap, charmap')
	    end
	  | fpandchar' (ALT (re1, re2, _ ), fpmap, charmap) = 
	    let 
		val (fpmap', charmap') = fpandchar' (re1, fpmap, charmap)
		val (fpmap'', charmap'') = fpandchar' (re2, fpmap', charmap')
	    in
		(fpmap'', charmap'')
	    end
	  | fpandchar' (REGID (s, po )    , _    , _      ) =
	    tpError("still regid in regexp :" ^ s, po)
	  | fpandchar' (END i             , fpmap, charmap) =
	    let
		val charmap' =  IntMap.insert(charmap, i, END i)
	    in
		(fpmap, charmap')
	    end


	(* insert: IntSet.set IntMap.map * IntSet.set * IntSet.set
	 *          -> IntSet.set IntMap.map
	 * returns a map that contains the old map and for each key of set1
	 * additionally the content of set2
	 *)
	and insert (map, set1, set2) = 
 	    let
		val map' = ref map
	 	fun ins i = 
 		    let
			val oldSet = 
			    case IntMap.lookup(!map', i) of
				SOME s => s
			      | NONE   => IntSet.empty
			val newSet = IntSet.union(oldSet, set2)
			val newMap = IntMap.insert(!map', i, newSet)
		    in
			map' := newMap
		    end
	    in
		IntSet.app ins set1;
		!map'
	    end


	(* makeTable : regexp -> int IntMap.map * int vector IntMap.map
	 * returns (finstates, dtran)
	 * finstates contains for each key (state-number)
	 * the finishing position of the state
	 * and dtran contains for each key (state-number)
	 * a vector containing for each character
	 * the number of the state to switch to
	 *)
	fun makeTable re =
	    let
		val StateNum = ref 0
		val (fpmap, charmap) = fpandchar re
		val startstate = firstpos re
		val dstates = ref (SetMap.singleton( startstate, ++ StateNum ) )
		val finstates = ref IntMap.empty
		val dtran = ref IntMap.empty


		(* visit : IntSet.set * int -> unit
		 * inserts the final states of state into finstates
		 * and inserts all possible transitions into dtran
		 *)
		fun visit (state, statenum) =
		    let
			val trans = gettrans state
		    in
			finstates :=
			IntMap.insert(!finstates, statenum, getfin state );
			dtran := IntMap.insert(!dtran, statenum, trans )
		    end


		(* gettrans : IntSet.set -> int vector
		 * returns a vector containing for each possible character
		 * the number of the state to switch to, 0 if none
		 *)
		and gettrans state = Vector.tabulate(257, checktrans state)


		and checkTr ord (x, r) = 
		    case IntMap.lookup(charmap, x) of
			SOME (CHARS (c,_,_) ) => 
			    (* if position x accepts character ord
			     *)
			    (if BoolVector.sub(c, ord)
				 (* add the following positions
				  * of x to the result
				  *)
				 then IntSet.union
				     (r, valOf (IntMap.lookup (fpmap, x)))
			     (* otherwise keep the result
			      *)
			     else r)
		      | NONE                => tError("NONE in checktrans")
		      | _                   => r
				 

		(* checktrans : int -> int -> int
		 * takes a state and a char ord and returns
		 * the state to switch to
		 *)
		and checktrans state ord =
		    let
			val check = checkTr ord

			(* apply check to all elements in state
			 *)
			val state' = IntSet.fold check IntSet.empty state
		    in
			if IntSet.isEmpty state' then 0
			else getstate state'
		    end


		(* getstate : IntSet.set -> int
		 * returns the number of the state
		 * if the state is a new one it is inserted and visited
		 *)
		and getstate state =
		    if SetMap.member (!dstates, state)
			then valOf(SetMap.lookup(!dstates, state) )
		    else
			let
			    val n = ++StateNum
			in
			    dstates := SetMap.insert(!dstates, state, n);
			    visit(state, n);
			    n
			end


		(* getfin IntSet.set -> int,
		 * returns the finishing position of the state
		 *)
		and getfin state = 
		    let
			val finPos = ref 0

			fun get x =
			    case IntMap.lookup (charmap, x) of
				SOME (END _) => true
			      | SOME _       => false
			      | NONE         => tError("NONE in getfin")
		    in
			case IntSet.find get state of
			    NONE => 0
			  | SOME x => x
		    end


	    in
		(* begin with the only state available,
		 * the others are inserted and visited automatically
		 * by the call of getstate
		 *)
		visit(startstate, 1);
		(!finstates, !dtran)
	    end


	(* minTable : int IntMap.map * int vector IntMap.map
	 *            -> int IntMap.map * int vector IntMap.map
	 * returns the minimized automaton
	 *)
	fun minTable (finstates, dtran) = 
	    let
		val killedStates = ref IntSet.empty
		val finstates' = ref finstates
		val dtran' = ref dtran

		(* part : int list list
		 * final partition, list of groups where each group
		 * can be combined to one state
		 *)
		val part =
		    let
			val p = partition( finstates, dtran )
			val p' = rev (IntMap.fold (fn (x, xs) => x :: xs) [] p)
		    in
			map (fn x => IntSet.toList x) p'
		    end


		(* shrink : int list -> unit
		 * takes a list of states, kills all states in dtran'
		 * except the head and replaces all switches to
		 * the killed states in dtran' with switches to head
		 *)
		fun shrink nil = tError("empty set in shrink")
		  | shrink xs  =
		    let
			val head = hd xs
		    in
			killedStates := IntSet.empty;
			shrink' (head, tl xs);
			IntMap.appi (substitute (head, !killedStates)) (!dtran')
		    end


		(* shrink' : int * int list -> unit
		 * does the killing work of shrink
		 *)
		and shrink' ( _  , nil  ) = ()
		  | shrink' (head, x::xs) =
		    (finstates' :=  IntMap.remove( !finstates', x);
		     dtran'     :=  IntMap.remove( !dtran'    , x);
		     killedStates := IntSet.insert (!killedStates, x);
		     shrink' (head, xs) )
			    

		(* substitute : int * IntSet.set -> int * int vector -> unit
		 * takes (n, set) (state, vec) and replaces all numbers
		 * of the set, that appear in vec with n, dtran' is changed
		 *)
		and substitute (n, set) (state, vec) =
		    if IntSet.isEmpty set then ()
		    else
			let
			    fun replace x =
				let
				    val oldstate = Vector.sub(vec, x)
				in
				    if IntSet.member (set, oldstate) then n
				    else oldstate
				end
			    
			    val vec' = Vector.tabulate( 257, replace )
			in
			    dtran' := IntMap.insert( !dtran', state, vec' ) 
			end
		    
	    in
		app shrink part;
		(!finstates', !dtran')
	    end


	(* partition : int IntMap * int vector IntMap
	 *            -> int IntMap * int vector IntMap, 
	 * returns a map of sets where the states of each set can be
	 * combined to one single state
	 *)
	and partition (finstates, dtran) =
	    let
		val partMap = ref IntMap.empty
		val groupNum = ref 0
		val actGroup = Array.array(IntMap.size finstates + 1, ~1)
		val changed = ref true
		    

		(* startpart : int IntMap.map -> unit
		 * takes a map that contains for each state the final position
		 * changes partMap so that it contains for each final position
		 * a set of the coupled states 
		 *)
		fun startpart finstates =
		    let
			fun oldSet group = 
			    case IntMap.lookup ( !partMap, group) of
				NONE     => IntSet.empty
			      | SOME set => set
				    
			fun check (state, 0  ) =
			    (Array.update(actGroup, state, 0);
			     partMap :=
			     IntMap.insert( !partMap, 0,
					   IntSet.insert( oldSet 0, state) ) )

			  | check (state, group) =
			    (Array.update(actGroup, state, group);
			     groupNum := Int.max(group, !groupNum);
			     partMap :=
			     IntMap.insert( !partMap, group,
					   IntSet.insert( oldSet group, state) ) )
		    in
			IntMap.appi check finstates
		    end
		

		(* split : int * IntSet.set -> unit
		 * takes (num, group) and splits the group if necessary,
		 * partMap and groupNum are changed
		 *)
		fun split (group, set) =
		    case IntSet.size set of
			0 => tError("empty set in split")
		      | 1 => ()
		      | x => split' (group, IntSet.toList set)


		(* split' : int * int list -> unit
		 * does the main work of split
		 *)
		and split' (group, is) =
		    let
			val head = hd is
			val tail = tl is
			val cmp  = Vector.tabulate (257, (getGroup head) )
			val (equal, diff) = compare (cmp, tail, [head], nil)
		    in
			if diff = nil then ()
			else (changed := true;
			      app
			      (fn state =>
			       Array.update(actGroup, state, !groupNum + 1))
			      diff;
			      let
				  val partMap' =
				      IntMap.remove(!partMap, group)
				  val partMap'' =
				      IntMap.insert( partMap', group,
                            IntSet.fromList equal )
			      in
				  partMap :=
				  IntMap.insert( partMap'', ++ groupNum,
                            IntSet.fromList equal )
			      end)
		    end


		(* getGroup : int -> int -> int
		 * takes state and ord and returns the number of the group
		 * the state switches to by char ord
		 *)
		and getGroup state ord =
		    let
			val p =
			    case IntMap.lookup (dtran, state) of
				SOME x => x
			      | NONE   => tError("NONE in getGroup")

			val trans = Vector.sub (p, ord)

		    in
			Array.sub(actGroup, trans)
		    end


		(* compare: int vector * int list * int list * int list
		 *         -> int list * inst list, returns (equal, diff),
		 * where equal are those states of the first list that
		 * switches for each char to the same group as cmp
		 * and diff are the other ones
		 *)
		and compare ( _ , nil    , equal, diff) = (equal, diff)
		  | compare (cmp, (x::xs), equal, diff) = 
		    let
			val i = ref 0
			val eq = ref true
		    in
			while !i < 257 do
			     (eq := (Vector.sub (cmp, !i)) = (getGroup x (!i));
			      if !eq then i := !i + 1 else i := 257);
			     if !eq then compare (cmp, xs, (x::equal), diff)
			     else compare (cmp, xs, equal, (x::diff) )
		    end

	    in
		(* set partMap to a start partition
		 * based on the different finishing positions
		 *)
		startpart finstates;
		(* split the groups as often as possible
		 *)		
		while !changed do
		    (changed := false;
		    IntMap.appi split (!partMap) );
		(* return the final partition
		 *)
		!partMap
		
	    end


	(* lineUp : int IntMap.map * int vector IntMap.map
	 *         -> int IntMap.map * int vector IntMap.map,
	 * returns an automaton with consecutively numbered states
	 *)
	fun lineUp (finstates, dtran) =
	    let
		val finstates' = ref (IntMap.empty)
		val dtran' = ref (IntMap.empty)

		val Finstates = ref (IntMap.toList finstates)
		val Dtran = ref (IntMap.toList dtran)

		val revFinstates = ref (rev (!Finstates ) )
		val revDtran = ref (rev (!Dtran) )

		val actState = ref 1


		(* inDomain : unit -> bool
		 * returns if we are finished
		 *)
		fun inDomain () = !actState <= #1(hd (!revFinstates) )


		(* inLine : unit -> bool
		 * returns if theres no gap because of minimization
		 *)
		fun inLine () = !actState = #1(hd (!Finstates) )


		(* insert : unit -> unit
		 * inserts the actual first item of Finstates and Dtran
		 * into the appropriate map
		 *)
		fun insert () =
		    let
			val (state, pos) = hd (!Finstates)
			val (state', vec) = hd (!Dtran)
		    in
			if state = state' andalso state = !actState
			    then (finstates' :=
				  IntMap.insert(!finstates', state, pos); 
				  dtran' := IntMap.insert(!dtran', state, vec) )
			else tError "different states in insert";
			Finstates := tl (!Finstates);
			Dtran := tl (!Dtran)
		    end


		val replace = ref (fn x => x)


		(* shift : unit -> unit
		 * takes the last state and shifts it to the current position,
		 * because there is a minimization gap 
		 *)
		fun shift () =
		    let
			val (state, pos) = hd (!revFinstates)
			val (state', vec) = hd (!revDtran)
			val act = !actState
			val rep = !replace
		    in
			if state = state'
			    then (finstates' :=
				  IntMap.insert(!finstates', act, pos); 
				  dtran' := IntMap.insert(!dtran', act, vec) )
			else tError "different states in insert";
			replace := (fn x => if x = state then act else rep x); 
			revFinstates := tl (!revFinstates);
			revDtran := tl (!revDtran)
		    end


		(* correc : int vector -> int vector
		 * replaces all out-dated transitions with the ones
		 + saved in replace
		 *)
		fun correct vec =
		    Vector.tabulate(257, fn x => !replace( Vector.sub(vec, x)))

	    in
		while inDomain () do
		    if inLine () then (insert (); ++ actState )
		    else (shift (); ++actState ); 
		dtran' := IntMap.map correct (!dtran');
		(!finstates', !dtran')
	    end


	(* checkEOF : IntMap.map * IntMap.map -> unit,
	 * checks if all transitions of 'eof' go to dead final states
	 *)
	fun checkEOF (finstates, dtran) = 
	    let
		fun transEOF (state, vec) =
		    let
			fun err () =
			    let
				val e =
				    "Lex Error: 'eof' not at the end of regexp"
			    in
				(print ("State " ^ Int.toString state ^ "\n");
				 print (e ^ "\n"); raise Error e)
			    end
		    in
			case Vector.sub (vec, 256) of
			    0 => ()
			  | x => if valOf( IntMap.lookup (finstates, x) ) = 0
				     then err ()
				 else Vector.app (fn x => if x = 0 then ()
							  else err () )
				     (valOf( IntMap.lookup (dtran, x) ) )
		    end
	    in
		IntMap.appi transEOF dtran
	    end


	(* makeAuto : (regexp * atexp IntMap.map) StringMap.map
	 *           -> (int IntMap.map * int vector IntMap.map
	 *               * atexp IntMap.map) StringMap.map
	 * returns a map containing the minimized automata and
	 * the actions for each automaton
	 *)
	fun makeAuto lexMap = 
	    let
		fun make (re, atMap) =
		    let
			val (finstates, dtran) =
			    lineUp( minTable( makeTable re ) )
		    in
			checkEOF (finstates, dtran); 
		       (finstates, dtran, atMap)
		    end
	    in
		StringMap.map make lexMap
	    end

    end
