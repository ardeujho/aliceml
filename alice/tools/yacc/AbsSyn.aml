(* abstract syntax for parse tree of jacke input *)
(* and semantical analysis                       *)
import structure ErrorMsg   from "ErrorMsg"


structure AbsSyn =
struct
    structure E = ErrorMsg

    (* wo steht das pos im erzeugten jacke.grm.sml ??? *)
    type pos = int

    datatype bnfexpWithPos =
	PSkip 	
      | PSymbol of string * pos * pos
      | PAs of string * bnfexpWithPos  * pos * pos
      | PSeq of bnfexpWithPos list  * pos * pos
      | PPrec of bnfexpWithPos * string  * pos * pos 
      | PTransform of bnfexpWithPos * exp * pos * pos
      | PAlt of bnfexpWithPos list * pos * pos
	
    and parsetreeWithPos =
	PTokenDec of (string * string option) list * pos * pos
      | PAssoclDec of idlist * pos * pos
      | PAssocrDec of idlist * pos * pos
      | PNonassocDec of idlist * pos * pos
      | PRuleDec of Prule list * pos * pos
      | PParserDec of (string * string option * string) list * pos * pos
      | PMLCode of exp * pos * pos
	

    and exp = EXP of atexp list
    
    and atexp =
	ATEXP of string
      | PAREXP of exp
	

    withtype Prule = (string * string option * bnfexpWithPos)
    and idlist = string list

    datatype bnfexp =
	Skip
      | Symbol of string
      | As of string * bnfexp
      | Seq of bnfexp list
      | Prec of bnfexp * string
      | Transform of bnfexp * (string option * exp)
      | Alt of bnfexp list
	
    and parsetree =
	TokenDec of (string * string option) list
      | AssoclDec of idlist
      | AssocrDec of idlist
      | NonassocDec of idlist
      | RuleDec of rule list
      | ParserDec of (string * string option * string) list
      | MLCode of exp
	
    withtype 
	rule = string * string option * bnfexp
    and idlist = string list


    val removePos =
	let fun rfbnfexp PSkip = Skip
	      | rfbnfexp (PSymbol (s,_,_)) = Symbol s
	      | rfbnfexp (PAs (s,bnf,_,_)) = As (s, rfbnfexp bnf)
	      | rfbnfexp (PSeq (bnfs,_,_)) = Seq (List.map rfbnfexp bnfs)
	      | rfbnfexp (PPrec (bnf,s,_,_)) = Prec (rfbnfexp bnf,s)
	      | rfbnfexp (PTransform (bnf,sl,p1,p2)) = 
	        let val lPos = E.posToString p1 (*Int.toString p1*)
		    val rPos = E.posToString p2 (*Int.toString p2*)
		in Transform (rfbnfexp bnf,
			      (SOME ("(* Position in source: "
				     ^lPos^"-"^rPos^" *)"), sl))
		end
	      | rfbnfexp (PAlt (bnfs,_,_)) = Alt (List.map rfbnfexp bnfs)


	    and rfptree (PTokenDec (tl,_,_)) = TokenDec tl
	      | rfptree (PAssoclDec (il,_,_)) = AssoclDec il
	      | rfptree (PAssocrDec (il,_,_)) = AssocrDec il
	      | rfptree (PNonassocDec (il,_,_)) = NonassocDec il
	      | rfptree (PRuleDec (rl,_,_)) = 
		let val rl' =
		    List.map (fn (id,opt,bnf) => (id,opt,rfbnfexp bnf)) rl
		in RuleDec rl' end
	      | rfptree (PParserDec (pl,_,_)) = ParserDec pl
	      | rfptree (PMLCode (cl,_,_)) = MLCode cl
	in
	    List.map rfptree
	end

    (* issues warning if several *differing* token decs are found *)
    fun tokens p =
	let val tds = List.filter (fn (PTokenDec _) => true | _ => false) p
	    val msg = "Differing token declarations "
		      ^"(only last one is relevant)"
	in
	    case tds of
		((PTokenDec(t,p1,_))::ts) => 
		    ((if List.all (fn (PTokenDec(t',_,_)) => t=t') ts 
			  then ()
		      else E.warning p1 msg);
		     let val PTokenDec(toks,_,_) = List.last tds
			 val toks = List.map (fn (x,_) => x) toks
		     in toks end)
			 
	      | _ => []
	end

    (* nonterminal symbol names, implicitly defined by rule decs *) 
    fun nonterms p =
	let val rs = List.filter (fn PRuleDec _ => true | _ => false) p
	    val lhs = List.map (fn (lhs,_,_) => lhs)
	    val lhsides = List.map (fn (PRuleDec (r,p1,p2)) => lhs r) rs
	in List.concat lhsides end

    (* symbols occurring in right hand sides *)
    fun symbols p =
	let fun get (PSymbol pat) = [pat]
	      | get (PAs (_,bnf,_,_)) = get bnf
	      | get (PSeq (bnfl,_,_)) = List.concat (List.map get bnfl)
	      | get (PPrec (bnf,sym,p1,p2)) = (sym,p1,p2)::(get bnf)
	      | get (PTransform (bnf,_,_,_)) = get bnf
	      | get (PAlt (bnfl,_,_)) = List.concat (List.map get bnfl)
	      | get _ = []
	    val rs = List.filter (fn PRuleDec _ => true | _ => false) p
	    val rs = List.concat (List.map (fn PRuleDec (r,_,_) => r) rs)
	    val rhs = List.concat 
		(List.map (fn (_,_,bnf) => get bnf) rs)
	in 
	    rhs
	end


    val semanticalAnalysis = fn p =>
	let
	    val tokens = tokens p (* may issue warning *)
	    val nonterms = nonterms p
	    val symbols = symbols p

	    (* tokens and nonterms disjoint? all symbols defined as either 
	     terminal or nonterminal ? *)
	    fun checkRules p = 
		let fun disjoint l1 l2 = 
			not (List.exists 
			     (fn x => List.exists (fn y => x=y) l2) l1)
		    val _ = if not (disjoint tokens nonterms)
				then E.error 0 
				 "Tokens and nonterminal symbols not disjoint"
			    else ()
		    fun contained [] _ = ()
		      | contained ((s,p1,_)::syms) l =
			if List.exists (fn y => y=s) l then contained syms l
			else (E.error p1 ("undefined symbol "^s);
			      contained syms l)
		    val _ = contained symbols (tokens@nonterms)
		in ()
		end
	    
    (* all symbols are defined as tokens? multiple decs for single token? *)
	    fun checkAssocs p =
		let 
		    val distribPos = fn p1 => fn p2 => 
			List.map (fn x => (x,p1,p2))
		    val assocs = List.map 
			(fn (PAssoclDec (l,p1,p2)) => distribPos p1 p2 l
		      | (PAssocrDec (l,p1,p2)) => distribPos p1 p2 l
		      | (PNonassocDec (l,p1,p2)) => distribPos p1 p2 l
		      | _ => []) p
		    val assocs = List.concat assocs
		    fun def (s,p1,p2) = if List.exists (fn x => x=s) tokens
					    then ()
					else E.error p1
					    ("undefined token "^s
					     ^" in associativity declaration")
		    val _ = List.app def assocs
		    fun mult [] = ()
		      | mult ((s,p1,p2)::ts) = 
			if List.exists (fn (x,_,_) => x=s) ts
			    then E.error p1
				("multiple associativities given for token "^s)
			else mult ts
		    val _ = mult assocs
		in () 
		end  

	    (* all start symbols defined as parsers *)
	    fun checkParsers p =
		let val distribPos = fn p1 => fn p2 => 
		        List.map (fn (_,_,x) => (x,p1,p2))
		    val startsyms = List.concat
			(List.map (fn (PParserDec (l,p1,p2)) => distribPos p1 p2 l
		      | _ => []) p)
		    fun def [] = ()
		      | def ((s,p1,_)::syms) =
			if List.exists (fn y => y=s) nonterms then def syms
			else (E.error p1 ("undefined start symbol "^s);
			      def syms)
		in def startsyms 
		end
	in
	    (checkRules p;
	     checkAssocs p;
	     checkParsers p;
	     if !E.anyErrors then raise E.Error else ())
	end


    fun expToString (EXP xs) = String.concat (map atexpToString xs) ^ " "

    and atexpToString (ATEXP s) = " " ^ s
      | atexpToString (PAREXP exp) = "(" ^ expToString exp ^ ")"

end
