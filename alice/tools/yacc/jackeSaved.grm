(* grammar for jacke's own parser *)

structure A = AbsSyn
datatype ('a,'b) sum = In1 of 'a | In2 of 'b

fun lookup "bogus" = 10000
  | lookup s = 0

%%

%eop EOF

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%term     EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | UMINUS
  | EQ | IF | THEN | ELSE | LET | IN | END | AND | OF | AS 
  | MAPSTO | BAR | LOCAL | ABSTYPE | WITH
(* jacke extensions *)
  | TOKEN | ASSOCL | ASSOCR | NONASSOC | RULE | PARSER | PREC | SKIP
(* others *)
  | DECINTRO of string | MLOP of string | MLKEY of string 

%nonterm  start of A.parsetree list 
	| jackedec of A.parsetree 
	| tokbinds of (string * string option) list 
	| tokbind of string * string option 
	| idlist of string list
	| rulebinds of A.rule list | rulebind of A.rule 
	| parsbinds of (string*string option * string) list 
	| parsbind of string * string option * string 
	| bnfexp of A.bnfexp 
	| exp 
	| program of A.parsetree list
   

%pos int
%verbose
%start start
%eop EOF
%noshift EOF

%name jacke

%keyword LET LOCAL IN END IF THEN ELSE AND TOKEN OF AS 
         ASSOCL ASSOCR NONASSOC RULE PARSER PREC


%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")


%%

(* the (somewhat incomplete and simplified) grammar *)

start : program (rev program)
(*	| ([])
*)
program : jackedec ([jackedec])
	| exp ([])
	| program jackedec (jackedec::program)

jackedec : TOKEN tokbinds (A.TokenDec(rev tokbinds))
        | ASSOCL idlist (A.AssoclDec(rev idlist))
	| ASSOCR idlist (A.AssocrDec(rev idlist))
	| NONASSOC idlist (A.NonassocDec(rev idlist))
	| RULE rulebinds (A.RuleDec(rev rulebinds))
	| PARSER parsbinds (A.ParserDec(rev parsbinds))
	| LOCAL jackedec IN jackedec END (A.AssoclDec[])
	| DECINTRO exp (A.AssoclDec[])
 
tokbinds : tokbind ([tokbind])
	| tokbind BAR tokbinds (tokbind::tokbinds)

tokbind : ID ((ID,NONE))
	| ID OF ID ((ID1,SOME ID2))

idlist  : ID ([ID])
	| idlist ID (ID::idlist)

rulebinds : rulebind ([rulebind])
	| rulebinds AND rulebind (rulebind::rulebinds)

rulebind : ID EQ bnfexp ((ID,NONE,bnfexp))
	| ID COLON ID EQ bnfexp ((ID,SOME ID,bnfexp))

parsbinds : parsbind ([parsbind])
	| parsbind AND parsbinds (parsbind::parsbinds)

parsbind : ID EQ ID ((ID1,NONE,ID2))
	| ID COLON ID EQ ID ((ID1,SOME ID2,ID3))

bnfexp : SKIP (A.Skip)
	| ID (A.Symbol(ID))
	| LPAREN bnfexp RPAREN (bnfexp)
	| ID AS bnfexp (A.As(ID,bnfexp))
	| bnfexp COMMA bnfexp (A.Seq([bnfexp1,bnfexp2]))
	| bnfexp PREC ID (A.Prec(bnfexp,ID))
	| bnfexp MAPSTO LPAREN exp RPAREN (A.Transform(bnfexp,[]))
	| bnfexp BAR bnfexp (A.Alt([bnfexp1,bnfexp2])) 


exp  : 	exp LET jackedec IN exp END ()
	| exp LPAREN exp RPAREN ()
	| exp LBRACE exp RBRACE ()
	| exp STRING () 
	| exp LBRACK exp RBRACK ()
	| exp ID ()
	| exp EQ ()
	| exp COMMA ()
	| exp MLKEY ()
	| exp MLOP  ()
	| ()
