(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg and Guido Tack, 2007
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Stream from "x-alice:/lib/data/Stream"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"
import structure Config from "Config"
import structure History from "History"
import structure Evaluator from "Evaluator"
import structure BufferHighlight from "BufferHighlight"
import structure Gui            from "Gui"


structure OutputWriters =
   struct
      open Config

      (* Stream redirection *)

      fun markWriter (mark, TextPrimIO.WR ops) =
	  let
	      val mark' = Substring.full (String.str mark)
	      val writeVec = Option.valOf (#writeVec ops)
	      fun marked f sl = (writeVec mark'; f sl)
	  in
	      TextPrimIO.WR {ops where
			     writeVec = Option.map marked (#writeVec ops),
			     writeArr = Option.map marked (#writeArr ops),
			     writeVecNB = Option.map marked (#writeVecNB ops),
			     writeArrNB = Option.map marked (#writeArrNB ops)}
	  end

      val (stdin, stdInText) = Stream.stream ()
      val stdInReader = TextPrimIO.openVectorListRd stdInText
      val progStdIn = TextIO.StreamIO.mkInstream (stdInReader, "")
      val _ = TextIO.setInstream (TextIO.stdIn, progStdIn)

      val (stdText, stdWriter) = TextPrimIO.openVectorListWr ()

      val stdOutWriter = markWriter (#"\001", stdWriter)
      val progStdOut = TextIO.StreamIO.mkOutstream (stdOutWriter, IO.LINE_BUF)
      val _ = TextIO.setOutstream (TextIO.stdOut, progStdOut)

      val stdErrWriter = markWriter (#"\002", stdWriter)
      val progStdErr = TextIO.StreamIO.mkOutstream (stdErrWriter, IO.NO_BUF)
      val _ = TextIO.setOutstream (TextIO.stdErr, progStdErr)

      val (compilerText, compilerWriter) = TextPrimIO.openVectorListWr ()

      val compilerInWriter = markWriter (#"\000", compilerWriter)
      val compilerIn = TextIO.StreamIO.mkOutstream (compilerInWriter, IO.NO_BUF)

      val compilerOutWriter = markWriter (#"\001", compilerWriter)
      val compilerOut = TextIO.StreamIO.mkOutstream (compilerOutWriter, IO.LINE_BUF)
      val _ = Evaluator.setOutStream compilerOut

      val compilerErrWriter = markWriter (#"\002", compilerWriter)
      val compilerErr = TextIO.StreamIO.mkOutstream (compilerErrWriter, IO.LINE_BUF)
      val _ = Evaluator.setErrStream compilerErr

      val (traceText, compilerTraceWriter) = TextPrimIO.openVectorListWr ()
      val compilerTrace = TextIO.StreamIO.mkOutstream (compilerTraceWriter, IO.NO_BUF)
      val _ = Evaluator.setTraceStream compilerTrace

      val (annotText, compilerAnnotWriter) = TextPrimIO.openVectorListWr ()
      val compilerAnnot = TextIO.StreamIO.mkOutstream (compilerAnnotWriter, IO.LINE_BUF)
      val _ = Evaluator.setAnnotStream compilerAnnot
      val annotStream = ref annotText

      val (rowCol, rowColText) = Stream.stream ()

      (* Highlight *)

      fun highlight (buffer, text, startOffset, startiter, enditer) =
          if Gtk.TextIter.getChar startiter = ord #"#"
          then Gtk.TextBuffer.applyTagByName(buffer, "comment", startiter, enditer)
          else BufferHighlight.highlight(buffer, text, startOffset, false, ref false)

      fun fillBuf (view, buffer, handler, tags, noed, highlight, text) =
          let
              val iter = Gtk.TextIter.new()
              val _ = Gtk.TextBuffer.getEndIter(buffer,iter)
	      val _ = Gtk.TextIter.backwardChar iter
              val noInputYet = Gtk.TextIter.hasTag(iter, noed)
	      val _ = Gtk.TextIter.forwardChar iter
	      val _ = if noInputYet
		      then Gtk.TextBuffer.getEndIter(buffer, iter)
		      else ignore (Gtk.TextIter.backwardToTagToggle(iter, noed))
	      val startOffset = Gtk.TextIter.getOffset iter
	      val start = Gtk.TextIter.copy iter
              val textUtf8 = Gtk.latin1ToUtf8 text
          in
              Gtk.signalHandlerBlock(buffer, handler);
	      Gtk.TextBuffer.insert(buffer, iter, textUtf8, size textUtf8);
              Gtk.TextBuffer.getIterAtOffset (buffer, start, startOffset);
              Gtk.TextBuffer.getIterAtOffset (buffer, iter, startOffset + size text);
              app (fn t => Gtk.TextBuffer.applyTag(buffer, t, start, iter)) tags;
              highlight (buffer, text, startOffset, start, iter);
              Gtk.TextBuffer.applyTag(buffer, noed, start, iter);
              Gtk.TextBuffer.placeCursor(buffer,iter);
              Gtk.TextView.scrollToMark(view, Gtk.TextBuffer.getInsert buffer,
                                       0.0, false, 0.0, 0.0);
              Gtk.signalHandlerUnblock(buffer, handler)
          end

      val fillBuf = Lock.sync Gtk.lock fillBuf
              
      val contextId = Gtk.Statusbar.getContextId(Gui.statusbar, "Alice")
      val _ = Gtk.Statusbar.push(Gui.statusbar,contextId, "Ready.");

      fun setStatus msg = 
          let
              val msg = if String.isPrefix "-- " msg then
                            String.extract(msg, 3, NONE)
                        else msg
              val msg = String.map (fn #"\n" => #" " | c => c) msg
          in
              (Gtk.Statusbar.pop(Gui.statusbar, contextId);
               Gtk.Statusbar.push(Gui.statusbar, contextId, msg);
               ())
          end

      val rowColId = Gtk.Statusbar.getContextId(Gui.statusbar1, "rowcol")
      val _ = Gtk.Statusbar.push(Gui.statusbar1,rowColId,
                                "0.0");

      val tooltips = Gtk.Tooltips.new()

      fun setRowCol (row, col, annotOpt) =
          let
              val r = Int.toString row
              val c = Int.toString col
	      val annot = case annotOpt of NONE => "" | SOME(s1,s2,s3) =>
		  s1^" "^s2^" "^Substring.string(Substring.takel (fn c=>c <> #"\n") (Substring.full s3))
              val msg = r^"."^c^"    "^annot
          in
	      case annotOpt of
	          NONE => Gtk.Tooltips.disable tooltips
		| SOME(_,_,s) =>
		  let val s = if String.sub(s, String.size s-1) <> #"\n" then s
				else String.substring(s, 0, String.size s-1)
	          in
		      Gtk.Tooltips.forceWindow tooltips;
		      Gtk.Tooltips.setTip(tooltips, Gui.eventbox1, s,
			"Type information about identifier at cursor position");
		     Gtk.Tooltips.enable tooltips
		  end;
              (Gtk.Statusbar.pop(Gui.statusbar1, rowColId);
               Gtk.Statusbar.push(Gui.statusbar1, rowColId, msg);
               ())
          end

	val cmap   = Gdk.Colormap.getSystem ()
        val textColor = Gdk.Color.new { red = 0xf0f0, green = 0x2020, blue = 0xa0a0 }
	val black = Gdk.Color.new { red = 0, green = 0, blue = 0 }
	val white = Gdk.Color.new { red = 65535, green = 65535, blue = 65535 }
	val _ = Gdk.Colormap.allocColor(cmap, black, false, true)
	val _ = Gdk.Colormap.allocColor(cmap, white, false, true)
	val _ = Gdk.Colormap.allocColor(cmap, textColor, false, true)

        fun progInInsert (stdInStream,noedit,bold)
		(buf, [Gtk.INT off, Gtk.STRING txt, Gtk.INT size]) =
            if String.sub(txt, String.size txt - 1) = #"\n" then
                let
                    val enditer = Gtk.TextIter.new()
                    val cursor = Gtk.TextBuffer.getInsert buf
                    val _ = Gtk.TextBuffer.getIterAtMark(buf,enditer,cursor)
                    val startiter = Gtk.TextIter.copy enditer
                    val _ = Gtk.TextIter.backwardToTagToggle(startiter,noedit)
                    val str = Gtk.TextBuffer.getText(buf, startiter, enditer, false)
                    val str = Gtk.utf8ToLatin1 str
                    val _ = Stream.send(stdInStream, str)
                in
                    Gtk.TextBuffer.applyTag(buf, noedit, startiter, enditer)
                end
            else
                let
                    val startiter = Gtk.TextIter.new()
		    val _ = Gtk.TextBuffer.getIterAtOffset(buf, startiter, off)
                    val enditer = Gtk.TextIter.copy startiter
		    val _ = Gtk.TextIter.forwardChars(enditer, size)
                in
                    Gtk.TextBuffer.applyTag(buf, bold, startiter, enditer)
                end
          | progInInsert _ _ = () (* Gtk is crazy *)

        fun lastChar' iter =
            if Gtk.TextIter.backwardChar iter then
                let
                    val c = Gtk.TextIter.getChar iter
                in
                    (*if c <= Char.maxOrd andalso Char.isSpace(chr c)
                    then lastChar' iter
                    else*) SOME c
                end
            else NONE
        fun lastChar(buf, off) =
            let
                val iter = Gtk.TextIter.new()
            in
                (*Gtk.TextBuffer.getIterAtOffset(buf, iter, off);*)
		Gtk.TextBuffer.getEndIter(buf, iter);
		Gtk.TextIter.getOffset iter = off+1
		andalso Gtk.TextIter.backwardChar iter;
                lastChar' iter
            end

	fun feedCurrentInput () =
	    let
		val buf = Gtk.TextView.getBuffer Gui.compilerout
                val enditer = Gtk.TextIter.new()
		val _ = Gtk.TextBuffer.getEndIter(buf, enditer)
		val off = Gtk.TextIter.getOffset enditer
	    in
		Gtk.TextBuffer.placeCursor(buf, enditer);
		lastChar(buf, off) = SOME (ord #";")
		orelse Gtk.TextBuffer.insertInteractive(buf,enditer,";",~1,true);
		Gtk.TextBuffer.insertInteractive(buf,enditer,"\n",~1,true);
		()
	    end

 	val compilerBufRef = ref NONE  (* Argh, is this hacking... *)
	val noeditRef = ref NONE
	val insertHandler = ref 0

	val timeStamp = ref (Int.toLarge 0)
	fun incTimeStamp () =
	    let
		val p = Promise.promise()
		val x = Ref.exchange (timeStamp, Promise.future p) +
		        Int.toLarge 1
	    in
		Promise.fulfill (p, x);
		x
	    end

        fun compilerInsert' ts (eval, noedit, bold)
		(buf, [Gtk.INT off, Gtk.STRING txt, Gtk.INT size]) 
		if (ts = !timeStamp) =
	    let
                val startiter = Gtk.TextIter.new()
                val enditer = Gtk.TextIter.new()
	    in
		if txt = "\n" then
		    if lastChar(buf, off+size-1) = SOME (ord #";") then
                	let
			    val _ = Gtk.TextBuffer.getIterAtOffset(buf, startiter, off)
			    val _ = Gtk.TextBuffer.getIterAtOffset(buf, enditer, off)
			    val _ = Gtk.TextIter.forwardChar enditer
			    val _ = Gtk.TextBuffer.delete(buf, startiter, enditer)

			    val _ = Gtk.TextBuffer.getEndIter(buf, startiter)
			    val _ = Gtk.signalHandlerBlock(buf, !insertHandler)
			    val _ = Gtk.TextBuffer.insert(buf, startiter, "\n", ~1)
			    val _ = Gtk.signalHandlerUnblock(buf, !insertHandler)

		            val _ = Gtk.TextBuffer.getEndIter(buf, enditer)
			    val _ = Gtk.TextBuffer.getEndIter(buf, startiter)
                	    val _ = Gtk.TextIter.backwardToTagToggle(startiter, noedit)
                	    val _ = Gtk.TextBuffer.applyTag(buf, noedit, startiter, enditer)
                	    val str = Gtk.TextBuffer.getText(buf, startiter, enditer, false)
                	    val str = Gtk.utf8ToLatin1 str
                	in
                	    eval str;
                	    History.extend (String.substring (str, 0, String.size str-1))
                	end
		    else
			(Gtk.signalHandlerBlock(buf, !insertHandler);
			 Gtk.TextBuffer.insertAtCursor(buf, "  ", ~1);
			 Gtk.signalHandlerUnblock(buf, !insertHandler))
        	else
		    let
			val _ = Gtk.TextBuffer.getEndIter(buf, enditer)
			val _ = Gtk.TextBuffer.getIterAtOffset(buf, startiter, off)
			val _ = Gtk.TextIter.backwardChar startiter
        		val noInputYet = Gtk.TextIter.hasTag(startiter, noedit)
			val _ = Gtk.TextIter.forwardChar startiter
			val _ = if noInputYet
				then Gtk.TextBuffer.getIterAtOffset(buf, startiter, off)
				else ignore (Gtk.TextIter.backwardToTagToggle(startiter, noedit))
                	val str = Gtk.TextBuffer.getText(buf, startiter, enditer, false)
                	val str = Gtk.utf8ToLatin1 str
			val offset = Gtk.TextIter.getOffset startiter
		    in
			Gtk.TextBuffer.removeAllTags(buf, startiter, enditer);
                        Gtk.TextBuffer.applyTag(buf, bold, startiter, enditer);
                	highlight(buf, str, offset, startiter, enditer)
		    end
	    end
          | compilerInsert' _ _ _ = ()

	fun compilerInsert arg1 arg2 =
	    let
		(* in the case of several consecutive events,
		   hopefully, compilerInsert' is scheduled after
		   the time stamp has been incremented for most of them,
		   such that only the last event triggers highlighting
		   (same for compilerDelete)
		 *)
		val ts = incTimeStamp()
	    in
		spawn Lock.sync Gtk.lock (compilerInsert' ts arg1) arg2
	    end

	fun compilerDelete' ts (noedit, bold) (buf, _) =
	    if ts = !timeStamp then
	    let
                val startiter = Gtk.TextIter.new()
                val enditer = Gtk.TextIter.new()
		val _ = Gtk.TextBuffer.getEndIter(buf, enditer)
		val _ = Gtk.TextBuffer.getEndIter(buf, startiter)
		val _ = Gtk.TextIter.backwardChar startiter
        	val noInputYet = Gtk.TextIter.hasTag(startiter, noedit)
		val _ = Gtk.TextIter.forwardChar startiter
		val _ = if noInputYet
			then Gtk.TextBuffer.getEndIter(buf, startiter)
			else ignore (Gtk.TextIter.backwardToTagToggle(startiter, noedit))
                val str = Gtk.TextBuffer.getText(buf, startiter, enditer, false)
                val str = Gtk.utf8ToLatin1 str
		val offset = Gtk.TextIter.getOffset startiter
	    in
		Gtk.TextBuffer.removeAllTags(buf, startiter, enditer);
                Gtk.TextBuffer.applyTag(buf, bold, startiter, enditer);
                highlight(buf, str, offset, startiter, enditer)
	    end
	    else ()

	fun compilerDelete arg1 arg2 = 
	    let
		val ts = incTimeStamp()
	    in
		spawn Lock.sync Gtk.lock (compilerDelete' ts arg1) arg2
	    end

	fun compilerHistory direction () =
	    let
                val buf = Option.valOf (!compilerBufRef)
		val noedit = Option.valOf (!noeditRef)
		val enditer = Gtk.TextIter.new()
                val _ = Gtk.TextBuffer.getEndIter(buf, enditer)
                val startiter = Gtk.TextIter.copy enditer
		val _ = Gtk.TextIter.backwardChar startiter
                val noInputYet = Gtk.TextIter.hasTag(startiter, noedit)
		val _ = Gtk.TextIter.forwardChar startiter
		val _ = if noInputYet
			then Gtk.TextBuffer.getEndIter(buf, startiter)
			else ignore (Gtk.TextIter.backwardToTagToggle(startiter, noedit))
                val s = Gtk.TextBuffer.getText(buf, startiter, enditer, false)
		val s = Gtk.utf8ToLatin1 s
		val s' = Gtk.latin1ToUtf8 (direction s)
	    in
		Gtk.TextBuffer.delete(buf, startiter, enditer);
		Gtk.TextBuffer.placeCursor(buf, startiter);
		Gtk.TextBuffer.insertAtCursor(buf, s', ~1);
                Gtk.TextView.scrollToMark(Gui.compilerout,
					 Gtk.TextBuffer.getInsert buf,
                                         0.0, false, 0.0, 0.0)
	    end

      val historyPrev = compilerHistory History.backwards
      val historyNext = compilerHistory History.forwards

      fun makeWriters eval =
          let
              val progBuf = Gtk.TextBuffer.new Gtk.NULL
              val compilerBuf = Gtk.TextBuffer.new Gtk.NULL
              val {err=pErr,log=pLog,plain=pStd,noedit=pNoEd,bold=pBold,...} = makeTags progBuf
              val {err=cErr,log=cLog,plain=cStd,noedit=cNoEd,bold=cBold,...} = makeTags compilerBuf
              val pSig = Gtk.signalConnect(progBuf, "insert-text",
                                           progInInsert (stdin, pNoEd, pBold))
              val cSig = Gtk.signalConnect(compilerBuf, "insert-text",
                                           compilerInsert (eval, cNoEd, cBold))
              val cDelSig = Gtk.signalConnect(compilerBuf, "delete-range",
                                              compilerDelete (cNoEd, cBold))

              fun forward (widget, buf, signal, noed, styles, highlights) =
		  let
		      fun receive (text, mark) =
			  (if String.size text = 0 then mark else
			  if String.sub (text, 0) <= #"\002"
			  then receive (String.extract (text, 1, NONE),
					Char.ord (String.sub (text, 0)))
			  else (
			  fillBuf (widget, buf, signal,
					 [Vector.sub (styles, mark)], noed,
					 Vector.sub (highlights, mark), text);
				mark)
			  ) handle e =>
				(TextIO.output(TextIO.stdErr,
					       "** uncaught exception " ^ Exn.name e ^
					       " in output writer\n");
				 mark)
		  in
		      receive
		  end
          in
              compilerBufRef := SOME compilerBuf;
	      noeditRef := SOME cNoEd;
	      insertHandler := cSig;
	      Gtk.Widget.modifyFont(Gui.compilerout, !Config.stdFont);
	      Gtk.Widget.modifyFont(Gui.progout, !Config.stdFont);
              Gtk.TextView.setBuffer(Gui.progout, progBuf);
              Gtk.TextView.setBuffer(Gui.compilerout, compilerBuf);
	      spawn foldl (forward (Gui.compilerout, compilerBuf, cSig, cNoEd,
				    #[cStd, cLog, cErr],
				    #[highlight, highlight, Fn.const ()])) 1 compilerText;
	      spawn foldl (forward (Gui.progout, progBuf, pSig, pNoEd,
				    #[pStd, pStd, pErr],
				    #[Fn.const (), Fn.const (), Fn.const ()])) 1 stdText;
              spawn app setStatus traceText;
              spawn app setRowCol rowColText
          end
   end
