(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2005
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import functor MkRedBlackSet from "x-alice:/lib/data/MkRedBlackSet"

signature HIGHLIGHT =
sig
    datatype style = PLAIN | RESERVED | STRING | COMMENT | ERRONEOUS

    val scan : string -> (style * int * int) list
end

structure Highlight : HIGHLIGHT =
struct
    datatype style = PLAIN | RESERVED | STRING | COMMENT | ERRONEOUS

    (* Reserved words *)

    structure SubstringSet = MkRedBlackSet Substring

    val reservedWords = (SubstringSet.fromVector o Vector.map Substring.full)
	#["_file_", "_line_",
	  "abstype", "and", "andalso", "any", "as", "assert",
	  "assert0", "assert1", "assert2", "assert3", "assert4",
	  "assert5", "assert6", "assert7", "assert8", "assert9",
	  "case", "constructor",
	  "datatype", "do",
	  "else", "end", "eqtype", "exception", "exttype",
	  "fct", "finally", "fn", "for", "from", "fun", "functor",
	  "handle",
	  "if", "import", "in", "include", "infix", "infixr",
	  "lazy", "let", "local",
	  "non", "nonfix",
	  "of", "op", "open", "orelse",
	  "pack",
	  "raise", "rec",
	  "sharing", "sig", "signature", "spawn", "struct", "structure",
	  "then", "type",
	  "unpack",
	  "val",
	  "where", "while", "with", "withfun", "withtype", "withval"
	 ]

    fun isReserved ss = SubstringSet.member (reservedWords, ss)

    fun isIdChar c = Char.isAlphaNum c orelse c = #"_" orelse c = #"'"

    fun merge (style,x1,x2, (style',x1',x2')::rs) if (style = style') =
	    (style,x1',x2)::rs
      | merge (style,x1,x2, rs) = (style,x1,x2)::rs

    fun checkReserved (s, x1, x2, rs) =
	if String.sub (s, x1) = #"_"
	orelse isReserved (Substring.substring (s, x1, x2-x1))
	then merge (RESERVED, x1, x2, rs)
	else merge (PLAIN, x1, x2, rs)

    (* Scanning *)

    fun scanPlain (s, x', x, rs) =
	if x = String.size s then
	    merge (PLAIN, x', x, rs)
	else let
	    val c = String.sub (s, x)
	in
	    if isIdChar c then
		scanId (s, x, x+1, merge (PLAIN, x', x, rs))
	    else if c = #"\"" then
		scanString (s, x, x+1, merge (PLAIN, x', x, rs))
	    else if c = #"(" andalso x < String.size s - 1
		 andalso String.sub (s, x+1) = #"*" then
		if x < String.size s - 2
		     andalso String.sub (s, x+2) = #")" then
		    scanLineComment 1 (s, x, x+3, merge (PLAIN, x', x, rs))
		else
		    scanComment 1 (s, x, x+2, merge (PLAIN, x', x, rs))
	    else
		scanPlain (s, x', x+1, rs)
	end
    and scanString (s, x', x, rs) =
	if x = String.size s then
	    merge (ERRONEOUS, x', x, rs)
	else let
	    val c = String.sub (s, x)
	in
	    if c = #"\"" then
		scanPlain (s, x+1, x+1, merge (STRING, x', x+1, rs))
	    else if c = #"\\" then
		if x = String.size s - 1
		orelse Char.isSpace (String.sub (s, x+1))
		then scanStringGap (s, x', x+1, rs)
		else scanString (s, x', x+2, rs)
	    else if Char.ord c < 32 then
		scanPlain (s, x+1, x+1, merge (ERRONEOUS, x', x+1, rs))
	    else
		scanString (s, x', x+1, rs)
	end
    and scanStringGap (s, x', x, rs) =
	if x = String.size s then
	    merge (ERRONEOUS, x', x, rs)
	else let
	    val c = String.sub (s, x)
	in
	    if c = #"\\" then
		scanString (s, x', x+1, rs)
	    else if Char.isSpace c then
		scanStringGap (s, x', x+1, rs)
	    else
		scanPlain (s, x+1, x+1, merge (ERRONEOUS, x', x+1, rs))
	end
    and scanId (s, x', x, rs) =
	if x = String.size s then
	    checkReserved (s, x', x, rs)
	else if isIdChar (String.sub (s, x)) then
	    scanId (s, x', x+1, rs)
	else
	    scanPlain (s, x, x, checkReserved (s, x', x, rs))
    and scanLineComment nesting (s, x', x, rs) =
	if x = String.size s then
	    scanComment (nesting-1) (s, x', x, rs)
	else if String.sub (s, x) = #"\n" then
	    scanComment (nesting-1) (s, x', x+1, rs)
	else
	    scanLineComment nesting (s, x', x+1, rs)
    and scanComment nesting (s, x', x, rs) =
	if nesting = 0 then
	    scanPlain (s, x, x, merge (COMMENT, x', x, rs))
	(* last character cannot end or start a comment *)
	else if x >= String.size s - 1 then
	    merge (ERRONEOUS, x', String.size s, rs)
	else let
	    val c = String.sub (s, x)
	in
	    if c = #"*" andalso String.sub (s, x+1) = #")" then
		scanComment (nesting-1) (s, x', x+2, rs)
	    else if c = #"(" andalso String.sub (s, x+1) = #"*" then
		if x < String.size s - 2
		     andalso String.sub (s, x+2) = #")" then
		    scanLineComment (nesting+1) (s, x', x+3, rs)
		else
		    scanComment (nesting+1) (s, x', x+2, rs)
	    else
		scanComment nesting (s, x', x+1, rs)
	end

    (* Export *)

    fun scan s = List.rev (scanPlain (s, 0, 0, nil))
end
