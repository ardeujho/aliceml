(*
 * Authors:
 *   Gareth Smith <garethdanielsmith@gmail.com>
 *)

import structure GtkBuilder  from "x-alice:/lib/gtk/GtkBuilder"


signature CODE_GENERATOR =
sig
    val generate : string -> unit
end


structure CodeGenerator :> CODE_GENERATOR =
struct


    fun deDupe ss =
        let
            fun deDupe' (a::b::xs) if (a = b) = deDupe' (b::xs)
              | deDupe' (a::b::xs)            = a::deDupe' (b::xs)
              | deDupe' xs                    = xs
        in
            deDupe' (List.sort String.compare ss)
        end


    fun quote s =
        "\"" ^ String.toString s ^ "\""


    fun cvtId s =
        case String.concatWith "_" (String.tokens (not o Char.isAlphaNum) s)
        of ""                                        => "empty"
         | s' if (Char.isDigit (String.sub (s', 0))) => "x" ^ s'
         | s'                                        => s'


    fun mkPrologue () =
        let
            val d = Date.fromTimeUniv (Time.now())
        in
            "(*\n" ^
            " * This file was generated by alicegtkbuilder on " ^ Date.toString d ^ "\n" ^
            " * Modifications may be lost.\n" ^
            " *)\n\n"
        end


    fun outFilePath uiFile outFile =
        case OS.Path.dir uiFile
        of "" => outFile
         | s  => s ^ "/" ^ outFile


    fun writeOut uiFile bld name =
       let
           val uiFileIn = TextIO.openIn uiFile
           val file     = TextIO.inputAll uiFileIn
           
           val outFile = outFilePath uiFile (name ^ ".aml")
           val out     = TextIO.openOut outFile
           
           fun println s =
               TextIO.output (out, s ^ "\n")
           
           fun writeObj {name, object} =
               println ("    val " ^ cvtId name ^ " = GtkBuilder.getObject ($$$, " ^ quote name ^ ")")
       in
           println (mkPrologue());
           println "import structure GtkBuilder from \"x-alice:/lib/gtk/GtkBuilder\"\n";
           println ("structure " ^ cvtId name ^ " =");
           println "struct";
           println ("    val $$$ = GtkBuilder.newFromString " ^ quote file);
           app writeObj (GtkBuilder.getObjects bld);
           println "end";
           
           TextIO.closeIn uiFileIn;
           TextIO.closeOut out;
       end


    fun writeOutSignals uiFile bld name =
       let
           val outFile = outFilePath uiFile (name ^ "Signals.aml")
           val out     = TextIO.openOut outFile
           
           val signals  = GtkBuilder.getSignals bld
           val handlers = deDupe (map #handler signals)
           
           val functName = name ^ "Signals"
           val sigName   = String.map Char.toUpper functName ^ "_SIG"
           
           fun println s =
               TextIO.output (out, s ^ "\n")
           
           fun writeHandlerSig handler =
               println ("    val " ^ cvtId handler ^ " : Gtk.callback_function")
           
           fun writeSignalConnect {object, signal, handler, connect_after} =
               let
                   (*) HACK: i dont know why, but this seems to be required (aliceglade did it)
                   val signal = if signal = "delete_event" then "delete-event" else signal
               in
                   println (
                   "    val " ^ cvtId (object ^ "_" ^ handler) ^ " = " ^
                       "Gtk.signalConnect" ^ (if connect_after then "After" else "") ^
                       "(" ^ cvtId name ^ "." ^ cvtId object ^ ", \"" ^ signal ^ "\", S." ^ cvtId handler ^ ")"
                   )
               end
       in
           println (mkPrologue());
           println ("import structure Gtk from \"x-alice:/lib/gtk/Gtk\"");
           println ("import structure " ^ cvtId name ^ " from \"" ^ cvtId name ^ "\"");
           println "";
           println ("signature " ^ cvtId sigName ^ " =");
           println "sig";
           app writeHandlerSig handlers;
           println "end";
           println "";
           println ("functor " ^ cvtId functName ^ " (structure S : " ^ cvtId sigName ^ ") =");
           println "struct";
           app writeSignalConnect signals;
           println "end";
           
           TextIO.closeOut out;
       end
    

    fun generate uiFile =
        let
            val bld  = GtkBuilder.newFromFile uiFile
            val name = OS.Path.base (OS.Path.file uiFile)
        in
            writeOut uiFile bld name;
            writeOutSignals uiFile bld name;
        end

end
