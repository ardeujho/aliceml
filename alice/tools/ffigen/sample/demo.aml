
import structure c from "c"
import structure util from "util"

open c
open util


val _ = printhello();

val v1 = vec_new();
val _ = memset(v1,sizeof_vec(),#" ");

val v2 = vec_new();
val _ = memset(v2,sizeof_vec(),#" ");

val _ = vec_set_x(v1,1);
val _ = vec_set_y(v1,2);
val _ = memcpy(v2,v1,sizeof_vec());

val vsum = add_vec(v1,v2);

val _ = print ("vsum = ("^Int.toString(vec_get_x vsum)^","^
	                  Int.toString(vec_get_y vsum)^")\n");


val v3 = cast_vec(new(sizeof_vec()));
val _ = memcpy(v3,v2,sizeof_vec());

val _ = print ("v3 = ("^Int.toString(vec_get_x v3)^","^
	                Int.toString(vec_get_y v3)^")\n");

val v3x = unref_int (cast_int v3)
val _ = print ("v3.x = "^Int.toString(v3x)^"\n")

val arr = Array.array(4,#"a")
val sum1 = add_array(arr);
val _ = print ("Summe Array: "^Int.toString(sum1)^"\n");

val _ = let val lst = map pointer_int [1,2,3,4,5]
    val sum2 = list_add lst
    val _ = map delete lst
in
    print ("Summe Liste: "^Int.toString(sum2)^"\n")
end

val sum3 = (mycast const_a) + (mycast const_b) + (mycast const_c) + (mycast const_d);
val _ = print ("Summe a+b+c+d: "^Int.toString(sum3)^"\n")

val pi = pointer_int 4
val _ = inc pi
val i = unref_int pi
val _ = delete pi
val _ = print ("Nach Inkrement: "^Int.toString(i)^"\n")

val _ = dummy const_a

val _ = OS.Process.exit OS.Process.success
