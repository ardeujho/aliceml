(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2000
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure c         from "c"
import structure Gtk       from "Gtk"
import structure Random    from "x-alice:/lib/utility/Random"

local
    fun newServer () =
	let
	    val tail   = Promise.promise ()
	    val stream = Ref.ref tail

	    fun process s = (case s of
				 nil   => ()
			       | p::pr => (p (); process pr))
	    fun send p =
		let
		    val newtail = Promise.promise ()
		    val tail    = Ref.exchange(stream, newtail)
		in
		    Promise.fulfill(tail, p::(Promise.future newtail))
		end
	in
	    (spawn (process(Promise.future tail));
	     send)
	end

    val serve = newServer ()

    val pieceSize = 50

    val font = "Sans 10"
    (*"-adobe-helvetica-bold-r-normal--24-240-75-75-p-138-iso8859-1"*)

    val map   = Gtk.gdkColormapGetSystem ()
    val black = Gtk.colorNew(0,0,0)
    val white = Gtk.colorNew(65535, 65535, 65535)
    val _     = Gtk.gdkColormapAllocColor(map, black, false, true)
    val _     = Gtk.gdkColormapAllocColor(map, white, false, true)

    exception Error
    
    fun numToHex 0 = #"0"
      | numToHex 1 = #"1"
      | numToHex 2 = #"2"
      | numToHex 3 = #"3"
      | numToHex 4 = #"4"
      | numToHex 5 = #"5"
      | numToHex 6 = #"6"
      | numToHex 7 = #"7"
      | numToHex 8 = #"8"
      | numToHex 9 = #"9"
      | numToHex 10 = #"A"
      | numToHex 11 = #"B"
      | numToHex 12 = #"C"
      | numToHex 13 = #"D"
      | numToHex 14 = #"E"
      | numToHex 15 = #"F"
      | numToHex _  = raise Error

    fun makeHeX col =
	String.implode [numToHex(col div 16), numToHex(col mod 16)]

    fun getPieceColor piece =
	let
	    val y      = piece div 4
	    val x      = piece mod 4
	    val r      = ((4 - x) * 255) div 4
	    val g      = ((4 - y) * 255) div 4
	    val b      = 128
	    val color  = Gtk.colorNew(0, 0, 0)
	    val colStr = "#" ^(makeHeX r) ^ (makeHeX g) ^ (makeHeX b)
	    val _      = Gtk.gdkColorParse(colStr, color) 
	    val _      = Gtk.gdkColormapAllocColor(map, color, false, true)
	in
	    color
	end

    fun createCanvas () =
	let
	    val canvas = Gtk.gnomeCanvasNew()
	    val xDim   = (pieceSize * 4 + 1)
	    val yDim   = (pieceSize * 4 + 1)
	in
	    (Gtk.gtkWidgetSetSizeRequest(canvas, xDim, yDim);
	     Gtk.gnomeCanvasSetScrollRegion(c.cast canvas, 0.0, 0.0,
				       Real.fromInt xDim, Real.fromInt yDim);
	     canvas)
	end

    fun isEmpty(itemArr, i) =
	(case Array.sub(itemArr, i) of
	     NONE => true
	   | _    => false)
	     
    fun checkMove(itemArr, x, y) =
	let
	    val pos1 = ((y - 1) * 4 + x)
	    val pos2 = ((y + 1) * 4 + x)
	    val pos3 = (y * 4 + x - 1)
	    val pos4 = (y * 4 + x + 1)
	in
	    if      ((y > 0) andalso isEmpty(itemArr, pos1))
		then (0.0, ~1.0, x, y - 1, true)
	    else if ((y < 3) andalso isEmpty(itemArr, pos2))
                then (0.0, 1.0, x, y + 1, true)
	    else if ((x > 0) andalso isEmpty(itemArr, pos3))
                then (~1.0, 0.0, x - 1, y, true)
	    else if ((x < 3) andalso isEmpty(itemArr, pos4))
                then (1.0, 0.0, x + 1, y, true)
	    else (0.0, 0.0, x, y, false)
	end

    fun checkVictory(posArr, i) =
	(case i < 15 of
	     false => (print "You win!"; true)
	   | true  => (Array.sub(posArr, i) = i)
		 andalso checkVictory(posArr, (i + 1)))

    fun fillBoard(board as (itemArr, posArr), i, parent) =
       (case (i < 15) of
	  false => (Array.update(itemArr, 15, NONE);
		    Array.update(posArr, i, 15))
	| true =>
	  let
	    val x   = i mod 4
	    val y   = i div 4
	    val ItR = Real.fromInt

	    val X1 = ItR (x * pieceSize)
	    val Y1 = ItR (y * pieceSize)
	    val X2 = Real.+(X1, ItR pieceSize)
	    val Y2 = Real.+(Y1, ItR pieceSize)
	    val tX = Real.+(X1, 25.0)
	    val tY = Real.+(Y1, 25.0)

	    val group = Gtk.itemCreate(c.cast parent,
			    Gtk.cast(Gtk.gnomeCanvasGroupGetType()),
			    [("x", Gtk.REAL X1),
			     ("y", Gtk.REAL Y1)])

	    val box = Gtk.itemCreate(c.cast group,
			  Gtk.cast(Gtk.gnomeCanvasRectGetType()),
			  [("x1", Gtk.REAL 0.0),
			   ("y1", Gtk.REAL 0.0),
			   ("x2", Gtk.REAL (ItR pieceSize)),
			   ("y2", Gtk.REAL (ItR pieceSize)),
			   ("fill_color_gdk", Gtk.OBJECT (getPieceColor i)),
			   ("outline_color_gdk", Gtk.OBJECT black),
			   ("width_pixels", Gtk.INT 0)])

	    val text = Gtk.itemCreate(c.cast group, 
		           Gtk.cast(Gtk.gnomeCanvasTextGetType()),
			   [("text", Gtk.STRING (Int.toString (i+1))),
			    ("x", Gtk.REAL 25.0),
			    ("y", Gtk.REAL 25.0),
			    ("font", Gtk.STRING font),
			    ("anchor", Gtk.INT 0(*Gtk.ANCHOR_CENTER*)),
			    ("fill_color_gdk", Gtk.OBJECT black)])

	     fun pieceEvent (_, [Gtk.EVENT event]) = serve
	        (fn () =>
		     (case event of
			  Gtk.EVENT_ENTER_NOTIFY _ =>
			      Gtk.gnomeCanvasItemSetValist(text,
						        "fill_color_gdk",
						        [Gtk.OBJECT white])
			| Gtk.EVENT_LEAVE_NOTIFY _ =>
			      Gtk.gnomeCanvasItemSetValist(Gtk.cast text,
						        "fill_color_gdk",
							[Gtk.OBJECT black])
			| Gtk.EVENT_BUTTON_PRESS _ =>
			  let
			      val pos = Array.sub(posArr, i)
			      val y   = pos div 4
			      val x   = pos mod 4
			      val (dx, dy, nx, ny, move) =
				  checkMove(itemArr, x, y)
			  in
			      (case move of
				   false => ()
				 | true  =>
				   let
				       val ItR    = Real.fromInt
				       val newpos = (ny * 4 + nx)
				       val mx     = Real.*(dx, (ItR pieceSize))
				       val my     = Real.*(dy, (ItR pieceSize))
				   in
				       (Array.update(posArr, i, newpos);
					Array.update(itemArr, pos, NONE);
					Array.update(itemArr, newpos, 
						     SOME group);
					Gtk.gnomeCanvasItemMove(c.cast group, mx, my);
					checkVictory(posArr, 0); ())
				   end)
			  end
			| _ => () (* Ignore all other events *)))
	in
	    (Array.update(itemArr, i, SOME group);
	     Array.update(posArr, i, i);
	     Gtk.signalConnect(group, "event", (fn x => print "!\n";pieceEvent));
	     fillBoard(board, (i + 1), parent))
	end)
	     
    fun createBoard canvas =
	let
	    val posArr  = Array.array(16, 0)
	    val itemArr = Array.array(16, NONE)
	    val board   = (itemArr, posArr)
	in
	    (fillBoard(board, 0, Gtk.cast(Gtk.gnomeCanvasRoot canvas)); board)
	end
    
    val board = Hole.hole ()
	
    fun findSpot (itemArr, i) =
	(case Array.sub(itemArr, i) of
	     NONE   => i
	   | SOME _ => findSpot(itemArr, (i + 1)))

    fun makeMove pos =
	let
	    val dir = Random.int 4
	in
	    if      ((dir = 0) andalso (pos > 3))          then (0, ~1)
	    else if ((dir = 1) andalso (pos < 12))         then (0, 1)
	    else if ((dir = 2) andalso ((pos mod 4) <> 0)) then (~1, 0)
            else if ((dir = 3) andalso ((pos mod 4) <> 3)) then (1, 0)
	    else makeMove(pos)
	end

    fun translateIndex(posArr, pos, i) =
	(case i < 16 of
	     false => ~1
	   | true  => if Array.sub(posArr, i) = pos then i
		      else translateIndex(posArr, pos, (i + 1)))

    val initMoves = 256

    fun moveSpot (canvas, board as (itemArr, posArr), i, pos) =
	(case i < initMoves of
	     false => ()
	   | true  =>
		 let
		     val (x, y)      = makeMove pos
		     val dx          = Real.fromInt (pieceSize * ~x)
		     val dy          = Real.fromInt (pieceSize * ~y)
		     val posIndex    = translateIndex(posArr, pos, 0)
		     val oldpos      = (pos + y * 4 + x)
		     val oldposIndex = translateIndex(posArr, oldpos, 0)
		     val item        = Array.sub(itemArr, oldpos)
		 in
		     (Array.update(itemArr, pos, item);
		      Array.update(itemArr, oldpos, NONE);
		      Array.update(posArr, posIndex, oldpos);
		      Array.update(posArr, oldposIndex, pos);
		      Gtk.gnomeCanvasItemMove(valOf item, dx, dy);
		      Gtk.gnomeCanvasUpdateNow canvas;
		      moveSpot (canvas, board, (i + 1), oldpos))
		 end)

    fun scrambleEvent canvas (board as (itemArr, posArr)) _ = serve
	(fn () => (print "s("; moveSpot(canvas, board, 0, findSpot(itemArr, 0)); print ")"))

    fun fifteen () =
	let
	    val vbox      = Gtk.gtkVboxNew(false, 4)
 	    val alignment = Gtk.gtkAlignmentNew(0.5, 0.5, 0.0, 0.0)
	    val frame     = Gtk.gtkFrameNew "" 
	    val canvas    = createCanvas ()
	    val button    = Gtk.gtkButtonNewWithLabel "Scramble"
	in
	    (Gtk.gtkContainerSetBorderWidth(Gtk.cast vbox, 4);
	     Gtk.gtkWidgetShow vbox;
	     Gtk.gtkBoxPackStart(Gtk.cast vbox, alignment, true, true, 0);
	     Gtk.gtkWidgetShow alignment;
	     Gtk.gtkFrameSetShadowType(Gtk.cast frame, Gtk.GTK_SHADOW_IN);
	     Gtk.gtkContainerAdd(Gtk.cast alignment, frame);
	     Gtk.gtkWidgetShow frame;
	     Gtk.gtkContainerAdd(c.cast frame, canvas);
	     Gtk.gtkWidgetShow canvas;
	     Hole.fill(board, createBoard (Gtk.cast canvas));
	     Gtk.gtkBoxPackStart(c.cast vbox, button, false, false, 0);
	     Gtk.signalConnect(c.cast button, "clicked", Gtk.cast(scrambleEvent (Gtk.cast canvas) (Gtk.cast board)));
	     Gtk.gtkWidgetShow (Gtk.cast button);
	     vbox)
	end

    fun main () =
	let
	    val window      = Gtk.gtkWindowNew Gtk.GTK_WINDOW_POPUP
	    val deleteEvent = fn _ => OS.Process.exit OS.Process.success
	    val notebook    = Gtk.gtkNotebookNew ()
	    val f_page      = fifteen ()
	    val f_label     = Gtk.gtkLabelNew(Gtk.cast(c.stringToCharPtr("Fifteen")))
	in
	    (Gtk.signalConnect(window, "delete-event", deleteEvent);
	     Gtk.gtkContainerSetBorderWidth(c.cast window, 4);
             Gtk.gtkWindowSetTitle(c.cast window, "Canvas Demo");
	     Gtk.gtkContainerAdd(c.cast window, notebook);
	     Gtk.gtkNotebookSetShowTabs(c.cast notebook, true);
	     Gtk.gtkNotebookAppendPage(c.cast notebook, f_page, f_label);
	     Gtk.gtkWidgetShowAll (c.cast window))
	end
in
    val _ = main ()
	handle ex => print ("Got unexpected exception")
end
