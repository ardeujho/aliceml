(*
 * Authors:
 *   Robert Grabowski <grabow@ps.uni-sb.de>
 *
 * Copyright:
 *   Robert Grabowski, 2003
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure gtk from "gtk"

import structure types from "types"
import structure NativeCore from "NativeCore"

import signature CORE from "CORE-sig"


structure Core :> CORE =
struct
    type 'a pointer = 'a types.pointer
    
    (* event represents a GdkEvent *)
    datatype 'a event =
	EVENT_NOTHING
      | EVENT_DELETE
      | EVENT_DESTROY
      | EVENT_EXPOSE of 
	{window:'a pointer, send:bool, 
	 area_x:int, area_y:int, area_height:int, area_width:int,
	 region:'a pointer, count:int}
      | EVENT_MOTION_NOTIFY of
	{window:'a pointer, send:bool, time:int,
	 x:real, y:real,
	 state:int, is_hint:int,
	 device: 'a pointer, x_root:real, y_root:real}
      | EVENT_BUTTON_PRESS of
	{window:'a pointer, send:bool, time:int,
	 x:real, y:real, state:int, button:int,
	 device: 'a pointer, x_root:real, y_root:real}
      | EVENT_2BUTTON_PRESS of
	{window:'a pointer, send:bool, time:int,
	 x:real, y:real, state:int, button:int,
	 device: 'a pointer, x_root:real, y_root:real}
      | EVENT_3BUTTON_PRESS of
	{window:'a pointer, send:bool, time:int,
	 x:real, y:real, state:int, button:int,
	 device: 'a pointer, x_root:real, y_root:real}
      | EVENT_BUTTON_RELEASE of
	{window:'a pointer, send:bool, time:int,
	 x:real, y:real, state:int, button:int,
	 device: 'a pointer, x_root:real, y_root:real}
      | EVENT_KEY_PRESS of
	{window:'a pointer, send:bool, time:int, state:int,
	 keyval:int, length:int, string:string, 
	 hardware_keycode:int, group:int}
      | EVENT_KEY_RELEASE of
	{window:'a pointer, send:bool, time:int, state:int,
	 keyval:int, length:int, string:string, 
	 hardware_keycode:int, group:int}
      | EVENT_ENTER_NOTIFY of
	{window:'a pointer, send:bool, subwindow:'a pointer, time:int,
	 x:real, y:real, x_root:real, y_root:real,
	 mode:int, detail:int, focus:bool, state:int}
      | EVENT_LEAVE_NOTIFY of
	{window:'a pointer, send:bool, subwindow:'a pointer, time:int,
	 x:real, y:real, x_root:real, y_root:real,
	 mode:int, detail:int, focus:bool, state:int}
      | EVENT_FOCUS_CHANGE of {window:'a pointer, send:bool, hasFocus:bool}
      | EVENT_CONFIGURE of
	{window:'a pointer, send:bool, x:int, y:int,
 	 width:int, height:int}
      | EVENT_MAP
      | EVENT_UNMAP
      | EVENT_PROPERTY_NOTIFY
      | EVENT_SELECTION_CLEAR
      | EVENT_SELECTION_REQUEST
      | EVENT_SELECTION_NOTIFY
      | EVENT_PROXIMITY_IN
      | EVENT_PROXIMITY_OUT
      | EVENT_DRAG_ENTER
      | EVENT_DRAG_LEAVE
      | EVENT_DRAG_MOTION
      | EVENT_DRAG_STATUS
      | EVENT_DROP_START
      | EVENT_DROP_FINISHED
      | EVENT_CLIENT_EVENT
      | EVENT_VISIBILITY_NOTIFY of
	{window:'a pointer, send:bool, state:int}
      | EVENT_NO_EXPOSE of {window:'a pointer, send:bool}
      | EVENT_SCROLL of
	{window:'a pointer, send:bool, time:int, x:real, y:real,
	 state:int, direction:int, device:'a pointer,
	 x_root:real, y_root:real}
      | EVENT_WINDOW_STATE
      | EVENT_SETTING
      | EVENT_UNSUPPORTED of 'a pointer

    (* arg is used for: 
        - arguments coming from the event stream and passed to 
          an alice event callback function
        - arguments passed to a Gtk function that takes a variable number of
	  arguments *)
    datatype 'a arg = 
	BOOL of bool
      | INT of int
      | REAL of real
      | STRING of string
      | OBJECT of 'a pointer
      | LIST of 'a pointer list
      | EVENT of 'a event

    fun isNull x = NativeCore.isNull x
    val NULL = NativeCore.null()      (* represents the C NULL pointer *)
    val TRUE = NativeCore.gtkTrue()   (* the Gtk TRUE value as int *)
    val FALSE = NativeCore.gtkFalse() (* the Gtk FALSE value as int *)

    type ('a,'b) callBackFunction = 'a pointer * 'b arg list -> unit

    (* signal connecting and signal table functions *)
    fun doSignalConnect (obj,signame,callback,after) =
	let
	    val connid = NativeCore.signalConnect (obj,signame,after) 
	    val _      = NativeCore.signalMapAdd (connid,callback,obj)
	in
	    connid
	end

    local
	fun checkSignalConnect _     (_,"destroy",_)        = ~1
	  | checkSignalConnect after (obj,signame,callback) =
	    doSignalConnect (obj,signame,callback,after)
    in
	val signalConnect      = checkSignalConnect false
	val signalConnectAfter = checkSignalConnect true

	fun signalDisconnect (obj, connid) =
	    ( NativeCore.signalDisconnect(obj,connid) ;
	      NativeCore.signalMapRemove connid)
    end

    (* event stream listener *)
    local
	fun runCallback(connid, obj, args) =
	    NativeCore.signalMapCondGet(connid, fn _ => ()) (obj,args)
    in
	fun listener nil                         = ()
	  | listener ((connid,obj,args)::stream) =
	    ( runCallback (connid, obj, args); listener stream )
    end

    (* finalization handling *)
    local
        (* - all objects are (Gtk-)referenced automatically upon creation and
	     added to the weak map (if there are not already there)
	   - Gtk calls "destroy" so that all owners of a reference
	     to the object can release it
	   - by the following "addDestroyEvent" and "event" functions
             an alice reference is kept alive unless "destroy" is called,
	     in which case "event" removes all callback functions 
	     (including itself) from the signal table and with it all
	     alice references it is aware of
	     (disconnecting is done automatically by Gtk)
	   - when all alice references are lost, the finalizer (Gtk-)unrefs
	     the object, telling Gtk that it may destroy the object completely
        *)
	fun addDestroyEvent obj =
	    let
		fun event _ = 
		    List.app NativeCore.signalMapRemove
		                       (NativeCore.signalMapGetConnIds obj)
	    in
		( doSignalConnect(obj,"destroy",event,true) ; () )
	    end

	fun newObject obj =
	    ( if NativeCore.hasSignals obj
		  then addDestroyEvent obj
	          else () ;
	      NativeCore.weakMapAdd obj ;
	      obj )
    in
	fun addObject obj = 
	    if isNull obj then obj else
	    let
		val obj' = NativeCore.weakMapCondGet(obj,NULL)
	    in
		if isNull obj'
		    then newObject obj 
		    else NativeCore.unrefObject obj'
	    end 
    end

    (* debug functions *)
    val printObject = NativeCore.printObject
    val forceGC = NativeCore.forceGC

    (* main loop *)
    local
	fun sleep ms = Future.await(Future.alarm(Time.fromMilliseconds ms))
    in
	val initPoll = 10
	val maxPoll = 50
	val pollStep = 5

	fun mainLoop sTime =
	let
	    val haveEvents = NativeCore.eventsPending()
	    val sTimeNew = 
		if haveEvents then initPoll
		    else sTime + (if sTime >= maxPoll then 0 else pollStep)
	in
	    (if haveEvents then NativeCore.mainIteration() else () ;
		 sleep sTime; 
		 mainLoop sTimeNew)
	end
    end

    (* init core module *)
    fun init () = if NativeCore.isLoaded() then () else
	let
	    val eventStream = NativeCore.getEventStream()
	in
	    NativeCore.init ();
	    spawn (listener eventStream);
	    spawn (mainLoop initPoll)
	end



    (*****************************************************************)
    (* Gnome Canvas                                                  *)

    (* Create a GnomeCanvasItem *)
    fun itemCreate (root : 'a pointer, ty, arglist) =
    let
	fun flatten nil = nil
	  | flatten ((a,b)::args) = [STRING a, b]@(flatten args)
	val item = gtk.cast gtk.myItemNew(gtk.cast root, ty)
	val _ = case arglist of
	            nil => ()
		  | (fst,fstarg)::args => 
			gtk.gnomeCanvasItemSetValist(item, fst, (fstarg::flatten(args)))
    in
	gtk.cast item
    end

    (* Get a GnomeCanvasPoints* array from a coordinate list *)
    fun makePoints plist =
    let
	val plist = gtk.cast plist
	val plist' = if (length plist) mod 2 = 0 then plist else plist@[0]
	val points = gtk.gnomeCanvasPointsNew((length plist') div 2)
	val _ = foldl (fn (x,i) => 
		         (gtk.pointsSetCoords(points,i,x) ; i+1 ) )
		      0 plist'
    in
	gtk.cast points
    end
end
