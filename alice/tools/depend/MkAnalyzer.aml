(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Contributor:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2001-2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure IO       from "../../lib/system/IO"
import structure TextIO   from "../../lib/system/TextIO"
import structure Url      from "../../lib/system/Url"
import signature PARSER   from "PARSER-sig"
import signature ANALYZER from "ANALYZER-sig"


functor MkAnalyzer(structure Parser: PARSER
		   val extension: string): ANALYZER =
    struct
	fun warn message =
	    TextIO.output (TextIO.stdErr, "warning: " ^ message ^ "\n")

	fun parseUrl url =
	    SOME (Url.toLocalFile url)
	    handle Url.NotLocal =>
		(TextIO.output(TextIO.stdErr,
			       "warning: ignoring URI " ^
			       Url.toStringRaw url ^ "\n");
		 NONE)

	fun pathFloor filename =
	    let
		val fro = "." ^ extension
		val n = String.size filename
		val m = String.size fro
	    in
		if n > m andalso String.substring (filename, n - m, m) = fro
		then String.substring (filename, 0, n - m)
		else filename
	    end

	fun existsFile filename =
	    (TextIO.closeIn (TextIO.openIn filename); true)
	    handle IO.Io _ => false

	fun nameOfImportedFile s =
	    let
		val asigName = s ^ ".asig"
	    in
		if existsFile asigName then asigName
		else s ^ "." ^ extension
	    end

	fun analyzeImport (desc, url) =
	    let
		val url =
		    case desc of
			SOME base => Url.resolve base url
		      | NONE => url
	    in
		case parseUrl url of
		    SOME targetFilename =>
			SOME (nameOfImportedFile (pathFloor targetFilename))
		  | NONE => NONE
	    end

	fun analyze (desc, source) =
	    List.mapPartial (fn s => analyzeImport (desc, Url.fromString s))
	    (Parser.parse source)

	fun readFile filename =
	    let
		val file   = TextIO.openIn filename
		val source = TextIO.inputAll file
		val _      = TextIO.closeIn file
	    in
		source
	    end

	fun analyzeString source = analyze (NONE, source)

	fun analyzeFile filename =
	    let
		val url = Url.fromString filename
	    in
		analyze (SOME url, readFile (Option.valOf (parseUrl url)))
		handle (Option.Option | IO.Io _) =>
		    (TextIO.output(TextIO.stdErr,
				   "unable to access file " ^ filename ^ "\n");
		     nil)
	    end
    end
