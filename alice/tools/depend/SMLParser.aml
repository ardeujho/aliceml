(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import functor   MkLexer         from "SMLLexer"
import functor   MkCountPosLexer from "MkCountPosLexer"
import structure LrParser        from "../../lib/ml-yacc/parser2"
import functor   Join            from "../../lib/ml-yacc/join"
import functor   MkLrVals        from "SMLParser.grm"
import functor   MkLexerError    from "MkLexerError"
import structure Error           from "SMLError"
import signature PARSER          from "PARSER-sig"

structure Parser :> PARSER =
struct

    structure E = Error


    (* Build Yacc parser *)

    structure LrVals = MkLrVals(structure Token = LrParser.Token)

    structure LexerError = MkLexerError(structure Tokens = LrVals.Tokens
					type error       = Error.error)

    structure Lexer  = MkLexer(structure Tokens     = LrVals.Tokens
			       structure LexerError = LexerError)

    structure Lexer' = MkCountPosLexer(structure Lexer      = Lexer
				       structure LexerError = LexerError
				       val error            = Error.error
				       val startLine        = 1)

    structure Parser = Join(structure LrParser   = LrParser
			    structure ParserData = LrVals.ParserData
			    structure Lex        = Lexer')


    (* The actual parsing function *)

    fun parse source =
	let
	    val yyread = ref false
	    fun yyinput _ =
		if !yyread then
		    ""
		else
		    ( yyread := true; source )

	    val lexer = Parser.makeLexer yyinput

	    fun onError(s, pos1, pos2) = E.error((pos1,pos2), E.SyntaxError s)
	in
	    #1 (Parser.parse(0, lexer, onError, ()))
	end

end
