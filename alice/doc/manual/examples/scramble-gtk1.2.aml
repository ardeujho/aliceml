(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg and Thorsten Brunklaus, 2000-2004
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

(*
 * Usage: scramble [width [height]]
 *)

import structure Gtk       from "x-alice:/lib/gtk/Gtk"
import structure Gdk       from "x-alice:/lib/gtk/Gdk"
import structure GtkCanvas from "x-alice:/lib/gtk/GtkCanvas"
import structure Random    from "x-alice:/lib/utility/Random"

local
    (* A simple server abstraction *)

    fun newServer () =
	let
	    val fs     = Promise.promise ()
	    val stream = Ref.ref fs

	    fun enqueue f =
		let
		    val newtail = Promise.promise ()
		    val tail    = Ref.exchange (stream, newtail)
		in
		    Promise.fulfill (tail, f::Promise.future newtail)
		end
	in
	    spawn List.app (fn f => f ()) (Promise.future fs);
	    enqueue
	end

    val serve = newServer ()



    (* The board *)

    datatype piece = PIECE of {num : int,
			       group : Gtk.object option,
			       pos : (int * int) ref}
    datatype board = BOARD of {canvas : GtkCanvas.object,
			       matrix : piece Array2.array,
			       spot : (int * int) ref}

    val pieceSize = 50
    val font  = "-adobe-helvetica-bold-r-normal--24-240-75-75-p-138-iso8859-1"
    val map   = Gdk.colormapGetSystem ()
    val black = Gdk.allocColor (0, 0, 0)
    val white = Gdk.allocColor (0xffff, 0xffff, 0xffff)
    val _     = Gdk.colormapAllocColor (map, black, false, true)
    val _     = Gdk.colormapAllocColor (map, white, false, true)


    (* Constructing pieces *)

    val spot = PIECE {num = 0, group = NONE, pos = ref (0, 0)}

    fun piece (parent, 0, 0, n, color, handler) = spot
      | piece (parent, x, y, n, color, handler) =
	let
	    val pos = ref (x, y)
	    val x1 = real (x * pieceSize)
	    val y1 = real (y * pieceSize)
	    val x2 = Real.+(x1, real pieceSize)
	    val y2 = Real.+(y1, real pieceSize)
	    val tx = Real.+(x1, 25.0)
	    val ty = Real.+(y1, 25.0)
	    val text  = Int.toString n

	    val group = GtkCanvas.itemNew (parent, GtkCanvas.GROUP,
			   [("x", Gtk.DOUBLE x1),
			    ("y", Gtk.DOUBLE y1)])
	    val box   = GtkCanvas.itemNew (group, GtkCanvas.RECTANGLE,
			   [("x1", Gtk.DOUBLE 0.0),
			    ("y1", Gtk.DOUBLE 0.0),
			    ("x2", Gtk.DOUBLE (real pieceSize)),
			    ("y2", Gtk.DOUBLE (real pieceSize)),
			    ("fill_color_gdk", Gtk.OBJECT color),
			    ("outline_color_gdk", Gtk.OBJECT black),
			    ("width_pixels", Gtk.INT 0)])
	    val text = GtkCanvas.itemNew (group, GtkCanvas.TEXT,
			   [("text", Gtk.STRING text),
			    ("x", Gtk.DOUBLE 25.0),
			    ("y", Gtk.DOUBLE 25.0),
			    ("font", Gtk.STRING font),
			    ("anchor", Gtk.INT Gtk.ANCHOR_CENTER),
			    ("fill_color_gdk", Gtk.OBJECT black)])
	in
	    Gtk.signalConnect (group, "event", handler (pos, text));
	    PIECE {num = n, group = SOME group, pos}
	end


    (* Piece colors *)

    fun toHexString i = (if i < 0x10 then "0" else "") ^ Int.fmt StringCvt.HEX i

    fun pieceColor (w, h) (x, y) =
	let
	    val r      = 255 * (w - x) div w
	    val g      = 255 * (h - y) div h
	    val b      = 128
	    val color  = Gdk.allocColor (0, 0, 0)
	    val colStr = "#" ^ toHexString r ^ toHexString g ^ toHexString b
	    val _      = Gdk.colorParse (colStr, color) 
	    val _      = Gdk.colormapAllocColor (map, color, false, true)
	in
	    color
	end


    (* Moving pieces *)

    fun moveSpot (BOARD {matrix, spot = spotPos as ref (x, y), ...}, x', y') =
	let
	    val spot  as PIECE {pos = pos, ...} = Array2.sub (matrix, x, y)
	    val piece as PIECE {pos = pos', group, ...} =
						  Array2.sub (matrix, x', y')
	    val dx = real (pieceSize * (x-x'))
	    val dy = real (pieceSize * (y-y'))
	in
	    spotPos := (x', y');
	    pos := (x', y');
	    pos' := (x, y);
	    Array2.update (matrix, x, y, piece);
	    Array2.update (matrix, x', y', spot);
	    GtkCanvas.itemMove (valOf group, dx, dy)
	end


    (* Event handler for pieces *)

    fun checkVictory (BOARD {matrix, ...}) =
	if Array2.alli Array2.ColMajor
	    (fn (i, j, PIECE {num, ...}) => num = Array2.nRows matrix*j+i)
	    {base = matrix, row = 0, col = 0, nrows = NONE, ncols = NONE}
	then print "You win!\n"
	else ()

    fun pieceHandler (board as BOARD {spot,...}) (pos, text) events =
        serve
	(fn () =>
	 case events of
	    Gtk.EVENT (Gtk.GDK_ENTER_NOTIFY _) :: _ =>
		GtkCanvas.itemSet(text, "fill_color_gdk",
				  Gtk.OBJECT white)
	  | Gtk.EVENT (Gtk.GDK_LEAVE_NOTIFY _) :: _ =>
		GtkCanvas.itemSet(text, "fill_color_gdk",
				  Gtk.OBJECT black)
	  | Gtk.EVENT (Gtk.GDK_BUTTON_PRESS _) :: _ =>
	    let
		val (x, y)   = !spot
		val (x', y') = !pos
	    in
		if abs (x'-x) + abs (y'-y) = 1
		then (moveSpot (board, x', y');
		      checkVictory board)
		else ()
	    end
	  | _ => ()
	)


    (* Creating a board *)

    fun board (canvas, w, h) =
	let
	    val parent = GtkCanvas.root canvas
	    val matrix = Array2.array (w, h, spot)
	    val board  = BOARD {canvas, matrix, spot = ref (0, 0)}
	in
	    Array2.modifyi Array2.ColMajor
		(fn (i, j, _) => piece (parent, i, j, w*j+i,
					pieceColor (w, h) (i, j),
					pieceHandler board))
		{base = matrix, row = 0, col = 0, nrows = NONE, ncols = NONE};
	    board
	end


    (* Scrambling *)

    fun randomMove (board as BOARD {matrix, spot = ref (x, y), ...}) =
	let
	    val (w,h) = Array2.dimensions matrix
	    val dir   = Random.int 4
	in
	    if      dir = 0 andalso x > 0   then (x-1, y)
	    else if dir = 1 andalso x < w-1 then (x+1, y)
	    else if dir = 2 andalso y > 0   then (x, y-1)
            else if dir = 3 andalso y < h-1 then (x, y+1)
	    else randomMove board
	end

    and scramble (board, 0) = ()
      | scramble (board, n) =
	let
	    val (x, y) = randomMove board
	in
	    moveSpot (board, x, y);
	    scramble (board, n-1)
	end


    (* The board as a widget *)

    fun boardWidget (w, h) =
	let
	    val vbox      = Gtk.vboxNew (false, 4)
 	    val alignment = Gtk.alignmentNew (0.5, 0.5, 0.0, 0.0)
	    val frame     = Gtk.frameNew ""
	    val canvas    = GtkCanvas.new 0
	    val board     = board (canvas, w, h)
	    val button    = Gtk.buttonNewWithLabel "Scramble"
	in
	    Gtk.containerSetBorderWidth (vbox, 4);
	    Gtk.widgetShow vbox;
	    Gtk.boxPackStart (vbox, alignment, true, true, 0);
	    Gtk.widgetShow alignment;
	    Gtk.frameSetShadowType (frame, Gtk.SHADOW_IN);
	    Gtk.containerAdd (alignment, frame);
	    Gtk.widgetShow frame;
	    Gtk.widgetSetUsize (canvas, w*pieceSize, h*pieceSize);
	    GtkCanvas.setScrollRegion (canvas, 0.0, 0.0,
				       real (w*pieceSize), real (h*pieceSize));
	    Gtk.containerAdd (frame, canvas);
	    Gtk.widgetShow canvas;
	    Gtk.boxPackStart (vbox, button, false, false, 0);
	    Gtk.signalConnect (button, "clicked",
			       fn _ => serve (fn () => scramble (board, 20*w*h)));
	    Gtk.widgetShow button;
	    vbox
	end


    (* Main *)

    fun main' (w, h) =
	if w < 2 orelse h < 2 then raise Domain else
	let
	    val window      = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
	    val deleteEvent = fn _ => OS.Process.exit OS.Process.success
	    val page        = boardWidget (w, h)
	    val label       = Gtk.labelNew "Scramble"
	in
	    Gtk.signalConnect (window, "delete-event", deleteEvent);
	    Gtk.containerSetBorderWidth (window, 4);
            Gtk.windowSetTitle (window, "Scramble");
	    Gtk.containerAdd (window, page);
	    Gtk.widgetShowAll window
	end

    fun usage () =
	(TextIO.output (TextIO.stdErr, "Usage: scramble [w [h]]\n");
	 OS.Process.exit OS.Process.failure)

    fun main []      = main' (4, 4)
      | main [s]     = let val w = valOf (Int.fromString s) in main' (w, w) end
      | main [s1,s2] = main' (valOf (Int.fromString s1),
			      valOf (Int.fromString s2))
      | main _       = usage ()
in
    val _ = main (CommandLine.arguments ()) handle _ => usage ()
end
