(*
 * Interpreter for F+rec - Main Program
 *
 * 2000/02/12-2003/09/23 Andreas Rossberg
 *)

import structure Type   from "Type"
import structure Value  from "Value"
import structure Lexer  from "Lexer"
import structure Parser from "Parser"
import structure Elab   from "Elab"
import structure Eval   from "Eval"

structure Main =
struct
    open TextIO
    open Value
    open Type

    fun typeToString t				= typeToString' false t
    and typeToString' b Bool			= "bool"
      | typeToString' b Int			= "int"
      | typeToString' false (Arrow (t1,t2))	= typeToString' true t1 ^ " -> "
						  ^ typeToString' false t2
      | typeToString' true  (Arrow (t1,t2))	= "(" ^ typeToString' true t1
						  ^ " -> "
						  ^ typeToString' false t2 ^ ")"

    fun valueToString(Num 0,     Bool)		= "false"
      | valueToString(Num 1,     Bool)		= "true"
      | valueToString(Num n,     Int)		= Int.toString n
      | valueToString(Op _,      Arrow _)	= "fn"
      | valueToString(Proc _,    Arrow _)	= "fn"
      | valueToString(RecProc _, Arrow _)	= "fn"
      | valueToString _				= "Runtime error"

    fun fromString s =
	let
	    val tree = Parser.parse (Lexer.lex s)
	    val t    = Elab.elab Type.base tree
	    val v    = Eval.eval Value.base tree
	in
	    print(valueToString (v,t) ^ " : " ^ typeToString t ^ "\n")
	end
	handle Lexer.Error  => print "Lexical error\n"
	     | Parser.Error => print "Syntax error\n"
	     | Elab.Error   => print "Semantical error\n"
	     | Eval.Error   => print "Runtime error\n"

    fun fromFile n =
	let
	    val f = openIn n
	    val s = inputAll f
	    val _ = closeIn f
	in
	    fromString s
	end


    fun interactive () =
	case (print "> "; inputLine TextIO.stdIn)
	 of NONE      => ()
	  | SOME "\n" => interactive ()
	  | SOME s    => (fromString s; interactive ())

    fun main []    = interactive ()
      | main files = List.app (fn f => (print (f ^ "> "); fromFile f)) files

    val _ = main (CommandLine.arguments ())
    val _ = OS.Process.exit OS.Process.success
end
