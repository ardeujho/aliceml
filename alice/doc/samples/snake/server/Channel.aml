import signature CHANNEL    from "CHANNEL-sig"
import structure Stream     from "x-alice:/lib/data/Stream"

structure Channel :> CHANNEL =
struct
    type 'a channel = int ref * 'a Stream.stream * 'a list ref

    exception Closed

    fun channel () =
        let
            val (s, l)  = Stream.stream ()
            val res     = (ref 0, s, ref l)
        in
            (* Inspector.inspect res; *)
            res
        end

    fun send ((num, s, l), v) =
        let
            val pnum    = Promise.promise () 
            val oldn    = Ref.exchange (num, Promise.future pnum)
        in
            if not (Stream.isClosed s) then (
                Stream.send (s, v);
                Promise.fulfill (pnum, oldn + 1))
            else Promise.fulfill (pnum, oldn)
        end

    fun receive (num, s, l) =
        let
            val pl      = Promise.promise ()
            val oldl    = Ref.exchange (l, Promise.future pl)
        in
            case oldl of
                []  =>  
                (Promise.fulfill (pl, []);
                 raise Closed)
            | x::xs =>
                let 
                    val pnum    = Promise.promise ()
                    val oldn    = Ref.exchange (num, Promise.future pnum)
                in
                    Promise.fulfill (pnum, oldn - 1);
                    Promise.fulfill (pl, xs);
                    x
                end
        end

    fun length (ref num, _, _) = num

    fun close (_, s, _) = Stream.close s

    fun isClosed (_, s, _) = Stream.isClosed s

    fun destroy (num, s, l) =
        let
            val pl      = Promise.promise ()
            val oldl    = Ref.exchange (l, Promise.future pl)
        in
            case oldl of
                []  =>  
                Promise.fulfill (pl, [])
            | x::xs =>
                let 
                    val pnum    = Promise.promise ()
                    val oldn    = Ref.exchange (num, Promise.future pnum)
                in
                    Promise.fulfill (pnum, 0);
                    Promise.fulfill (pl, []);
                    Stream.close s
                end
        end

             
end
