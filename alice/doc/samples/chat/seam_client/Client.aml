import structure Remote         from "x-alice:/lib/distribution/Remote"
import structure Protocol       from "../common/Protocol"
import structure Gtk            from "x-alice:/lib/gtk/Gtk"
import structure Gdk            from "x-alice:/lib/gtk/Gdk"


structure P = Protocol


fun connectClient (nick, ticket) =
    let
        val serverPromise   = Promise.promise () 
        val server          = Promise.future serverPromise : P.server_interface

        val win     = Gtk.Window.new Gtk.WindowType.TOPLEVEL
        val _       = Gtk.Window.setTitle (win, "Chat: " ^ nick)
        val vbox    = Gtk.VBox.new (false, 3)
        val _       = Gtk.Container.add (win, vbox)

        val hbox    = Gtk.HBox.new (false, 2)
        val _       = Gtk.Container.add (vbox, hbox)
        
        fun newCol (v, t, ndx) =
            let val c = Gtk.TreeViewColumn.new ()
                val r = Gtk.CellRendererText.new ()
            in
                Gtk.TreeViewColumn.packStart (c, r, true);
                Gtk.TreeViewColumn.setTitle (c, t);
                Gtk.TreeViewColumn.addAttribute (c, r, "text", ndx);
                Gtk.TreeView.appendColumn (v, c);
                c
            end

            
        val persons = Gtk.ListStore.newv #[Gtk.Types.string]
        val personL = Gtk.TreeView.newWithModel persons
        val personCol = newCol (personL, "Name", 0)
        val _       = Gtk.Widget.setSizeRequest (personL, 100, ~1)
        val _       = Gtk.Box.packStart (hbox, personL, false, true, 0)

        val adjHor  = Gtk.Adjustment.new (0.0, 0.0, 1.0, 1.0, 10.0, 1.0)
        val adjVer  = Gtk.Adjustment.new (0.0, 0.0, 1.0, 1.0, 10.0, 1.0)
        val text    = Gtk.TextView.new ()
        val _       = Gtk.Container.add (hbox, text)

        fun appendText tag person msg =
            Gtk.TextBuffer.insertAtCursor (Gtk.TextView.getBuffer text, person ^ msg ^ "\n", ~1)
        
        val entry   = Gtk.Entry.new ()
        val _       = Gtk.Box.packStart (vbox, entry, false, true, 0)
        

        val quitBt  = Gtk.Button.newWithLabel "Quit"
        val _       = Gtk.Box.packStart (vbox, quitBt, false, true, 0)



        fun accepted s = (
            Promise.fulfill (serverPromise, s);
            print ("was accepted :-)\n");
            Gtk.Widget.showAll win
        )

        fun receive (msg: P.message) =
            appendText "tag-others" (#sender msg ^ "> ") (#content msg)


        fun connected nick = 
            let
                val iter = Gtk.TreeIter.new ()
            in
                print (nick ^ " connected\n");
                Gtk.ListStore.append (persons, iter);
                Gtk.ListStore.setValue (persons, iter, 0, Gtk.Value.string nick)
            end
        
        fun disconnected nick = 
            let
                val iter = Gtk.TreeIter.new ()
                fun loop (iter, not_done) =
                    if not_done then
                        let val v = Gtk.TreeModel.getValue (persons, iter, 0) 
                        in
                            if Gtk.Value.toString v = nick then
                                (Gtk.ListStore.remove (persons,iter); ())
                            else
                                loop (iter, Gtk.TreeModel.iterNext (persons, iter))
                        end
                    else ()
            in
                print (nick ^ " disconnected\n");
                loop (iter, Gtk.TreeModel.getIterFirst (persons, iter))
            end
            

        fun error (msg:string):unit   =
            print ("error: " ^ msg ^ "\n")

        val lock        = Lock.lock ()
        
        val interface   = {
            nick            = nick,
            accepted        = Remote.proxy (Lock.sync lock accepted),
            receive         = Remote.proxy (Lock.sync lock receive),
            connected       = Remote.proxy (Lock.sync lock connected),
            disconnected    = Remote.proxy (Lock.sync lock disconnected),
            error           = Remote.proxy (Lock.sync lock error)
        }

        (*--------- gui callbacks --------------*)

        val _       = Gtk.signalConnect (win, "destroy",
                fn args => Gtk.Widget.destroy win)

        val _       = Gtk.signalConnect (quitBt, "clicked",
                fn args => Gtk.Widget.destroy win)

        val _       = Gtk.signalConnect (entry, "activate",
                fn args => 
                    let 
                        val text = Gtk.Entry.getText entry
                    in
                        appendText "tag-you" "you> " text;
                        Gtk.Entry.setText (entry, "");
                        (#send server { kind    = P.M_BROADCAST, 
                                        sender  = nick, 
                                        content = text
                                      }) 
                        handle e =>
                            print "sending failed"
                    end
                )
 
        structure C = unpack (Remote.take ticket) : P.SERVER_CONNECTOR
    in
        C.connect interface
    end
   

fun main () =
    case CommandLine.arguments () of
        [nick, ticket]    =>
        connectClient (nick, ticket)
    |   _   =>
        print ("usage: " ^ CommandLine.name () ^ " <nick> <ticket>\n")


val _ = main ()
