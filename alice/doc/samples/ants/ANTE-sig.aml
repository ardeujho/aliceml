import structure Instructions from "Instructions"

signature ANTE =
sig
    type marker		= int
    datatype side	= left | right
    datatype dir	= here | ahead | leftahead | rightahead
    datatype condition	= friend | foe | friendwithfood | foewithfood |
			  food | rock | marker of marker | foemarker |
			  home | foehome

    datatype yesno	= ifyes | ifnot
    datatype otherwise	= otherwise
    type label		= string
    type stmt
    type 'a branch	= 'a * stmt

    exception Malformed of string

    val on	: 'a -> 'b -> 'a * 'b

    infixr ++
    val ++	: stmt * stmt -> stmt

    val goto	: label -> stmt
    val nop	: stmt
    val fail	: stmt

    val letlabel: (label -> stmt) -> stmt
    val label	: label -> stmt
    val mark	: marker -> stmt
    val unmark	: marker -> stmt
    val turn	: side -> stmt
    val drop	: stmt

    val move	: yesno -> stmt -> stmt
    val pick	: yesno -> stmt -> stmt
    val sense	: dir -> condition -> yesno -> stmt -> stmt
    val flip	: int -> yesno -> stmt -> stmt
    val move2	: yesno -> stmt -> yesno -> stmt -> stmt
    val pick2	: yesno -> stmt -> yesno -> stmt -> stmt
    val sense2	: dir -> condition -> yesno -> stmt -> yesno -> stmt -> stmt
    val flip2	: int -> yesno -> stmt -> yesno -> stmt -> stmt

    val switch	: stmt list -> stmt
    val flipn	: stmt list -> stmt
    val sensen	: (dir * condition) branch list -> otherwise -> stmt -> stmt
    val loop	: stmt -> stmt
    val loopx	: (stmt -> stmt) -> stmt
    val times	: int -> stmt -> stmt
    val timesi  : int -> (int -> stmt) -> stmt
    val repeat	: int -> stmt -> stmt
    val try	: (stmt -> stmt) -> otherwise -> stmt -> stmt
    val proc	: label -> stmt -> stmt

    val turnto	: condition -> yesno -> stmt -> stmt

    val compile	: stmt -> unit Instructions.ant
end
