(*

Explorer ant
------------

Swarm out and find food, marking your way.
Once you found something, bring it back to the hill
and mark the path as successfull.

states:
  * look for direction to start walking
  * keep walking until you find food, laying a trail
  * go back, marking the trail as success

*)


fun myMark 1 = mark trailmarker1
  | myMark 2 = mark trailmarker2
  | myMark 3 = mark trailmarker1 ++ mark trailmarker2
  | myMark 4 = mark trailmarker1 (* overwrap *)

fun ifTrailAhead ifyes success =
    sense ahead (marker trailmarker1) ifyes success ++
    sense ahead (marker trailmarker2) ifyes success
  | ifTrailAhead ifnot _ = raise Empty




val undo_this_trail =
    sync_towards_hill (unmark trailmarker1 ++
                       unmark trailmarker2) (goto "run_and_mark")
                      nop otherwise lost

fun myMove ifyes success =
    loopx (fn break =>
    sense ahead (marker trailmarker1) ifyes undo_this_trail ++
    sense ahead (marker trailmarker2) ifyes undo_this_trail ++
    sense leftahead (marker trailmarker1) ifyes undo_this_trail ++
    sense rightahead (marker trailmarker2) ifyes undo_this_trail ++
    sense rightahead (marker trailmarker1) ifyes undo_this_trail ++
    sense leftahead (marker trailmarker2) ifyes undo_this_trail ++
    move2 ifyes success ifnot break)
  | myMove ifnot failure =
    loopx (fn break =>
    sense ahead (marker trailmarker1) ifyes undo_this_trail ++
    sense ahead (marker trailmarker2) ifyes undo_this_trail ++
    sense leftahead (marker trailmarker1) ifyes undo_this_trail ++
    sense rightahead (marker trailmarker2) ifyes undo_this_trail ++
    sense rightahead (marker trailmarker1) ifyes undo_this_trail ++
    sense leftahead (marker trailmarker2) ifyes undo_this_trail ++
    move2 ifnot failure ifyes break)

val fail_this_trail =
    turn right ++
    loopx (fn break =>
      mark boringmarker ++
      move ifyes break
    ) ++
    times 3 (turn left)

fun walk_around () =
    flip 5 ifyes undo_this_trail ++    
    loopx (fn break =>
      times 2 (
        turn left ++
        myMove ifyes break
      ) ++
      times 3 (turn right) ++
      myMove ifyes break ++
      turn right ++
      myMove ifyes break ++
      fail_this_trail
    )

fun run_and_mark collect_food =
    flip 3 ifyes (turn left ++ turn left) ++
    flip 2 ifyes (turn right ++ turn right) ++
    loop (
      timesi 3 (fn i =>
        myMark (i+1) ++
        turnto food ifyes (
          loopx (fn break =>
            myMove ifyes break
          ) ++ myMark (i+2) ++ collect_food) ++
        flip 250 ifyes undo_this_trail ++
        myMove ifnot (walk_around ())
      )
    )

val trailaction = mark foodmarker
val homeaction = goto "run_and_mark"

fun collect_food () =
    pick ifnot todo ++
    mark foodmarker ++
    sync_towards_hill trailaction homeaction nop otherwise lost

val ant =
    proc "run_and_mark" (
	run_and_mark (goto "collect_food")
    ) ++
    proc "collect_food" (
        collect_food ()
    )