import structure Tag from "Tag"

signature LEX =
sig
    datatype token =
	TEXT of string | SPACE of string | OPEN of Tag.tag | CLOSE of Tag.tag

    exception Invalid

    val lex :  string -> token list	(* future Invalid *)
end

structure Lex : LEX =
struct
    datatype token =
	TEXT of string | SPACE of string | OPEN of Tag.tag | CLOSE of Tag.tag

    exception Invalid = Subscript


    fun fetch(s,C,i0,i) = C(String.substring(s,i0,i-i0)) :: lex'(s,i)

    and space(s,i0,i) =
	if i < String.size s andalso Char.isSpace(String.sub(s,i))
	then space(s,i0,i+1)
	else fetch(s,SPACE,i0,i)

    and text(s,i0,i) =
	if i < String.size s andalso
	let val c = String.sub(s,i) in not(c = #"<" orelse Char.isSpace c) end
	then text(s,i0,i+1)
	else fetch(s,TEXT,i0,i)

    and tag1(s,t,i) =
	if String.sub(s,i) = #">"
	then t :: lex'(s,i+1)
	else raise Invalid

    and tag2(s,t,c,i) =
	if String.sub(s,i) = c
	then tag1(s,t,i+1)
	else raise Invalid

    and tag(s,C,i) =
	case String.sub(s,i)
	  of #"B" => tag1(s, C(Tag.B), i+1)
	   | #"E" => tag2(s, C(Tag.EM), #"M", i+1)
	   | #"I" => tag1(s, C(Tag.I), i+1)
	   | #"P" => tag2(s, C(Tag.PL), #"L", i+1)
	   | #"S" => tag1(s, C(Tag.S), i+1)
	   | #"T" => tag2(s, C(Tag.TT), #"T", i+1)
	   | #"U" => tag1(s, C(Tag.U), i+1)
	   | #"r" => tag1(s, C(Tag.COLOR Tag.R), i+1)
	   | #"g" => tag1(s, C(Tag.COLOR Tag.G), i+1)
	   | #"b" => tag1(s, C(Tag.COLOR Tag.B'), i+1)
	   | #"c" => tag1(s, C(Tag.COLOR Tag.C), i+1)
	   | #"m" => tag1(s, C(Tag.COLOR Tag.M), i+1)
	   | #"y" => tag1(s, C(Tag.COLOR Tag.Y), i+1)
	   | #"k" => tag1(s, C(Tag.COLOR Tag.K), i+1)
	   | #"w" => tag1(s, C(Tag.COLOR Tag.W), i+1)
	   |   c  => if Char.isDigit c
		     then tag1(s, C(Tag.SIZE(ord c - ord #"0")), i+1)
		     else raise Invalid

    and lex'(s,i) = lazy
	if i = String.size s then [] else
	let
	    val c = String.sub(s,i)
	in
	    if c = #"<" then
		if String.sub(s,i+1) = #"/"
		then tag(s, CLOSE, i+2)
		else tag(s, OPEN, i+1)
	    else if Char.isSpace c then
		space(s,i,i+1)
	    else 
		text(s,i,i+1)
	end

    fun lex s = lex'(s,0)
end
