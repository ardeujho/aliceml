__prebound Prebound

(*
import
val show: 'a -> {}
from "../../vm-mozart/Debug.ozf"
*)

infix  7  * / div mod
infix  6  + - ^
infixr 5  :: @
infix  4  = <> > >= < <=
infix  3  := o
infix  0  before

type     int    = Prebound.int
type     bool   = Prebound.bool
datatype list   = datatype Prebound.list
datatype ref    = datatype Prebound.ref
type     exn    = Prebound.exn

type unit = {}

__primitive constructor Promise: exn = "Transient.Promise"
__primitive constructor Future: exn = "Transient.Future"
__primitive constructor Fulfill: exn = "Transient.Fulfill"
__primitive constructor ByNeed of exn: exn = "Transient.ByNeed"

__primitive val op=  : ''a * ''a -> bool = "="

__primitive val op+ : int * int -> int = "+"
__primitive val op- : int * int -> int = "-"
__primitive val op* : int * int -> int = "*"
__primitive val op< : int * int -> bool = "<"

__primitive val exchange: 'a ref * 'a -> 'a = "General.exchange"

__primitive val spawn: (unit -> 'a) -> unit = "Thread.spawn"
__primitive val sleep: int -> unit = "Thread.sleep"

__primitive val promise: unit -> 'a = "Transient.promise"
__primitive val future: 'a -> 'a = "Transient.future"
__primitive val fulfill: 'a * 'a -> unit = "Transient.fulfill"
__primitive val await: 'a -> 'a = "Transient.await"
__primitive val byNeed: (unit -> 'a) -> 'a = "Transient.byNeed"

__primitive val show: 'a -> unit = "show"

fun nth (x::_, 0) = x
  | nth (_::xr, i) = nth (xr, i - 1)

fun map (f, xs) =
    byNeed (fn () =>
	    case xs of
		x::xr => f x::map (f, xr))

fun merge (xs, ys) =
    byNeed (fn () =>
	    case (xs, ys) of
		(x::xr, y::yr) =>
		    if x = y then x::merge (xr, yr)
		    else if x < y then x::merge (xr, ys)
		    else y::merge (xs, yr))

fun loop 0 = ()
  | loop n =
    let
	val rest = promise ()
	val hamming = 1::rest
    in
	fulfill (rest, merge (map (fn i => 2 * i, hamming),
			      merge (map (fn i => 3 * i, hamming),
				     map (fn i => 5 * i, hamming))));
	nth (hamming, 1500);
	loop (n - 1)
    end

val _ = show (loop 100)
