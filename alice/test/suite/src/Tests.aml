(*
 * Authors:
 *   Benedikt Grundmann <bgrund@ps.uni-sb.de>
 *
 * Copyright:
 *   Benedikt Grundmann, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)
import structure Test from "Test"
import structure Report from "Report"
import structure Gen from "Gen"

local
	open Test
	fun testNot () = 
	    (assert not true = false;
	     assert Bool.not false = true)

	fun testToString () =
	    (assert Bool.toString true = "true";
	     assert Bool.toString false = "false")
in

	val testSuiteBool = ("Bool", [testNot, testToString])
end

local 
	open Test
	open Gen

	val testNum = 100
	
	val testStr = "0123456789"
	val testStr2 = "01234567890123456789"

	fun testSub () = 
	    try testNum int (fn i => 
		if i < 0 orelse i >= String.size testStr then
		    assert String.sub (testStr, i) raise Subscript
		else
		    assert (Char.ord (String.sub (testStr, i)) = i + Char.ord #"0"))

	fun testConcatOp1 () = assert (testStr ^ testStr = testStr2)
	fun testConcatOp2 () = try testNum (pair (string, string)) (fn (a, b) =>
				assert (String.size (a ^ b) = String.size a + String.size b))
	
	fun testConcat0 () = assert (String.concat [] = "")
	fun testConcat1 () = try testNum string (fn s => assert (String.concat [s] = s))
in
	val testSuiteString = ("String", [testSub, testConcatOp1, testConcatOp2, testConcat0, testConcat1])
end


local 
    open Test

    fun testBug49 () =
	let exception Quit
	    val lock = Lock.lock () 
	    val test = Lock.sync lock (fn b => if b then () else raise Quit)
	in
	    (* first raise an exception inside a locked function *)
	    assert test false raise Quit;
	   (* Now ensure that we can still call test 
	    * i.e that the lock was released *)
	    assert test true = ()
	end


    fun testLazy () = 
	let exception Quit
	    val testa = lazy true 
	    val testb = lazy raise Quit
	in
	    assert Future.isFuture testa;
	    assert Future.isLazy testa;
	    assert testa;
	    assert Future.isDetermined testa;
	    assert not (Future.isLazy testa);
			    
	    assert Future.isFuture testb;
	    assert Future.isLazy testb;
	    assert testb = () raise Quit; 
	    assert Future.isFailed testb;
	    assert not (Future.isLazy testb)
	end

    
    fun testSpawn () = 
	let exception Quit
	    val testa = Future.await (spawn true)
	    val testb = spawn raise Quit
	in
	    assert testa;
	    assert Future.isDetermined testa;
	    assert testb = () raise Quit; 
	    assert Future.isFailed testb
	end

    fun testByNeed () =
	let exception Quit
	    structure F = Future.ByNeed (signature S = (val x: unit) 
					 functor F () = (val x = raise Quit ))
	in
	    assert F.x = () raise Quit
	end

    fun testPromise1 () =
	let val p = Promise.promise ()
	    val f = Promise.future p
	in
	    assert Future.isFuture f;
	    Promise.fulfill (p, true);
	    assert f;
	    assert Promise.fulfill (p, true) raise Promise.Promise
	end

    fun testPromise2 () =
        let val p = Promise.promise ()
	    val f = Promise.future p
	    exception Foo
	in
	    assert Future.isFuture f;
	    Promise.fail (p, Foo);
	    assert f = () raise Foo;
	    assert Future.isFailed f
	end

in
    val testSuiteConcur = ("Concur", [testBug49])
    val testSuiteFuture = ("Future", [testLazy, testSpawn, testPromise1, testPromise2])
end


val _ = Report.runAll TextIO.stdOut Test.defaultConfig [testSuiteString, testSuiteBool, testSuiteConcur, testSuiteFuture]


