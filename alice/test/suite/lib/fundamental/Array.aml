(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature TESTSUITE from "../../src/TESTSUITE-sig"

import structure Random    from "x-alice:/lib/utility/Random"
import structure Gen       from "x-alice:/lib/test/Gen"
import structure Test      from "../../src/Test"

structure TestArray :> TESTSUITE =
struct

    val randomize = Gen.randomize

    fun testMaxLen () =
	Test.test (fn x => x = 0xfffff0 - 1) Array.maxLen

    fun testSub () =
	let
	    fun t (a, i) = if i < 0 orelse Array.length a <= i 
			       then NONE 
			   else SOME (List.nth (Array.toList a, i))
			       
	    fun t' x = let
			   val r = t x
		       in
			   Array.sub x = valOf r
			    handle Subscript => Option.isNone r
		       end
	in
	    Gen.try 100 (Gen.pair (Gen.array Gen.int, Gen.int))
	      (Test.test t')
	end

    fun testUpdate () = 
	let
	    fun t (a, i, x) = if i < 0 orelse Array.length a <= i
				  then NONE 
			      else SOME (Array.sub (a, i) before 
					 Array.update (a, i, x))
	    fun t' (a, i, x) = let
				   val r = t (a, i, x)
			       in
				   Array.sub (a, i) = x
				    handle Subscript => Option.isNone r
			       end
	in
	    Gen.try 100 (Gen.triple (Gen.array Gen.int, Gen.int, Gen.int))
	       (Test.test t')
	end

    fun testLength () =
	let
	    fun t (a, i) = (Array.sub (a, i); 
			    t (a, i + 1)) handle Subscript => i
	in
	    Gen.try 100 (Gen.array Gen.int)
	      (Test.test (fn a => t (a, 0) = Array.length a))
	end
				

    fun testToList () =
	let
	    fun t' (a, i, xs) = if i >= Array.length a 
				  then List.rev xs
			      else t' (a, i + 1, (Array.sub (a, i))::xs)

	    fun t a = t' (a, 0, []) = Array.toList a
	in
	    Gen.try 100 (Gen.array Gen.int) (Test.test t)
	end

    fun testArray () = 
	let
	    fun t' (xs, x, i) = List.all (fn a => a = x) xs andalso
			     List.length xs = i

	    fun t (i, x) = t' (Array.toList (Array.array (i, x)), x, i) 
			      handle Size => i < 0
	in
	    Gen.try 100 (Gen.pair (Gen.int, Gen.int))
	       (Test.test  t)
	end

    fun testVector () =
	let
	    fun t a = (Vector.fromList (Array.toList a) = 
		       Array.vector a)
		          handle Size => Array.length a > Vector.maxLen 
	in 
	    Gen.try 100 (Gen.array Gen.int) (Test.test t)
	end

    fun testToVector () =
	let
	    fun t a = (Vector.fromList (Array.toList a) = 
		       Array.vector a)
		          handle Size => Array.length a > Vector.maxLen 
	in 
	    Gen.try 100 (Gen.array Gen.int) (Test.test t)
	end

    fun testFromList () =
	let
	    fun t'' ([]   , a, i) = a
	      | t'' (x::xs, a, i) = (Array.update (a, i, x); 
				     t'' (xs, a, i - 1))

	    fun t' xs = let
			    val size = List.length xs
			in 
			    if size > Array.maxLen 
				then NONE
			    else SOME (t'' (List.rev xs, 
					    Array.array (size, 0), 
					    size - 1))
			end
			    
	    fun t xs = let
			   val r = t' xs
		       in
			   Array.equal Int.equal (Array.fromList xs, 
						  valOf (t' xs))
			     handle Size => Option.isNone r
		       end

	    fun h xs = (Array.fromList xs; true)
		         handle Size => List.length xs > Array.maxLen
	in
	    Gen.try 100 (Gen.list Gen.int) (Test.test t)
	end
	    
    fun testTabulate () =
	let
	    fun t (n, f) = Array.toList (Array.tabulate (n, f)) =
		           List.tabulate (n, f)
			    handle Size => n < 0 orelse Array.maxLen < n

	    fun t' x = x + 1
	in
	    Gen.try 100 Gen.int (Test.test (fn x => t (x, t')))
	end

    fun testContains () =
	let
	    fun t (a, x) = Array.contains a x =
		           List.contains (Array.toList a) x
	in
	    Gen.try 100 (Gen.pair (Gen.array Gen.int, Gen.int)) (Test.test t)
	end

    fun testNotContains () =
	let
	    fun t (a, x) = Array.notContains a x = 
		           Bool.not (Array.contains a x)
	in
	    Gen.try 100 (Gen.pair (Gen.array Gen.int, Gen.int)) (Test.test t)
	end

    fun testSort () =
	let
	    fun t f a = List.sort f (Array.toList a) =
		        Array.toList (Array.sort f a; a)
	in
	    Gen.try 100 (Gen.array Gen.int) 
	       (Test.test (fn a => t Int.compare a))
	end

    fun testIsSorted () =
	let
	    fun t f a = Array.isSorted f a =
		        List.isSorted f (Array.toList a)
	in
	    Gen.try 100 (Gen.array Gen.int) 
	       (Test.test (fn a => t Int.compare a))
	end

    fun testCollate () =
	let
	    fun t f (a1, a2) = 
		List.collate f (Array.toList a1, 
				Array.toList a2) =
		Array.collate f (a1, a2)
	in
	    Gen.try 100 (Gen.pair (Gen.array Gen.int, Gen.array Gen.int))
	       (Test.test (fn x => t Int.compare x))
	end

    fun testEqual () =
	let
	    fun t f (a1, a2) = Array.equal f (a1, a2) =
		               List.equal f (Array.toList a1, Array.toList a2)
	in
	    Gen.try 100 (Gen.pair (Gen.array Gen.int, Gen.array Gen.int))
	        (Test.test (fn x => t Int.equal x))
	end

    fun testSwap () =
	let
	    fun t (ar, a, b) = 
	               let
	               	  val r = if a < 0 orelse b < 0 orelse
	                             a >= Array.length ar orelse
	                             b >= Array.length ar then NONE 
				  else SOME ()
                          fun h () = (Array.sub (ar, a), Array.sub (ar, b))
		       in
			   if Option.isSome r then 
			      let
				  val (abef, bbef) = h ()
			      in
				  (Array.swap (ar, a, b); 
				   abef = Array.sub (ar, b) andalso
				   bbef = Array.sub (ar, a))
				     handle Subscript => false
			      end
			   else (Array.swap (ar, a, b); false) 
	                              handle Subscript => true
		       end
	in
	    Gen.try 100 (Gen.triple (Gen.array Gen.int, Gen.int, Gen.int))
	       (Test.test t)
	end

    fun testRev () =
	let
	    fun t a = List.rev (Array.toList a) =
		      Array.toList (Array.rev a; a)
	in
	    Gen.try 100 (Gen.array Gen.int) (Test.test t)
	end

    fun testCopy () =
	let
	    fun t' (src, dst, di) i = if i = Array.length src then ()
				      else (Array.update (dst, di + i, 
							  Array.sub (src, i));
					    t' (src, dst, di) (i + 1))
	    
	    fun t {src, dst, di} = if di < 0 orelse 
		                      Array.length dst < di + Array.length src 
				       then NONE
				   else SOME (t' (src, dst, di) 0)
	in
	    Gen.try 100 (Gen.triple (Gen.array Gen.int, 
				      Gen.array Gen.int,
				      Gen.int))
	    (Test.test (fn (src, dst, i) => 
			let
			    val src1 = Array.fromList (Array.toList src)
			    val src2 = Array.fromList (Array.toList src)
			    val dst1 = Array.fromList (Array.toList dst)
			    val dst2 = Array.fromList (Array.toList dst)

			    val r    = t {src = src2, dst = dst2, di = i}
			in
			    (Array.copy {src = src1, dst = dst1, di = i};
			     Array.equal Int.equal (dst1, dst2))
			     handle Subscript => Option.isNone r
			end))
	end

    fun testCopyVec () =
	let
	    fun t' (src, dst, di) i = if i = Vector.length src then ()
				      else (Array.update (dst, di + i, 
							  Vector.sub (src, i));
					    t' (src, dst, di) (i + 1))
	    
	    fun t {src, dst, di} = if di < 0 orelse 
		                     Array.length dst < di + Vector.length src 
				       then NONE
				   else SOME (t' (src, dst, di) 0)
	in
	    Gen.try 100 (Gen.triple (Gen.array Gen.int, 
				      Gen.array Gen.int,
				      Gen.int))
	    (Test.test (fn (src, dst, i) => 
			let
			    val src1 = Vector.fromList (Array.toList src)
			    val src2 = Vector.fromList (Array.toList src)
			    val dst1 = Array.fromList (Array.toList dst)
			    val dst2 = Array.fromList (Array.toList dst)

			    val r    = t {src = src2, dst = dst2, di = i}
			in
			    (Array.copyVec {src = src1, dst = dst1, di = i};
			     Array.equal Int.equal (dst1, dst2))
			     handle Subscript => Option.isNone r
			end))
	end

    fun testAll () =
	let
	    fun t f arr = List.all f (Array.toList arr)

	    fun f x = x > 0
	in
	    Gen.try 100 (Gen.array Gen.int) 
	     (Test.test (fn a => Array.all f a = t f a))
	end

    fun testExists () =
	let
	    fun t f arr = List.exists f (Array.toList arr)
		
	    fun f x = x > 0
	in
	    Gen.try 100 (Gen.array Gen.int)
	     (Test.test (fn a => Array.exists f a = t f a))
	end

    fun testFind () =
	let
	    fun t f arr = List.find f (Array.toList arr)
		
	    fun f x = x > 0
	in
	    Gen.try 100 (Gen.array Gen.int)
	     (Test.test (fn a => Array.find f a = t f a))
	end

    fun testAlli () =
	let
	    fun t f arr = List.alli f (Array.toList arr)

	    fun f (i, x) = i = x
	in
	    Gen.try 100 (Gen.array Gen.int) 
	     (Test.test (fn a => Array.alli f a = t f a))
	end

    fun testExistsi () =
	let
	    fun t f arr = List.existsi f (Array.toList arr)
		
	    fun f (i, x) = i = x
	in
	    Gen.try 100 (Gen.array Gen.int)
	     (Test.test (fn a => Array.existsi f a = t f a))
	end

    fun testFindi () =
	let
	    fun t f arr = List.findi f (Array.toList arr)
		
	    fun f (i, x) = i = x
	in
	    Gen.try 100 (Gen.array Gen.int)
	     (Test.test (fn a => Array.findi f a = t f a))
	end

    fun mkTestModify t f m =
	let
	    val x1 = ref nil
	    val x2 = ref nil
	in
	    Gen.try 100 (Gen.array Gen.int)
	      (Test.test (fn a => let
				      val t1 = Array.fromList (Array.toList a)
				      val t2 = Array.fromList (Array.toList a)
				      val t3 = Array.toList a
				  in
				      x1 := nil;
				      x2 := nil;
				      t (f x1) t1 0;
				      m (f x2) t2;
				      !x1 = !x2 andalso 
				      !x1 = List.rev t3 andalso
				      Array.equal Int.equal (t1, t2)
				  end))
	end

    fun testModify () = 
	let
	    fun f y x= (y := x :: !y; x + 5)

	    fun t x a i = if i = Array.length a
			      then ()
			  else (Array.update (a, i, x (Array.sub (a, i)));
				t x a (i + 1))
	in
	    mkTestModify t f Array.modify
	end

    fun testModifyi () =
	let
	    fun f y (i, x) = (y := x :: !y; i + x + 5)

	    fun t f a i = if i = Array.length a
			      then ()
			  else (Array.update (a, i, f (i, Array.sub (a, i)));
				t f a (i + 1))
	in
	    mkTestModify t f Array.modifyi
	end


    fun testFoldl () =
	let
	    val test1 = [0, 1, 2, 3]
		
	    fun t f b   nil   = b
	      | t f b (x::xs) = t f (f (x, b)) xs

	    fun f (a, b) = b@[a]


	in
	    Test.test (fn xs => let
				   val a1 = Array.fromList xs
				   val a2 = Array.fromList xs
				in 
				    Array.foldl List.:: nil a1 =
				    List.rev xs
				end) test1;
	    Gen.try 100 (Gen.list Gen.int) 
	        (Test.test (fn xs => 
			    let
				val a = Array.fromList xs
			    in 
				Array.foldl f nil a =
				List.foldl f nil xs
			    end))
	end

    fun testFoldr () =
	let
	    val test1 = [0, 1, 2, 3]
		
	    fun t f b   nil   = b
	      | t f b (x::xs) = t f (f (x, b)) xs


	in
	    Test.test (fn xs => let
				   val a1 = Array.fromList xs
				   val a2 = Array.fromList xs
				in 
				    Array.foldr List.:: nil a1 =
				    xs
				end) test1;
	    Gen.try 100 (Gen.list Gen.int) 
	        (Test.test (fn xs => 
			    let
				val a = Array.fromList xs
			    in 
				Array.foldr List.:: nil a =
				List.foldr List.:: nil xs
			    end))
	end

    fun testFoldli () =
	let
	    val test1 = [0, 1, 2, 3]
		
	    fun t f b   nil   = b
	      | t f b (x::xs) = t f (f (x, b)) xs

	    fun f (i, a, b) = b@[a + i]

	    fun f' (i, a, b) = a::b


	in
	    Test.test (fn xs => let
				   val a1 = Array.fromList xs
				   val a2 = Array.fromList xs
				in 
				    Array.foldli f' nil a1 =
				    List.rev xs
				end) test1;
	    Gen.try 100 (Gen.list Gen.int) 
	        (Test.test (fn xs => 
			    let
				val a = Array.fromList xs
			    in 
				Array.foldli f nil a =
				List.foldli f nil xs
			    end))
	end

    fun testFoldri () =
	let
	    val test1 = [0, 1, 2, 3]
		
	    fun t f b   nil   = b
	      | t f b (x::xs) = t f (f (x, b)) xs

	    fun f (i, a, b) = (a + i) :: b

	    fun f' (i, a, b) = a::b

	in
	    Test.test (fn xs => let
				   val a1 = Array.fromList xs
				   val a2 = Array.fromList xs
				in 
				    Array.foldri f' nil a1 =
				    xs
				end) test1;
	    Gen.try 100 (Gen.list Gen.int) 
	        (Test.test (fn xs => 
			    let
				val a = Array.fromList xs
			    in 
				Array.foldri f nil a =
				List.foldri f nil xs
			    end))
	end

    fun testApp () =
	let
	    val x1 = ref nil
	    val x2 = ref nil

	    fun f1 x = x1 := (x :: !x1)
	    fun f2 x = x2 := (x :: !x2)
	in
	    Gen.try 10 (Gen.array Gen.int)
	      (Test.test (fn a => (List.app f1 (Array.toList a);
				   Array.app f2 a;
				    let
					val b = !x1 = !x2
				    in 
					x1 := nil;
					x2 := nil; b
				    end)))
	end

    fun testAppr () =
	let
	    val x1 = ref nil
	    val x2 = ref nil

	    fun f1 x = x1 := (x :: !x1)
	    fun f2 x = x2 := (x :: !x2)
	in
	    Gen.try 10 (Gen.array Gen.int)
	      (Test.test (fn a => (List.appr f1 (Array.toList a);
				    Array.appr f2 a;
				    let
					val b = !x1 = !x2
				    in 
					x1 := nil;
					x2 := nil; b
				    end)))
	end

    fun testAppi () =
	let
	    val x1 = ref nil
	    val x2 = ref nil

	    fun f1 (i, x) = x1 := ((i + x) :: !x1)
	    fun f2 (i, x) = x2 := ((i + x) :: !x2)
	in
	    Gen.try 10 (Gen.array Gen.int)
	      (Test.test (fn a => (List.appi f1 (Array.toList a);
				   Array.appi f2 a;
				    let
					val b = !x1 = !x2
				    in 
					x1 := nil;
					x2 := nil; b
				    end)))
	end

    fun testAppri () =
	let
	    val x1 = ref nil
	    val x2 = ref nil

	    fun f1 (i, x) = x1 := ((i + x) :: !x1)
	    fun f2 (i, x) = x2 := ((i + x) :: !x2)
	in
	    Gen.try 10 (Gen.array Gen.int)
	      (Test.test (fn a => (List.appri f1 (Array.toList a);
				    Array.appri f2 a;
				    let
					val b = !x1 = !x2
				    in 
					x1 := nil;
					x2 := nil; b
				    end)))
	end

    val suite = ("Array", [("maxLen", testMaxLen),
			   ("sub", testSub),
			   ("update", testUpdate),
			   ("length", testLength),
			   ("toList", testToList),
			   ("array", testArray),
			   ("vector", testVector),
			   ("toVector", testToVector),
			   ("fromList", testFromList),
			   ("tabulate", testTabulate),
			   ("contains", testContains),
			   ("notContains", testNotContains),
			   ("sort", testSort),
			   ("isSorted", testIsSorted),
			   ("equal", testEqual),
			   ("collate", testCollate),
			   ("swap", testSwap),
			   ("rev", testRev),
			   ("copy", testCopy),
			   ("copyVec", testCopyVec),
			   ("all", testAll),
			   ("exists", testExists),
			   ("find", testFind),
			   ("alli", testAlli),
			   ("existsi", testExistsi),
			   ("findi", testFindi),
			   ("modify", testModify),
			   ("modifyi", testModifyi),
			   ("foldl", testFoldl),
			   ("foldr", testFoldr),
			   ("foldri", testFoldri),
			   ("foldli", testFoldli),
			   ("app", testApp),
			   ("appr", testAppr),
			   ("appi", testAppi),
			   ("appri", testAppri)])
end
