(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature TESTSUITE from "../../src/TESTSUITE-sig"

import structure Random    from "x-alice:/lib/utility/Random"
import structure Gen       from "x-alice:/lib/test/Gen"
import structure Test      from "../../src/Test"


structure TestInteger :> TESTSUITE = (* the integer test suite *)
struct

    val randomize = Gen.randomize
    
    fun testPrecision () =
	Test.test (fn _ => valOf Int.precision = 31) ()

    fun testMinInt () = 
	let
	    val n = valOf Int.precision
	    val min = Real.round (Math.pow (2.0, Real.fromInt (n - 1)) * ~1.0)
	in
	    Test.test (fn x => valOf x = min) Int.minInt
	end

    fun testMaxInt () = 
	let
	    val n = valOf Int.precision
	    val max = Real.round (Math.pow (2.0, Real.fromInt (n - 1)) + ~1.0)
	in
	    Test.test (fn x => valOf x = max) Int.maxInt
	end

    fun testPrecision () = 
	Test.test (fn _ => valOf Int.precision = 31) ()

    fun testFromLarge () =
	let
	    val test1  = (Int.toLarge (valOf Int.maxInt)) + Int.toLarge 1000000
	    val test2  = Int.toLarge 1000000
	in
	 (Test.test (fn x => (Int.fromLarge x; true) 
			           handle Overflow => false) test1;
	  Test.test (fn x => (Int.fromLarge x; true)) test2)
	end

    fun testHash () = 
       let
	   fun t x = Int.hash x = (Int.abs x handle Overflow => 0)
       in
	   Gen.try 1000 Gen.int (Test.test t)
       end
 
    fun testAbs () =
	Gen.try 10000 Gen.int 
		(Test.test 
		     (fn x => if x < 0 then abs x = ~ x else abs x = x))

    fun testArithmetic () = 
	let
	    fun tS (x1, x2) = if x2 = 0 then Int.sameSign (x1, ~1)
			      else (Int.sameSign (x1, ~1) andalso 
				    Int.sameSign (x2, 1)) orelse
				   if Int.sameSign (x1, x2) andalso
				      Int.sameSign (x1, ~1) then
				       ((Int.abs x2) div (Int.abs x1) = 0)
				   else if x1 = 0 then Int.sameSign (x2, 1)
				   else x1 div x2 = 0
	    fun tE (x1, 0) = x1 = 0
	      | tE (x1, x2) = x1 div x2 = 1 andalso (x1 mod x2 = 0)
	    fun tG x = (Bool.not (tS x)) andalso (Bool.not (tE x))
	    fun t' (x1, x2) = 
		((tS (x1, x2)) = (x1 < x2)) andalso
		((tG (x1, x2)) = (x1 > x2)) andalso
		((tE (x1, x2)) = (x1 = x2))
	in
	    Gen.try 1000 (Gen.pair (Gen.int, Gen.int)) (Test.test t')
	end

    fun testCompare () = 
	let
	    fun t' (x1, x2) = if x1 < x2 then LESS
			      else if x1 > x2 then GREATER
				   else EQUAL
	    fun t'' (x1, x2) = Int.compare (x1, x2) = t' (x1, x2)
	in 
	    Gen.try 1000 (Gen.pair (Gen.int, Gen.int)) (Test.test t'');
	    Test.test t'' (valOf Int.maxInt, valOf Int.minInt);
	    Test.test t'' (valOf Int.maxInt, valOf Int.maxInt);
	    Test.test t'' (0, 0)
	end

    fun testMod () = 
	let
	    (* very ugly... TODO: some more faster way *)
	    fun t (x, y, r, i) = if i > Int.abs(x) then false
				 else if x = y * i + r andalso 
					 Int.sameSign (y, r) then true 
				     else t (x, y, r, i + 1)
	    fun getInt i = (Gen.int i) div 1000
	    fun h i = let val a = Gen.int i
			  val b = Gen.int i
		      in
			  t (a, b, a mod b, ~ (Int.abs a))
			    handle Div => b = 0
		      end
	in
	    Gen.try 5 getInt (Test.test h)
	end

    fun testSign () = 
	let
	    fun t' x = if x < 0 then ~1
		      else if x > 0 then 1 else x
	    fun t x = Int.sign x = t' x
	in 
	    Test.test t (valOf Int.maxInt);
	    Test.test t (valOf Int.minInt);
	    Gen.try 1000 Gen.int (Test.test t)
	end

    fun testToFromLarge () = 
	let
	    fun t x = x = Int.fromLarge (Int.toLarge x)
	in 
	    Test.test t (valOf Int.maxInt);
	    Test.test t (valOf Int.minInt);
	    Gen.try 10000 Gen.int (Test.test t)
	end

    fun testSameSign () = 
	let
	    fun t' (x1, x2) = if x1 = 0 andalso x2 = 0 then true
			     else if x1 > 0 andalso x2 > 0 then true
				  else if x1 < 0 andalso x2 < 0 then true
				      else false
	    fun t x = Int.sameSign x = t' x
	in
	    Test.test t (valOf Int.maxInt, valOf Int.maxInt);
	    Test.test t (valOf Int.minInt, valOf Int.minInt);
	    Test.test t (valOf Int.minInt, 0);
	    Test.test t (0, valOf Int.maxInt);
	    Test.test t (valOf Int.minInt, valOf Int.maxInt);
	    Test.test t (valOf Int.maxInt, valOf Int.minInt);
	    Gen.try 10000 (Gen.pair (Gen.int, Gen.int)) (Test.test t)
	end

    fun testMin () = 
	let
	    fun t' (x1, x2) = if x1 = x2 then x1
			      else if x1 < x2 then x1
				   else x2
	    fun t x = Int.min x = t' x
	in
	    Test.test t (valOf Int.maxInt, valOf Int.maxInt);
	    Test.test t (valOf Int.minInt, valOf Int.minInt);
	    Test.test t (valOf Int.minInt, 0);
	    Test.test t (0, valOf Int.maxInt);
	    Test.test t (valOf Int.minInt, valOf Int.maxInt);
	    Test.test t (valOf Int.maxInt, valOf Int.minInt);
	    Gen.try 10000 (Gen.pair (Gen.int, Gen.int)) (Test.test t)
	end

    fun testFromString () = 
	let
	    fun t s = StringCvt.scanString (Int.scan StringCvt.DEC) s
	in 
	    Gen.try 1000 Gen.string 
		    (Test.test (fn s => Int.fromString s = t s))
	end

    fun testToString () =
	let
	    fun t i = Int.toString i = Int.fmt StringCvt.DEC i
	in
	    Gen.try 1000 Gen.int (Test.test t)
	end

    fun testQuot () = 
	let
	    fun t (a, b) = 
		let
		    val r = SOME (Int.quot (a, b)) handle Div => NONE
		in
		    if Option.isSome r 
		    then a = b * (valOf r) + (Int.rem (a, b))
		    else b = 0
		end
	in
	    Gen.try 10 (Gen.pair (Gen.int, Gen.int)) (Test.test t)
	end

    fun testScan () = 
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testEqual () = 
	let
	    fun t (x1, x2) = if x1 = x2 then Int.equal (x1, x2) 
			     else Bool.not (Int.equal (x1, x2))
	in
	    Gen.try 10000 Gen.int 
	     (Test.test (fn x => Int.equal(x, x) andalso 
			         t (Gen.int x, Gen.int x)))
	end

    fun testRem () =
	let
	    (* very ugly... TODO: some more faster way *)
	    fun t (x, y, r, i) = if y * i > Int.abs(x) then false
				 else if x = y * i + r andalso 
					 Int.sameSign (x, r) then true 
				     else t (x, y, r, i + 1)
	    fun getInt i = (Gen.int i) div 1000
	    fun h i = let val a = Gen.int i
			  val b = Gen.int i
		      in
			  t (a, b, Int.rem(a, b), ~ (Int.abs a)) 
			    handle Div => b = 0
		      end
	in
	    Gen.try 5 getInt (Test.test h)
	end

    fun testSign () = 
	let
	    fun t' x = if x < 0 then ~1
		      else if x > 0 then 1 else x
	    fun t x = Int.sign x = t' x
	in 
	    Test.test t (valOf Int.maxInt);
	    Test.test t (valOf Int.minInt);
	    Gen.try 1000 Gen.int (Test.test t)
	end

    fun testToFromLarge () = 
	let
	    fun t x = x = Int.fromLarge (Int.toLarge x)
	in 
	    Test.test t (valOf Int.maxInt);
	    Test.test t (valOf Int.minInt);
	    Gen.try 10000 Gen.int (Test.test t)
	end

    fun testToFromInt () = 
	let
	    fun t x = x = Int.toInt (Int.fromInt x)
	in
	    Gen.try 100000 Gen.int (Test.test t)
	end

    fun testDiv () =
	let
	    fun t (a, b) = a = b * (a div b) + (a mod b) handle Div => b = 0
	in
	    Gen.try 10 (Gen.pair (Gen.int, Gen.int)) (Test.test t)
	end

    fun testFmt () = 
	let
	    fun tS r i = if i < 0 
			 then List.hd (String.explode (Int.fmt r i)) = #"~"
			 else true

	    fun test' () = Int.toString 0 = "0" andalso
			   Int.toString 1 = "1" andalso
			   (valOf (Int.fromString "0")) = 0 andalso
			   (valOf (Int.fromString "1")) = 1

	    fun h' (x, 0) a = a
	      | h' (x, i) a = h' (x, i - 1) (a * x)

	    fun h (x, i) = h' (x, i) 1

	    fun dBin x b = if x = 0 
			    then b
			    else dBin (x div 2) 
				      ((Int.toString (x mod 2)) ^ b)

	    fun fr s = valOf (Int.fromString s)

	    fun dOct []       oc = oc
	      | dOct [b]      oc = b ^ oc
	      | dOct [b0, b1] oc = 
		   (Int.toString (fr b0 + 
				  fr b1 * h (2, 1))) ^ oc
	      | dOct (b0::b1::b2::bs) oc = 
		   dOct bs (Int.toString (fr b0 + 
					  fr b1 * h (2, 1) + 
					  fr b2 * h (2, 2))) ^ oc

	    fun decToHexString 0 = "0"
	      | decToHexString 1 = "1"
	      | decToHexString 2 = "2"
	      | decToHexString 3 = "3"
	      | decToHexString 4 = "4"
	      | decToHexString 5 = "5"
	      | decToHexString 6 = "6"
	      | decToHexString 7 = "7"
	      | decToHexString 8 = "8"
	      | decToHexString 9 = "9"
	      | decToHexString 10 = "A"
	      | decToHexString 11 = "B"
	      | decToHexString 12 = "C"
	      | decToHexString 13 = "D"
	      | decToHexString 14 = "E"
	      | decToHexString 15 = "F"
	      | decToHexString _  = raise Overflow


	    fun dHex []           oc = oc
	      | dHex [b]          oc = b ^ oc
	      | dHex [b0, b1]     oc = 
		   (decToHexString (fr b0 + 
				  fr b1 * h (2, 1))) ^ oc
	      | dHex [b0, b1, b2] oc = 
		   (decToHexString (fr b0 + 
				  fr b1 * h (2, 1) + 
				  fr b2 * h (2, 2))) ^ oc
	      | dHex (b0::b1::b2::b3::bs) oc = 
		   dHex bs (decToHexString (fr b0 + 
					  fr b1 * h (2, 1) + 
					  fr b2 * h (2, 2) +
					  fr b3 * h (2, 3))) ^ oc

	    fun sign i f = if i < 0 
			   then "~" ^ (f (~i) "")
			   else if i = 0 then "0" else f i ""

	    fun dB x = sign x dBin

	    fun dO x = sign x (fn y => 
				  dOct (rev 
					    (List.map String.str 
						  (String.explode (dB y)))))

	    fun dH x = sign x (fn y => 
				  dHex (rev 
					    (List.map String.str 
						  (String.explode (dB y)))))

	    fun tB i = Int.fmt StringCvt.BIN i = dB i

	    fun tO i = Int.fmt StringCvt.OCT i = dO i

	    fun tH i = Int.fmt StringCvt.HEX i = dH i
	in
	    Gen.try 1000 Gen.int 
		    (Test.test (fn i => tS StringCvt.DEC i andalso test' () 
					andalso tB i andalso tO i 
					andalso tH i))
	end

    fun testMax () = 
	let
	    fun t' (x1, x2) = if x1 = x2 then x1
			      else if x1 > x2 then x1
				   else x2
	    fun t x = Int.max x = t' x
	    fun t'' (x1, x2) = if Int.max (x1, x2) = x1
				   then Int.min (x1, x2) = x2
			       else Int.min (x2, x1) = x1
	in
	    Test.test t (valOf Int.maxInt, valOf Int.maxInt);
	    Test.test t (valOf Int.minInt, valOf Int.minInt);
	    Test.test t (valOf Int.minInt, 0);
	    Test.test t (0, valOf Int.maxInt);
	    Test.test t (valOf Int.minInt, valOf Int.maxInt);
	    Test.test t (valOf Int.maxInt, valOf Int.minInt);
	    Gen.try 10000 (Gen.pair (Gen.int, Gen.int)) (Test.test t);
	    Gen.try 10000 (Gen.pair (Gen.int, Gen.int)) (Test.test t'')
	end

    fun testNeg () =
	let
	    fun t x = ~x = Real.round (Real.fromInt x - (2.0 * Real.fromInt x))
				       handle Overflow => x = valOf Int.minInt
	in
	    Gen.try 1000 Gen.int (Test.test t);
	    Test.test t (valOf Int.maxInt);
	    Test.test t (valOf Int.minInt);
	    Test.test t 0
	end


    val suite = ("Integer", [("hash", testHash),
			     ("minInt", testMinInt),
			     ("maxInt", testMaxInt),
			     ("precision", testPrecision),
			     ("abs", testAbs),
			     ("arithmetic", testArithmetic),
			     ("compare", testCompare),
			     ("mod", testMod),
			     ("~", testNeg),
			     ("sign", testSign),
			     ("toFromLarge", testToFromLarge),
			     ("sameSign", testSameSign),
			     ("min", testMin),
			     ("toString", testToString),
			     ("fromString", testFromString),
			     ("quot", testQuot),
			     ("scan", testScan),
			     ("equal", testEqual),
			     ("rem", testRem),
			     ("toFromInt", testToFromInt),
			     ("div", testDiv),
			     ("fmt", testFmt),
			     ("max", testMax)])
end

