(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature TESTSUITE from "../../src/TESTSUITE-sig"

import structure Gen       from "x-alice:/lib/test/Gen"
import structure Test      from "../../src/Test"


structure TestVectorPair :> TESTSUITE = (* the vectorpair test suite *)
struct

    val randomize = Gen.randomize

    fun testZip () = 
	let
	    fun t' (  _  ,   [] ) zs = List.rev zs
	      | t' (  [] ,   _  ) zs = List.rev zs
	      | t' (x::xs, y::ys) zs = t' (xs, ys) ((x,y)::zs)

	    fun t (xv, yv) = Vector.fromList (t' (Vector.toList xv,
						  Vector.toList yv) []) = 
			     VectorPair.zip (xv, yv)
	    
	in
	    Gen.try 100 (Gen.pair (Gen.vector Gen.int,
				   Gen.vector Gen.int)) (Test.test t)
	end

    fun testUnzip () =
	let
	    fun t' (v, i) (xs, ys) = 
		 (case Vector.sub (v, i) of
		      (a, b) => t' (v, i + 1) (a::xs, b::ys)
		    |    _   => assert false)
		         handle Subscript => (Vector.fromList (List.rev xs),
					      Vector.fromList (List.rev ys))


	    fun t xv = t' (xv, 0) ([], []) = VectorPair.unzip xv
	in
	    Gen.try 1000 (Gen.vector (Gen.pair (Gen.int, Gen.int))) 
		    (Test.test t)
	end

    fun testApp () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (a, b) = x := (a, b) :: !x

	    fun t x = VectorPair.app (f xs) x = 
		      Vector.app (f ys) (VectorPair.zip x)
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	       (Test.test (fn x => (t x andalso !xs = !ys andalso
				    (Vector.fromList (!xs)) = 
				    Vector.rev (VectorPair.zip x))
				   before (xs := nil;
					   ys := nil)))
	end

    fun testAppi () =
	let
	    val xs = ref nil
	    val ys = ref nil
	    val zs = ref nil

	    fun g (i, (a, b)) = (i, a, b)

	    fun f x (i, a, b) = x := (a + i, b + i) :: !x
	    fun f' x (i, a, b) = x := (a, b) :: !x

	    fun t x = (VectorPair.appi (f' zs) x;
		       VectorPair.appi (f xs) x = 
		       Vector.appi (f ys o g) (VectorPair.zip x))
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	       (Test.test (fn x => (t x andalso !xs = !ys andalso
				    (Vector.fromList (!zs)) = 
				    Vector.rev ((VectorPair.zip x)))
				   before (xs := nil;
					   ys := nil;
					   zs := nil)))
	end

    fun testAppr () =
	let
	    val xs = ref nil
	    val ys = ref nil
	    val zs = ref nil

	    fun f x (a, b) = x := (a, b) :: !x

	    fun t x = (VectorPair.app (f zs) x;
		       VectorPair.appr (f xs) x = 
		       Vector.appr (f ys) (VectorPair.zip x))

	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	       (Test.test (fn x => (t x andalso !xs = !ys andalso
				    !xs =List.rev (!zs))
				   before (xs := nil;
					   ys := nil;
					   zs := nil)))
	end

    fun testAppri () =
	let
	    val xs = ref nil
	    val ys = ref nil
	    val zs = ref nil

	    fun g (i, (a, b)) = (i, a, b)

	    fun f x (i, a, b) = x := (a + i, b + i) :: !x

	    fun f' x (i, a, b) = x := (a, b) :: !x

	    fun t x = (VectorPair.appi (f' zs) x;
		       VectorPair.appri (f xs) x = 
		       Vector.appri (f ys o g) (VectorPair.zip x))

	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	       (Test.test (fn x => (t x andalso !xs = !ys andalso
				    !xs = (List.rev (!zs)))
				   before (xs := nil;
					   ys := nil;
					   zs := nil)))
	end

    fun testMap () =
	let
	    val xs = ref nil
	    val ys = ref nil
	    val zs = ref nil

	    fun f x (a, b) = (x := (a, b) :: !x; a + b)

	    fun t x = (VectorPair.map (f zs) x;
		       VectorPair.map (f xs) x = 
		       Vector.map (f ys) (VectorPair.zip x))
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	       (Test.test (fn x => (t x andalso !xs = !ys andalso 
				    (Vector.fromList (!zs)) = 
				    Vector.rev (VectorPair.zip x))
				   before (xs := nil;
					   ys := nil;
					   zs := nil)))
	end

    fun testMapi () =
	let
	    val xs = ref nil
	    val ys = ref nil
	    val zs = ref nil

	    fun g (i, (a, b)) = (i, a, b)

	    fun f x (i, a, b) = (x := (a + i + b) :: !x; a + i + b)

	    fun f' x (i, a, b) = x := (a, b) :: !x

	    fun t x = (VectorPair.mapi (f' zs) x;
		       VectorPair.mapi (f xs) x = 
		       Vector.mapi (f ys o g) (VectorPair.zip x))
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	       (Test.test (fn x => (t x andalso !xs = !ys andalso
				    (Vector.fromList (!zs)) = 
				    Vector.rev (VectorPair.zip x))
				   before (xs := nil;
					   ys := nil;
					   zs := nil)))
	end

    fun testFoldl () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun g ((a, b), c) = (a, b, c)

	    fun f x (a, b, c) = (x := (a, b) :: !x; c + a + b)

	    fun t x = VectorPair.foldl (f xs) 0 x =
		      Vector.foldl (f ys o g) 0 (VectorPair.zip x)

	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	      (Test.test (fn x => (t x andalso !xs = !ys)
				   before (xs := nil;
					   ys := nil)))
	end

    fun testFoldli () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun g (i, (a, b), c) = (i, a, b, c)

	    fun f x (i, a, b, c) = (x := (a, b) :: !x; i + c + a + b)

	    fun t x = VectorPair.foldli (f xs) 0 x =
		      Vector.foldli (f ys o g) 0 (VectorPair.zip x)

	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	      (Test.test (fn x => (t x andalso !xs = !ys)
				   before (xs := nil;
					   ys := nil)))
	end

    fun testFoldr () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun g ((a, b), c) = (a, b, c)

	    fun f x (a, b, c) = (x := (a, b) :: !x; c + a + b)

	    fun t x = VectorPair.foldr (f xs) 0 x =
		      Vector.foldr (f ys o g) 0 (VectorPair.zip x)

	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	      (Test.test (fn x => (t x andalso !xs = !ys)
				   before (xs := nil;
					   ys := nil)))
	end

    fun testFoldri () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun g (i, (a, b), c) = (i, a, b, c)

	    fun f x (i, a, b, c) = (x := (a, b) :: !x; i + c + a + b)

	    fun t x = VectorPair.foldri (f xs) 0 x =
		      Vector.foldri (f ys o g) 0 (VectorPair.zip x)

	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	      (Test.test (fn x => (t x andalso !xs = !ys)
				   before (xs := nil;
					   ys := nil)))
	end

    fun testAll () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (a, b) = (x := (a, b) :: !x; a = b)

	    fun t x = VectorPair.all (f xs) x =
		      Vector.all (f ys) (VectorPair.zip x)
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	      (Test.test (fn x => (t x andalso !xs = !ys)
				   before (xs := nil;
					   ys := nil)))
	end

    fun testAlli () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun g (i, (a, b)) = (i, a, b)

	    fun f x (i, a, b) = (x := (a, b) :: !x; a = b andalso a = i)

	    fun t x = VectorPair.alli (f xs) x =
		      Vector.alli (f ys o g) (VectorPair.zip x)
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	      (Test.test (fn x => (t x andalso !xs = !ys)
				   before (xs := nil;
					   ys := nil)))
	end

    fun testExists () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (a, b) = (x := (a, b) :: !x; a = b)

	    fun t x = VectorPair.exists (f xs) x =
		      Vector.exists (f ys) (VectorPair.zip x)
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	      (Test.test (fn x => (t x andalso !xs = !ys)
				   before (xs := nil;
					   ys := nil)))
	end

    fun testExistsi () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun g (i, (a, b)) = (i, a, b)

	    fun f x (i, a, b) = (x := (a, b) :: !x; a = b andalso i = a)

	    fun t x = VectorPair.existsi (f xs) x =
		      Vector.existsi (f ys o g) (VectorPair.zip x)
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	      (Test.test (fn x => (t x andalso !xs = !ys)
				   before (xs := nil;
					   ys := nil)))
	end

   fun testFind () =
	let
	    fun t f (xs, ys) = VectorPair.find f (xs, ys) = 
			       Vector.find f (VectorPair.zip (xs, ys))
			       
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	     (Test.test (fn x => t Int.equal x))
	end

    fun testFindi () =
	let
	    fun g (i, (a, b)) = (i, a, b)

	    fun t f (xs, ys) = 
		VectorPair.findi f (xs, ys) =
		Option.map g (Vector.findi (f o g) (VectorPair.zip (xs, ys)))
			       
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	     (Test.test (fn x => t (fn (i, a, b) => a = (b + i)) x))
	end


    val suite = ("VectorPair", [("zip", testZip),
				("unzip", testUnzip),
				("app", testApp),
				("appi", testAppi),
				("map", testMap),
				("mapi", testMapi),
				("foldl", testFoldl),
				("foldli", testFoldli),
				("foldr", testFoldr),
				("foldri", testFoldri),
				("all", testAll),
				("alli", testAlli),
				("exists", testExists),
				("existsi", testExistsi),
				("find", testFind),
				("findi", testFindi)])
end


