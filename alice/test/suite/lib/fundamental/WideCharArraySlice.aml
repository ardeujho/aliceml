(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature TESTSUITE from "../../src/TESTSUITE-sig"

import structure Gen       from "x-alice:/lib/test/Gen"
import structure Test      from "../../src/Test"

structure TestWideCharArraySlice :> TESTSUITE = (* the arrayslice test suite *)
struct

    val randomize = Gen.randomize

    fun fromInt x = if x > 255 then WideChar.chr 255 else WideChar.chr x


    fun testSlice () =
	let
	    fun t'' (a, i, asl, j) = 
		if j = WideCharArraySlice.length asl then true
		else if WideCharArray.sub (a, i + j) = 
			WideCharArraySlice.sub (asl, j) then
		    t'' (a, i, asl, j + 1) else false

	    fun t' (a, i, NONE, asl)   = WideCharArraySlice.length asl = 
					 (WideCharArray.length a - i) andalso
					 t'' (a, i, asl, 0)
	      | t' (a, i, SOME j, asl) = WideCharArraySlice.length asl = j andalso
					 t'' (a, i, asl, 0)

	    fun t (a, i, sz) = t' (a, i, sz, WideCharArraySlice.slice (a, i, sz))
			         handle Subscript => 
					if Option.isSome sz then 
					    i < 0 orelse
					    (valOf sz) < 0 orelse
					    WideCharArray.length a < i + (valOf sz)
					else i < 0 orelse
					     WideCharArray.length a < i
	in
	    Gen.try 1000 (Gen.triple (Gen.wideCharArray Gen.wideChar,
				      Gen.int,
				      Gen.option Gen.int)) (Test.test t)
	end


    fun testFull () =
	let
	    fun t a = WideCharArraySlice.slice (a, 0, NONE)
	in
	    Gen.try 1000 (Gen.wideCharArray Gen.wideChar) 
	      (Test.test (fn a => WideCharArraySlice.equal WideChar.equal 
						   (WideCharArraySlice.full a, t a)))
	end

    fun testLength () =
	let
	    fun t (a, i, NONE, j)   = ((WideCharArray.sub (a, i + j);
				       t (a, i, NONE, j + 1)) 
		                             handle Subscript => j)
	      | t (a, i, SOME x, j) = x
	in
	    Gen.try 1000 (Gen.triple (Gen.wideCharArray Gen.wideChar,
				      Gen.int, 
				      Gen.option Gen.int))
	      (Test.test (fn (a, i, sz) => 
			     let
				 val asl = SOME (WideCharArraySlice.slice (a, i, sz)) 
					     handle Subscript => NONE
			     in
				 if Option.isSome asl
				 then t (a, i, sz, 0) = 
				      WideCharArraySlice.length (valOf asl)
				 else if Option.isSome sz then 
					    i < 0 orelse
					    (valOf sz) < 0 orelse
					    WideCharArray.length a < i + (valOf sz)
					else i < 0 orelse
					     WideCharArray.length a < i
			     end))
	end

    fun testBase () =
	let
	    fun t (a, i, sz) = 
		WideCharArraySlice.base (WideCharArraySlice.slice (a, i, sz)) = 
		(a, i, WideCharArraySlice.length (WideCharArraySlice.slice (a, i, sz)))
	in
	    Gen.try 1000 (Gen.triple (Gen.wideCharArray Gen.wideChar, 
				      Gen.int,
				      Gen.option Gen.int))
		    (Test.test (fn (a, i, sz) => t (a, i, sz)
		                      handle Subscript =>
					     if Option.isSome sz then 
						 i < 0 orelse
						 (valOf sz) < 0 orelse
						 WideCharArray.length a < 
						 i + (valOf sz)
					     else i < 0 orelse
						  WideCharArray.length a < i))
	end

    fun testSub () = 
	let
	    fun t (asl, i) = if i < 0 orelse WideCharArraySlice.length asl <= i 
			     then NONE
			     else SOME (List.nth (WideCharArraySlice.toList asl, i))
	in
	    Gen.try 1000 (Gen.pair (Gen.wideCharArraySlice Gen.wideChar, Gen.int))
	      (Test.test (fn x => let
				    val r = SOME (WideCharArraySlice.sub x)
					      handle Subscript => NONE
			          in
				    r = t x
			          end))
	end

    fun testUpdate () = 
	let
	    fun t (asl, i, a) = 
		let
		    val r = SOME (WideCharArraySlice.update (asl, i, a))
			     handle Subscript => NONE
		in
		    if Option.isSome r 
		    then WideCharArraySlice.sub (asl, i) = a
		    else i < 0 orelse WideCharArraySlice.length asl <= i
		end
	in
	    Gen.try 1000 (Gen.triple (Gen.wideCharArraySlice Gen.wideChar,
				      Gen.int, 
				      Gen.wideChar)) (Test.test t)
	end

    fun testSubslice () = 
	let
	    fun t'' (a, sl, i, sz) = 
		let
		    val r1 = SOME (WideCharArraySlice.slice (a, i, sz)) 
			        handle Subscript => NONE
		    val r2 = SOME (WideCharArraySlice.subslice (sl, i, sz))
			        handle Subscript => NONE
		in
		    Option.equal (WideCharArraySlice.equal WideChar.equal) (r1, r2)
		end
	    fun t' (sl, a, i) = if i = WideCharArray.length a
				then ()
				else (WideCharArray.update (a, i, 
						    WideCharArraySlice.sub (sl, i));
				      t' (sl, a, i + 1))
	    fun t (sl, i, sz) = 
		let
		    val a = WideCharArray.array (WideCharArraySlice.length sl, 
					      fromInt 0)
		in
		    (t' (sl, a, 0);
		     t'' (a, sl, i, sz))
		end
	in
	    Gen.try 1000 (Gen.triple (Gen.wideCharArraySlice Gen.wideChar,
				      Gen.int,
				      Gen.option Gen.int))
		    (Test.test t)
	end

    fun testVector () = 
	let
	    fun t asl = WideCharVector.tabulate (WideCharArraySlice.length asl,
					 fn i => WideCharArraySlice.sub (asl, i))

	    fun tt asl = WideCharVector.toList (WideCharArraySlice.vector asl)
	in 
	    Gen.try 1000 (Gen.wideCharArraySlice Gen.wideChar) 
		    (Test.test (fn asl => WideCharVector.toList (t asl) = 
					  tt asl))
	end 

    fun testCopy () =
	let
	    fun t'' (src, dst, di, i) = 
		if i < WideCharArraySlice.length src
		then (WideCharArray.update (dst, 
				 di + i, WideCharArraySlice.sub (src, i));
		      t'' (src, dst, di, i + 1))
		else dst
		
	    fun t' (src, dst, di) = 
		if di < 0 orelse 
		   WideCharArray.length dst < 
		   di + WideCharArraySlice.length src
		then NONE
		else SOME (WideCharArray.toList (t'' (src, dst, di, 0)))

	    fun t (src, dst, di) = 
		case t' (src, dst, di) of
			NONE => ((WideCharArraySlice.copy {src, dst, di};
				  false) 
				             handle Subscript => true)
  		      | SOME xs => ((WideCharArraySlice.copy {src, dst, di};
				     WideCharArray.toList dst = xs) 
				             handle Subscript => false)
	in
	    Gen.try 1000 (Gen.triple (Gen.wideCharArraySlice Gen.wideChar,
				      Gen.wideCharArray Gen.wideChar,
				      Gen.int)) (Test.test t)
	end

    fun testCopyVec () =
	let
	    fun t'' (src, dst, di, i) = 
		if i < WideCharVectorSlice.length src
		then (WideCharArray.update (dst, di + i, 
					 WideCharVectorSlice.sub (src, i));
		      t'' (src, dst, di, i + 1))
		else dst
		
	    fun t' (src, dst, di) = 
		if di < 0 orelse 
		   WideCharArray.length dst < 
		   di + WideCharVectorSlice.length src
		then NONE
		else SOME (WideCharArray.toList (t'' (src, dst, di, 0)))

	    fun t (src, dst, di) = 
		case t' (src, dst, di) of
			NONE => ((WideCharArraySlice.copyVec {src, dst, di}; 
				  false) 
				             handle Subscript => true)
  		      | SOME xs => ((WideCharArraySlice.copyVec {src, dst, di};
				     WideCharArray.toList dst = xs) 
				             handle Subscript => false)
	in
	    Gen.try 1000 (Gen.triple (Gen.wideCharVectorSlice Gen.wideChar,
				      Gen.wideCharArray Gen.wideChar,
				      Gen.int)) (Test.test t)
	end

    fun testIsEmpty () = 
	let
	    fun t asl = #3 (WideCharArraySlice.base asl) = 0 = 
			WideCharArraySlice.isEmpty asl
	in
	    Gen.try 1000 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testApp () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x a = (x := a :: !x; fromInt (WideChar.ord a + 1); ())

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharArraySlice.app (f xs) sl;
		 List.app (f ys) (WideCharArraySlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testAppi () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (i, a) = (x := a :: !x; fromInt (WideChar.ord a + i); ())

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharArraySlice.appi (f xs) sl;
		 List.appi (f ys) (WideCharArraySlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testAppr () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x a = (x := a :: !x; fromInt (WideChar.ord a + 1); ())

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharArraySlice.appr (f xs) sl;
		 List.appr (f ys) (WideCharArraySlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testAppri () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (i, a) = (x := a :: !x; fromInt (WideChar.ord a + i); ())

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharArraySlice.appri (f xs) sl;
		 List.appri (f ys) (WideCharArraySlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testModify () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x a = (x := a :: !x; fromInt (WideChar.ord a + 1))

	    fun t (sl, csl) = 
		(xs := nil;
		 ys := nil;
		 (WideCharArraySlice.modify (f xs) sl; WideCharArraySlice.toList sl) =
		 List.map (f ys) (WideCharArraySlice.toList csl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) 
	    (Test.test (fn sl => 
			   let
			       val (a, x, y) = WideCharArraySlice.base sl
			       val b = WideCharArray.fromList (WideCharArray.toList a)
			   in
			       t (sl, WideCharArraySlice.slice (b, x, SOME y))
			   end))
	end

    fun testModifyi () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (i, a) = (x := a :: !x; fromInt (WideChar.ord a + i))

	    fun t (sl, csl) = 
		(xs := nil;
		 ys := nil;
		 (WideCharArraySlice.modifyi (f xs) sl; WideCharArraySlice.toList sl) = 
		 List.mapi (f ys) (WideCharArraySlice.toList csl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar)
	    (Test.test (fn sl => 
			   let
			       val (a, x, y) = WideCharArraySlice.base sl
			       val b = WideCharArray.fromList (WideCharArray.toList a)
			   in
			       t (sl, WideCharArraySlice.slice (b, x, SOME y))
			   end))
	end

    fun testFoldl () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (a : WideChar.char, b) = (x := a :: !x; fromInt (WideChar.ord a + 
								 WideChar.ord b))

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharArraySlice.foldl (f xs) (fromInt 0) sl;
		 List.foldl (f ys) (fromInt 0) 
			    (WideCharArraySlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testFoldli () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (i, a, b) = (x := a :: !x; fromInt (WideChar.ord a + 
							WideChar.ord b + 
							i))

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharArraySlice.foldli (f xs) (fromInt 0) sl;
		 List.foldli (f ys) (fromInt 0) 
			     (WideCharArraySlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testFoldr () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (a : WideChar.char, b) = (x := a :: !x; fromInt (WideChar.ord a + 
								 WideChar.ord b))

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharArraySlice.foldr (f xs) (fromInt 0) sl;
		 List.foldr (f ys) (fromInt 0) 
			    (WideCharArraySlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testFoldri () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (i, a, b) = (x := a :: !x; fromInt (WideChar.ord a + 
							WideChar.ord b + i))

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharArraySlice.foldri (f xs) (fromInt 0) sl;
		 List.foldri (f ys) (fromInt 0) 
			     (WideCharArraySlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testFind () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x a = (x := a :: !x; a = fromInt 42)

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharArraySlice.find (f xs) sl;
		 List.find (f ys) (WideCharArraySlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end     

    fun testFindi () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (i, a) = (x := a :: !x; a = fromInt 42 andalso 
					    fromInt i <= a)

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharArraySlice.findi (f xs) sl;
		 List.findi (f ys) (WideCharArraySlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end 

    fun testExists () = 
	let
	    fun f x = x > fromInt 0

	    fun t asl = WideCharArraySlice.exists f asl = 
			List.exists f (WideCharArraySlice.toList asl)
	in 
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testAll () = 
	let
	    fun f x = x > fromInt 0

	    fun t asl = WideCharArraySlice.all f asl = 
			List.all f (WideCharArraySlice.toList asl)
	in 
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testAlli () =
	let
	    fun f (i, x) = x > fromInt i

	    fun t asl = WideCharArraySlice.alli f asl = 
			List.alli f (WideCharArraySlice.toList asl)
	in 
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testExistsi () =
	let
	    fun f (i, x) = x > fromInt 0

	    fun t asl = WideCharArraySlice.existsi f asl = 
			List.existsi f (WideCharArraySlice.toList asl)
	in 
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testCollate () = 
	let
	    fun t (asl1, asl2) = 
		WideCharArraySlice.collate WideChar.compare (asl1, asl2) = 
		List.collate WideChar.compare (WideCharArraySlice.toList asl1,
					    WideCharArraySlice.toList asl2)
	in 
	    Gen.try 100 (Gen.pair (Gen.wideCharArraySlice Gen.wideChar,
				   Gen.wideCharArraySlice Gen.wideChar)) 
		    (Test.test t)
	end

    fun testToVector () = 
	let
	    fun t asl = 
		WideCharVector.equal WideChar.equal 
				     (WideCharArraySlice.toVector asl,
				      WideCharArraySlice.vector asl)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testToList () = 
	let
	    fun t asl = WideCharVector.toList (WideCharArraySlice.toVector asl)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) 
	    (Test.test (fn asl => WideCharArraySlice.toList asl = t asl))
	end

    fun testSwap () = 
	let
	    fun t' (sl, i, j) = 
		let
		    val h = WideCharArraySlice.sub (sl, i)
		in
		    WideCharArraySlice.update (sl, i, WideCharArraySlice.sub (sl, j));
		    WideCharArraySlice.update (sl, j, h);
		    sl
		end

	    fun t (sl1, sl2, i, j) = WideCharArraySlice.equal WideChar.equal
		  ((WideCharArraySlice.swap (sl1, i, j); sl1), t' (sl2, i, j))
		        handle Subscript => i < 0 orelse
					    (WideCharArraySlice.length sl1) <= i orelse
					    j < 0 orelse
					    (WideCharArraySlice.length sl1) <= j
	in 
	    Gen.try 100 (Gen.triple (Gen.wideCharArraySlice Gen.wideChar,
				      Gen.int,
				      Gen.int)) 
		     (Test.test (fn (sl, i, j) => 
				    let
					val (a, x, y) = WideCharArraySlice.base sl
					val b = WideCharArray.fromList 
						    (WideCharArray.toList a)
					val csl = WideCharArraySlice.slice (b, x, 
								    SOME y)
				    in 
					t (sl, csl, i, j)
	                            end))
	end

    fun testRev () = 
	let
	    fun t' sl = 
		let
		    val (a, x, y) = WideCharArraySlice.base sl
		in
		    WideCharArray.rev a; 
		    WideCharArraySlice.slice (a, (WideCharArray.length a) - x - y, 
					   SOME y)
		end
	    fun t (sl, csl) = WideCharArraySlice.equal WideChar.equal 
		  ((WideCharArraySlice.rev sl; sl), t' csl)
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) 
		    (Test.test (fn sl => 
			       let
				   val (a, x, y) = WideCharArraySlice.base sl
				   val b = WideCharArray.fromList 
					       (WideCharArray.toList a)
				   val csl = WideCharArraySlice.slice (b, x, 
								    SOME y)
			       in 
				   t (sl, csl)
	                       end))
	end

    fun testTriml () = 
	let
	    fun t' (sl, a, i, j, k) = 
		       if k > j 
		       then WideCharArraySlice.subslice (sl, j, SOME 0)
		       else WideCharArraySlice.slice (a, i + k, SOME (j - k))

	    fun t (sl, k) = WideCharArraySlice.equal WideChar.equal (
			            WideCharArraySlice.triml k sl,
				    t' (sl, 
					#1 (WideCharArraySlice.base sl),
					#2 (WideCharArraySlice.base sl),
					#3 (WideCharArraySlice.base sl), k))
			      handle Subscript => k < 0
	in
	    Gen.try 1000 (Gen.pair (Gen.wideCharArraySlice Gen.wideChar,
				    Gen.int)) (Test.test t)
	end

    fun testTrimr () = 
	let
	    fun t' (sl, a, i, j, k) = 
		       if k > j 
		       then WideCharArraySlice.subslice (sl, j, SOME 0)
		       else WideCharArraySlice.slice (a, i, SOME (j - k))

	    fun t (sl, k) = WideCharArraySlice.equal WideChar.equal (
			            WideCharArraySlice.trimr k sl,
				    t' (sl, 
					#1 (WideCharArraySlice.base sl),
					#2 (WideCharArraySlice.base sl),
					#3 (WideCharArraySlice.base sl), k))
			      handle Subscript => k < 0
	in
	    Gen.try 1000 (Gen.pair (Gen.wideCharArraySlice Gen.wideChar,
				    Gen.int)) (Test.test t)
	end

    fun testSplitAt () = 
	let
	    fun eq ((sl1, sl2), (sl3, sl4)) = 
		WideCharArraySlice.equal WideChar.equal (sl1, sl3) andalso
		WideCharArraySlice.equal WideChar.equal (sl2, sl4)

	    fun t' (sl, i) = SOME (WideCharArraySlice.subslice (sl, 0, SOME i),
				   WideCharArraySlice.subslice (sl, i, NONE))
			       handle Subscript => NONE
	    fun t (sl, i) = 
		let
		    val r = t' (sl, i)
		in 
		    eq (WideCharArraySlice.splitAt (sl, i), valOf r)
			       handle Subscript => Option.isNone r
		end
	in
	    Gen.try 1000 (Gen.pair (Gen.wideCharArraySlice Gen.wideChar, 
				    Gen.int)) (Test.test t)
	end

    fun testSplitl () = 
	let
	    val xs = ref []
	    val ys = ref []

	    fun eq ((sl1, sl2), (sl3, sl4)) = 
		WideCharArraySlice.equal WideChar.equal (sl1, sl3) andalso
		WideCharArraySlice.equal WideChar.equal (sl2, sl4)

	    fun t' (sl, f, i) = if i = WideCharArraySlice.length sl
				then i
				else if Bool.not (f (WideCharArraySlice.sub (sl, 
									  i)))
				     then i
				     else t' (sl, f, i + 1)

	    fun f y x = (y := x :: !y; x = fromInt 42)

	    fun t sl = eq (WideCharArraySlice.splitl (f xs) sl, 
			   WideCharArraySlice.splitAt (sl, t' (sl, f ys, 0))) 
		       andalso !xs = !ys
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar)
		    (Test.test (fn x => (xs := nil;
				         ys := nil; t x)))
	end
	
    fun testSplitr () = 
	let
	    val xs = ref []
	    val ys = ref []

	    fun eq ((sl1, sl2), (sl3, sl4)) = 
		WideCharArraySlice.equal WideChar.equal (sl1, sl3) andalso
		WideCharArraySlice.equal WideChar.equal (sl2, sl4)

	    fun t' (sl, f, i) = if i < 0
				then 0
				else if Bool.not (f (WideCharArraySlice.sub (sl, i)))
				     then i + 1
				     else t' (sl, f, i - 1)

	    fun f y x = (y := x :: !y; x >= fromInt 42)

	    fun t sl = 
		eq (WideCharArraySlice.splitr (f xs) sl, 
		    WideCharArraySlice.splitAt (sl, t' (sl, f ys, 
						WideCharArraySlice.length sl - 1))) 
		andalso !xs = !ys
	in
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar)
		    (Test.test (fn x => (xs := nil;
				         ys := nil; t x)))
	end

    fun testContains () = 
	let
	    fun t asl = WideCharArraySlice.contains WideChar.equal asl 
						 (fromInt 3) = 
			List.contains (WideCharArraySlice.toList asl) 
				      (fromInt 3)
	in 
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testNotContains () = 
	let
	    fun t asl = WideCharArraySlice.notContains WideChar.equal asl 
						    (fromInt 3) = 
			Bool.not (WideCharArraySlice.contains WideChar.equal asl 
							   (fromInt 3))
	in 
	    Gen.try 100 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testIsSorted () = 
	let
	    fun t' (f, sl, i) = if (i + 1) >= WideCharArraySlice.length sl
			       then true
			       else (case f (WideCharArraySlice.sub (sl, i),
					     WideCharArraySlice.sub (sl, i + 1)) of
					 EQUAL   => t' (f, sl, i + 1)
				       | LESS    => t' (f, sl, i + 1)
				       | GREATER => false)

	    val f = WideChar.compare
	    fun t sl = WideCharArraySlice.isSorted f sl = t' (f, sl, 0)
	in
	    Gen.try 1000 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end

    fun testSort () = 
	let
	    fun t sl = (WideCharArraySlice.sort WideChar.compare sl;
			WideCharArraySlice.isSorted WideChar.compare sl)
	in
	    Gen.try 1000 (Gen.wideCharArraySlice Gen.wideChar) (Test.test t)
	end


    val suite = ("WideCharArraySlice", [("slice", testSlice),
				("subslice", testSubslice),
				("full", testFull),
				("length", testLength),
				("sub", testSub),
				("update", testUpdate),
				("base", testBase),
				("vector", testVector),
				("swap", testSwap),
				("rev", testRev),
				("toVector", testToVector),
				("isEmpty", testIsEmpty),
				("toList", testToList),
				("copy", testCopy),
				("copyVec", testCopyVec),
				("app", testApp),
				("appi", testAppi),
				("appr", testAppr),
				("appri", testAppri),
				("modify", testModify),
				("modifyi", testModifyi),
				("foldl", testFoldl),
				("foldr", testFoldr),
				("foldli", testFoldli),
				("foldri", testFoldri),
				("find", testFind),
				("findi", testFindi),
				("all", testAll),
				("alli", testAlli),
				("exists", testExists),
				("existsi", testExistsi),
				("contains", testContains),
				("notContains", testNotContains),
				("splitAt", testSplitAt),
				("splitl", testSplitl),
				("splitr", testSplitr),
				("triml", testTriml),
				("trimr", testTrimr),
				("collate", testCollate),
				("isSorted", testIsSorted),
				("sort", testSort)])
end
