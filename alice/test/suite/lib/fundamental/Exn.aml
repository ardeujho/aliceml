(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature TESTSUITE from "../../src/TESTSUITE-sig"

import structure Gen       from "x-alice:/lib/test/Gen"
import structure Test      from "../../src/Test"

structure TestExn :> TESTSUITE = (* the exn test suite *)
struct

    val randomize = Gen.randomize


    fun testName () =
	Gen.try 100 Gen.exn (Test.test (fn x => Exn.name x = 
						General.exnName x))
    fun testMessage () =
	Gen.try 100 Gen.exn (Test.test (fn x => Exn.message x = 
						General.exnMessage x))

    fun testCurrentPacket () =
        let
            fun currentPacketOpt () =
                SOME(Exn.currentPacket()) handle Exn.NoCurrentPacket => NONE
        in
            Test.test (fn _ => spawn Option.isNone(currentPacketOpt())) ();
            Test.test (fn _ => (raise Fail "!") handle _ => Option.isSome(currentPacketOpt())) ()
        end

    fun testTrace () =
	Test.test (fn _ =>
          (1 div 0; assert false)
          handle Div => String.isSubstring "div" (Exn.trace(Exn.currentPacket()))
        ) ()

    val suite = ("Exn", [("name", testName),
			 ("message", testMessage),
                         ("currentPacket", testCurrentPacket),
			 ("trace", testTrace)])

end


