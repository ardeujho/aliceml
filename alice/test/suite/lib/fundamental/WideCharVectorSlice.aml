(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature TESTSUITE from "../../src/TESTSUITE-sig"

import structure Gen       from "x-alice:/lib/test/Gen"
import structure Test      from "../../src/Test"

structure TestWideCharVectorSlice :> TESTSUITE = (* the vectorslice test suite *)
struct

    val randomize = Gen.randomize

    fun fromInt x = if x > 255 then WideChar.chr 255 else WideChar.chr x


    fun testSlice () =
	let
	    fun t'' (a, i, asl, j) = 
		if j = WideCharVectorSlice.length asl then true
		else if WideCharVector.sub (a, i + j) = 
			WideCharVectorSlice.sub (asl, j) then
		    t'' (a, i, asl, j + 1) else false

	    fun t' (a, i, NONE, asl)   = WideCharVectorSlice.length asl = 
					 (WideCharVector.length a - i) andalso
					 t'' (a, i, asl, 0)
	      | t' (a, i, SOME j, asl) = WideCharVectorSlice.length asl = j 
					 andalso t'' (a, i, asl, 0)

	    fun t (a, i, sz) = t' (a, i, sz, WideCharVectorSlice.slice (a, i, sz))
			         handle Subscript => 
					if Option.isSome sz then 
					    i < 0 orelse
					    (valOf sz) < 0 orelse
					    WideCharVector.length a < 
					    i + (valOf sz)
					else i < 0 orelse
					     WideCharVector.length a < i
	in
	    Gen.try 1000 (Gen.triple (Gen.wideCharVector Gen.wideChar,
				      Gen.int,
				      Gen.option Gen.int)) (Test.test t)
	end

    fun testConcat () = 
	let
	    fun t'' xsl = 
		List.foldl (fn (a, b) => WideCharVectorSlice.length a + b) 0 xsl

	    fun t' xsl =
		WideCharVector.fromList (List.concat 
				     (List.map WideCharVectorSlice.toList xsl))

	    fun t xsl = if t'' xsl <= WideCharVector.maxLen
			then WideCharVectorSlice.concat xsl = t' xsl
			else (WideCharVectorSlice.concat xsl; false) 
			       handle Size => true
	in
	    Gen.try 100 (Gen.list (Gen.wideCharVectorSlice Gen.wideChar)) 
		    (Test.test t)
	end

    fun testFull () =
	let
	    fun t a = WideCharVectorSlice.slice (a, 0, NONE)
	in
	    Gen.try 1000 (Gen.wideCharVector Gen.wideChar) 
	      (Test.test (fn a => WideCharVectorSlice.equal WideChar.equal 
					(WideCharVectorSlice.full a, t a)))
	end

    fun testLength () =
	let
	    fun t (a, i, NONE, j)   = ((WideCharVector.sub (a, i + j);
				       t (a, i, NONE, j + 1)) 
		                             handle Subscript => j)
	      | t (a, i, SOME x, j) = x
	in
	    Gen.try 1000 (Gen.triple (Gen.wideCharVector Gen.wideChar,
				      Gen.int, 
				      Gen.option Gen.int))
	      (Test.test (fn (a, i, sz) => 
			     let
			    val asl = SOME (WideCharVectorSlice.slice (a, i, sz)) 
					     handle Subscript => NONE
			     in
				 if Option.isSome asl
				 then t (a, i, sz, 0) = 
				      WideCharVectorSlice.length (valOf asl)
				 else if Option.isSome sz then 
					    i < 0 orelse
					    (valOf sz) < 0 orelse
					    WideCharVector.length a < 
					    i + (valOf sz)
					else i < 0 orelse
					     WideCharVector.length a < i
			     end))
	end

    fun testBase () =
	let
	    fun t (a, i, sz) = 
		WideCharVectorSlice.base (WideCharVectorSlice.slice (a, i, sz)) = 
		(a, i, WideCharVectorSlice.length (WideCharVectorSlice.slice (a, i, sz)))
	in
	    Gen.try 1000 (Gen.triple (Gen.wideCharVector Gen.wideChar, 
				      Gen.int,
				      Gen.option Gen.int))
		    (Test.test (fn (a, i, sz) => t (a, i, sz)
		                      handle Subscript =>
					     if Option.isSome sz then 
						 i < 0 orelse
						 (valOf sz) < 0 orelse
						 WideCharVector.length a < 
						 i + (valOf sz)
					     else i < 0 orelse
						  WideCharVector.length a < i))
	end

    fun testSub () = 
	let
	    fun t (asl, i) = if i < 0 orelse WideCharVectorSlice.length asl <= i 
			     then NONE
			     else 
			       SOME (List.nth (WideCharVectorSlice.toList asl, i))
	in
	    Gen.try 1000 (Gen.pair (Gen.wideCharVectorSlice Gen.wideChar, Gen.int))
	      (Test.test (fn x => let
				    val r = SOME (WideCharVectorSlice.sub x)
					      handle Subscript => NONE
			          in
				    r = t x
			          end))
	end

    fun testSubslice () = 
	let
	    fun t'' (a, sl, i, sz) = 
		let
		    val r1 = SOME (WideCharVectorSlice.slice (a, i, sz)) 
			        handle Subscript => NONE
		    val r2 = SOME (WideCharVectorSlice.subslice (sl, i, sz))
			        handle Subscript => NONE
		in
		    Option.equal (WideCharVectorSlice.equal WideChar.equal) (r1, r2)
		end
	    fun t' (sl, a, i) = if i = WideCharVector.length a
				then a
				else t' (sl, WideCharVector.update (a, i, 
					      WideCharVectorSlice.sub (sl, i)), 
					 i + 1)
	    fun t (sl, i, sz) = 
		let
		    val null = fromInt 0
		    val a = 
			WideCharVector.fromList (Array.toList 
						  (Array.array 
						  (WideCharVectorSlice.length sl, 
						   null)))
		in
		     t'' (t' (sl, a, 0), sl, i, sz)
		end
	in
	    Gen.try 100 (Gen.triple (Gen.wideCharVectorSlice Gen.wideChar,
				      Gen.int,
				      Gen.option Gen.int))
		    (Test.test t)
	end

    fun testVector () = 
	let
	    fun t asl = WideCharVector.tabulate (WideCharVectorSlice.length asl,
					 fn i => WideCharVectorSlice.sub (asl, i))
	in 
	    Gen.try 1000 (Gen.wideCharVectorSlice Gen.wideChar) 
		    (Test.test (fn asl => WideCharVectorSlice.vector asl = 
					  t asl))
	end 

    fun testIsEmpty () = 
	let
	    fun t asl = #3 (WideCharVectorSlice.base asl) = 0 = 
			WideCharVectorSlice.isEmpty asl
	in
	    Gen.try 1000 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testApp () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x a = (x := a :: !x; fromInt (WideChar.ord a + 1); ())

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.app (f xs) sl;
		 List.app (f ys) (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testAppi () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (i, a) = (x := a :: !x; fromInt (WideChar.ord a + i); ())

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.appi (f xs) sl;
		 List.appi (f ys) (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testAppr () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x a = (x := a :: !x; fromInt (WideChar.ord a + 1); ())

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.appr (f xs) sl;
		 List.appr (f ys) (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testAppri () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (i, a) = (x := a :: !x; fromInt (WideChar.ord a + i); ())

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.appri (f xs) sl;
		 List.appri (f ys) (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testMap () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x a = (x := a :: !x; fromInt (WideChar.ord a + 1))

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.map (f xs) sl;
		 List.map (f ys) (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testMapi () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (i, a) = (x := a :: !x; fromInt (WideChar.ord a + i))

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.mapi (f xs) sl;
		 List.mapi (f ys) (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testFoldl () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    val null = fromInt 0

	    fun f x (a : WideChar.char, b) = (x := a :: !x; fromInt (WideChar.ord a + 
								 WideChar.ord b))

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.foldl (f xs) null sl;
		 List.foldl (f ys) null (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testFoldli () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    val null = fromInt 0

	    fun f x (i, a, b) = (x := a :: !x; fromInt (WideChar.ord a + 
							WideChar.ord b + i))

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.foldli (f xs) null sl;
		 List.foldli (f ys) null (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testFoldr () = 
	let
	    val xs = ref nil
	    val ys = ref nil
	    val null = fromInt 0

	    fun f x (a : WideChar.char, b) = (x := a :: !x; fromInt (WideChar.ord a + 
								 WideChar.ord b))

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.foldr (f xs) null sl;
		 List.foldr (f ys) null (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testFoldri () = 
	let
	    val xs = ref nil
	    val ys = ref nil

	    val null = fromInt 0

	    fun f x (i, a, b) = (x := a :: !x; fromInt (WideChar.ord a + 
							WideChar.ord b + 
							i))

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.foldri (f xs) null sl;
		 List.foldri (f ys) null (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testFind () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x a = (x := a :: !x; a = fromInt 42)

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.find (f xs) sl;
		 List.find (f ys) (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end     

    fun testFindi () =
	let
	    val xs = ref nil
	    val ys = ref nil

	    fun f x (i, a) = (x := a :: !x; a = fromInt 42 andalso 
					    fromInt i <= a)

	    fun t sl = 
		(xs := nil;
		 ys := nil;
		 WideCharVectorSlice.findi (f xs) sl;
		 List.findi (f ys) (WideCharVectorSlice.toList sl);
		 !xs = !ys)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end 

    fun testExists () = 
	let
	    fun f x = x > fromInt 0

	    fun t asl = WideCharVectorSlice.exists f asl = 
			List.exists f (WideCharVectorSlice.toList asl)
	in 
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testAll () = 
	let
	    fun f x = x > fromInt 0

	    fun t asl = WideCharVectorSlice.all f asl = 
			List.all f (WideCharVectorSlice.toList asl)
	in 
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testAlli () =
	let
	    fun f (i, x) = x > fromInt i

	    fun t asl = WideCharVectorSlice.alli f asl = 
			List.alli f (WideCharVectorSlice.toList asl)
	in 
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testExistsi () =
	let
	    fun f (i, x) = x > fromInt 0

	    fun t asl = WideCharVectorSlice.existsi f asl = 
			List.existsi f (WideCharVectorSlice.toList asl)
	in 
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testCollate () = 
	let
	    fun t (asl1, asl2) = 
		WideCharVectorSlice.collate WideChar.compare (asl1, asl2) = 
		List.collate WideChar.compare (WideCharVectorSlice.toList asl1,
					    WideCharVectorSlice.toList asl2)
	in 
	    Gen.try 100 (Gen.pair (Gen.wideCharVectorSlice Gen.wideChar,
				   Gen.wideCharVectorSlice Gen.wideChar)) 
		    (Test.test t)
	end

    fun testToVector () = 
	let
	    fun t asl = WideCharVectorSlice.toVector asl =
			WideCharVectorSlice.vector asl
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testToList () = 
	let
	    fun t asl = WideCharVector.toList (WideCharVectorSlice.toVector asl)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) 
	    (Test.test (fn asl => WideCharVectorSlice.toList asl = t asl))
	end

    fun testRev () = 
	let
	    fun t' sl = 
		let
		    val (a, x, y) = WideCharVectorSlice.base sl
		in
		    WideCharVectorSlice.slice (WideCharVector.rev a, 
				       (WideCharVector.length a) - x - y, SOME y)
		end
	    fun t (sl, csl) = WideCharVectorSlice.equal WideChar.equal 
		  (WideCharVectorSlice.full (WideCharVectorSlice.rev sl), t' csl)
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) 
		    (Test.test (fn sl => 
			       let
				   val (a, x, y) = WideCharVectorSlice.base sl
				   val b = WideCharVector.fromList (WideCharVector.toList a)
				   val csl = WideCharVectorSlice.slice (b, x, SOME y)
			       in 
				   t (sl, csl)
	                       end))
	end

    fun testTriml () = 
	let
	    fun t' (sl, a, i, j, k) = 
		       if k > j 
		       then WideCharVectorSlice.subslice (sl, j, SOME 0)
		       else WideCharVectorSlice.slice (a, i + k, SOME (j - k))

	    fun t (sl, k) = WideCharVectorSlice.equal WideChar.equal (
			            WideCharVectorSlice.triml k sl,
				    t' (sl, 
					#1 (WideCharVectorSlice.base sl),
					#2 (WideCharVectorSlice.base sl),
					#3 (WideCharVectorSlice.base sl), k))
			      handle Subscript => k < 0
	in
	    Gen.try 1000 (Gen.pair (Gen.wideCharVectorSlice Gen.wideChar,
				    Gen.int)) (Test.test t)
	end

    fun testTrimr () = 
	let
	    fun t' (sl, a, i, j, k) = 
		       if k > j 
		       then WideCharVectorSlice.subslice (sl, j, SOME 0)
		       else WideCharVectorSlice.slice (a, i, SOME (j - k))

	    fun t (sl, k) = WideCharVectorSlice.equal WideChar.equal (
			            WideCharVectorSlice.trimr k sl,
				    t' (sl, 
					#1 (WideCharVectorSlice.base sl),
					#2 (WideCharVectorSlice.base sl),
					#3 (WideCharVectorSlice.base sl), k))
			      handle Subscript => k < 0
	in
	    Gen.try 1000 (Gen.pair (Gen.wideCharVectorSlice Gen.wideChar,
				    Gen.int)) (Test.test t)
	end

    fun testSplitAt () = 
	let
	    fun eq ((sl1, sl2), (sl3, sl4)) = 
		WideCharVectorSlice.equal WideChar.equal (sl1, sl3) andalso
		WideCharVectorSlice.equal WideChar.equal (sl2, sl4)

	    fun t' (sl, i) = SOME (WideCharVectorSlice.subslice (sl, 0, SOME i),
				   WideCharVectorSlice.subslice (sl, i, NONE))
			       handle Subscript => NONE
	    fun t (sl, i) = 
		let
		    val r = t' (sl, i)
		in 
		    eq (WideCharVectorSlice.splitAt (sl, i), valOf r)
			       handle Subscript => Option.isNone r
		end
	in
	    Gen.try 1000 (Gen.pair (Gen.wideCharVectorSlice Gen.wideChar, 
				    Gen.int)) (Test.test t)
	end

    fun testSplitl () = 
	let
	    val xs = ref []
	    val ys = ref []

	    fun eq ((sl1, sl2), (sl3, sl4)) = 
		WideCharVectorSlice.equal WideChar.equal (sl1, sl3) andalso
		WideCharVectorSlice.equal WideChar.equal (sl2, sl4)

	    fun t' (sl, f, i) = if i = WideCharVectorSlice.length sl
				then i
				else 
				    if not (f (WideCharVectorSlice.sub (sl, i)))
				     then i
				     else t' (sl, f, i + 1)

	    fun f y x = (y := x :: !y; x = fromInt 42)

	    fun t sl = eq (WideCharVectorSlice.splitl (f xs) sl, 
			   WideCharVectorSlice.splitAt (sl, t' (sl, f ys, 0))) 
		       andalso !xs = !ys
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar)
		    (Test.test (fn x => (xs := nil;
				         ys := nil; t x)))
	end
	
    fun testSplitr () = 
	let
	    val xs = ref []
	    val ys = ref []

	    fun eq ((sl1, sl2), (sl3, sl4)) = 
		WideCharVectorSlice.equal WideChar.equal (sl1, sl3) andalso
		WideCharVectorSlice.equal WideChar.equal (sl2, sl4)

	    fun t' (sl, f, i) = if i < 0
				then 0
				else if not (f (WideCharVectorSlice.sub (sl, i)))
				     then i + 1
				     else t' (sl, f, i - 1)

	    fun f y x = (y := x :: !y; x >= fromInt 42)

	    fun t sl = 
		eq (WideCharVectorSlice.splitr (f xs) sl, 
		    WideCharVectorSlice.splitAt (sl, t' (sl, f ys, 
					     WideCharVectorSlice.length sl - 1))) 
		andalso !xs = !ys
	in
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar)
		    (Test.test (fn x => (xs := nil;
				         ys := nil; t x)))
	end

    fun testContains () = 
	let
	    fun t asl = WideCharVectorSlice.contains WideChar.equal asl 
						  (fromInt 3) = 
			List.contains (WideCharVectorSlice.toList asl) 
				      (fromInt 3)
	in 
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testNotContains () = 
	let
	    fun t asl = WideCharVectorSlice.notContains WideChar.equal 
						     asl (fromInt 3) = 
			Bool.not (WideCharVectorSlice.contains WideChar.equal asl 
							    (fromInt 3))
	in 
	    Gen.try 100 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testIsSorted () = 
	let
	    fun t' (f, sl, i) = if (i + 1) >= WideCharVectorSlice.length sl
			       then true
			       else (case f (WideCharVectorSlice.sub (sl, i),
					   WideCharVectorSlice.sub (sl, i + 1)) of
					 EQUAL   => t' (f, sl, i + 1)
				       | LESS    => t' (f, sl, i + 1)
				       | GREATER => false)

	    val f = WideChar.compare
	    fun t sl = WideCharVectorSlice.isSorted f sl = t' (f, sl, 0)
	in
	    Gen.try 1000 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end

    fun testSort () = 
	let
	    fun t sl = WideCharVectorSlice.isSorted WideChar.compare 
					    (WideCharVectorSlice.full 
				             (WideCharVectorSlice.sort 
						  WideChar.compare sl))
	in
	    Gen.try 1000 (Gen.wideCharVectorSlice Gen.wideChar) (Test.test t)
	end


    val suite = ("WideCharVectorSlice", [("slice", testSlice),
				("subslice", testSubslice),
				("full", testFull),
				("length", testLength),
				("sub", testSub),
				(*("update", testUpdate),*)
				("base", testBase),
				("vector", testVector),
				(*("swap", testSwap),*)
				("rev", testRev),
				("toVector", testToVector),
				("isEmpty", testIsEmpty),
				("toList", testToList),
				("concat", testConcat),
				("app", testApp),
				("appi", testAppi),
				("appr", testAppr),
				("appri", testAppri),
				("map", testMap),
				("mapi", testMapi),
				("foldl", testFoldl),
				("foldr", testFoldr),
				("foldli", testFoldli),
				("foldri", testFoldri),
				("find", testFind),
				("findi", testFindi),
				("all", testAll),
				("alli", testAlli),
				("exists", testExists),
				("existsi", testExistsi),
				("contains", testContains),
				("notContains", testNotContains),
				("splitAt", testSplitAt),
				("splitl", testSplitl),
				("splitr", testSplitr),
				("triml", testTriml),
				("trimr", testTrimr),
				("collate", testCollate),
				("isSorted", testIsSorted),
				("sort", testSort)])
end
