(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature TESTSUITE from "../../src/TESTSUITE-sig"

import structure Random    from "x-alice:/lib/utility/Random"
import structure Gen       from "x-alice:/lib/test/Gen"
import structure Test      from "../../src/Test"

structure TestVector :> TESTSUITE =
struct

    val randomize = Gen.randomize

    fun testMaxLen () =
        Test.test (fn x => x = 0xfffff0 - 1) Vector.maxLen

    fun testSub () =
	let
	    val testVec = Array.vector (Array.fromList [0,1,2,3,4,5])

	    fun t (v, i) = if i < 0 orelse Vector.length v <= i 
			       then NONE 
			   else SOME (List.nth (Array.toList 
						(Array.fromVector v), i))
			       
	    fun t' x = let
			   val r = t x
		       in
			   Vector.sub x = valOf r
			    handle Subscript => Option.isNone r
		       end
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.int)) 
	       (Test.test t');
	    Test.test (fn (x, i) => Vector.sub (x, i) = i) (testVec, 3)
	end

    fun testUpdate () = 
	let
	    fun t (v, i, x) = 
		if i < 0 orelse Vector.length v <= i
		    then NONE 
		else SOME (Vector.update (v, i, x))

	    fun t' (v, i, x) = let
				   val v' = t (v, i, x)
			       in
				   if Option.isSome v' 
				       then Vector.sub (valOf v', i) = x
				   else Vector.sub (v, i) = x
				    handle Subscript => Option.isNone v'
			       end
	in
	    Gen.try 1000 (Gen.triple (Gen.vector Gen.int, Gen.int, Gen.int))
	       (Test.test t')
	end

    fun testToList () =
	let
	    fun t' (v, i, xs) = if i >= Vector.length v
				  then List.rev xs
			      else t' (v, i + 1, (Vector.sub (v, i))::xs)

	    fun t v = t' (v, 0, []) = Vector.toList v
	in
	    Gen.try 1000 (Gen.vector Gen.int) (Test.test t)
	end

    fun testFromList () =
	let
	    fun t'' ([]   , v, i) = v
	      | t'' (x::xs, v, i) = t'' (xs, Vector.update (v, i, x), i - 1)

	    fun t' xs = let
			    val size = List.length xs
			in 
			    if size > Vector.maxLen 
				then NONE
			    else SOME (t'' (List.rev xs, 
					    Array.vector (Array.array (size, 
								       0)), 
					    size - 1))
			end
			    
	    fun t xs = let
			   val r = t' xs
		       in
			   Vector.equal Int.equal (Vector.fromList xs, 
						   valOf (t' xs))
			     handle Size => Option.isNone r
		       end

	    fun h xs = (Vector.fromList xs; true)
		         handle Size => List.length xs > Vector.maxLen
	in
	    Gen.try 100 (Gen.list Gen.int) 
	       (Test.test (fn l => h l andalso t l))
	end

    fun testConcat () =
	Gen.try 100 (Gen.list (Gen.vector Gen.int)) 
	(Test.test (fn xs => List.concat (List.map Vector.toList xs) =
		             Vector.toList (Vector.concat xs)))

    fun testLength () =
	Gen.try 1000 (Gen.vector Gen.int)
	   (Test.test (fn v => List.length (Vector.toList v) =
		               Vector.length v))
	    
    fun testTabulate () =
	let
	    fun t (n, f) = Vector.toList (Vector.tabulate (n, f)) =
		           List.tabulate (n, f)
			     handle Size => n < 0 orelse Vector.maxLen < n

	    fun t' x = x + 1
	in
	    Gen.try 1000 Gen.int (Test.test (fn x => t (x, t')))
	end

    fun testContains () =
	let
	    fun t (v, x) = Vector.contains v x =
		           List.contains (Vector.toList v) x
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.int)) (Test.test t)
	end

    fun testNotContains () =
	let
	    fun t (v, x) = Vector.notContains v x = 
		           Bool.not (Vector.contains v x)
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.int)) (Test.test t)
	end

    fun testSort () =
	let
	    fun t f v = List.sort f (Vector.toList v) =
		        Vector.toList (Vector.sort f v)
	in
	    Gen.try 1000 (Gen.vector Gen.int) 
	       (Test.test (fn v => t Int.compare v))
	end

    fun testIsSorted () =
	let
	    fun t f v = Vector.isSorted f v =
		        List.isSorted f (Vector.toList v)
	in
	    Gen.try 1000 (Gen.vector Gen.int) 
	       (Test.test (fn v => t Int.compare v))
	end

    fun testCollate () =
	let
	    fun t f (v1, v2) = 
		List.collate f (Vector.toList v1, 
				Vector.toList v2) =
		Vector.collate f (v1, v2)
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	       (Test.test (fn x => t Int.compare x))
	end

    fun testEqual () =
	let
	    fun t f (v1, v2) = Vector.equal f (v1, v2) =
		               List.equal f (Vector.toList v1, 
					     Vector.toList v2)
	in
	    Gen.try 1000 (Gen.pair (Gen.vector Gen.int, Gen.vector Gen.int))
	        (Test.test (fn x => t Int.equal x))
	end

    fun testRev () =
	let
	    fun t v = List.rev (Vector.toList v) =
		      Vector.toList (Vector.rev v)
	in
	    Gen.try 1000 (Gen.vector Gen.int) (Test.test t)
	end

    fun testAll () =
	let
	    fun t f v = List.all f (Vector.toList v)

	    fun f x = x > 0
	in
	    Gen.try 1000 (Gen.vector Gen.int) 
	     (Test.test (fn v => Vector.all f v = t f v))
	end

    fun testExists () =
	let
	    fun t f v = List.exists f (Vector.toList v)
		
	    fun f x = x > 0
	in
	    Gen.try 1000 (Gen.vector Gen.int)
	     (Test.test (fn v => Vector.exists f v = t f v))
	end

    fun testFind () =
	let
	    fun t f v = List.find f (Vector.toList v)
		
	    fun f x = x > 0
	in
	    Gen.try 1000 (Gen.vector Gen.int)
	     (Test.test (fn v => Vector.find f v = t f v))
	end

    fun testAlli () =
	let
	    fun t f v = List.alli f (Vector.toList v)

	    fun f (i, x) = i = x
	in
	    Gen.try 1000 (Gen.vector Gen.int) 
	     (Test.test (fn v => Vector.alli f v = t f v))
	end

    fun testExistsi () =
	let
	    fun t f v = List.existsi f (Vector.toList v)
		
	    fun f (i, x) = i = x
	in
	    Gen.try 1000 (Gen.vector Gen.int)
	     (Test.test (fn v => Vector.existsi f v = t f v))
	end

    fun testFindi () =
	let
	    fun t f v = List.findi f (Vector.toList v)
		
	    fun f (i, x) = i = x
	in
	    Gen.try 1000 (Gen.vector Gen.int)
	     (Test.test (fn v => Vector.findi f v = t f v))
	end

    fun testFoldl () =
	let
	    val test1 = [0, 1, 2, 3]
		
	    fun t f b   nil   = b
	      | t f b (x::xs) = t f (f (x, b)) xs

	    fun f (a, b) = b@[a]


	in
	    Test.test (fn xs => let
				   val v1 = Vector.fromList xs
				in 
				    Vector.foldl List.:: nil v1 =
				    List.rev xs
				end) test1;
	    Gen.try 100 (Gen.list Gen.int) 
	        (Test.test (fn xs => 
			    let
				val v = Vector.fromList xs
			    in 
				Vector.foldl f nil v =
				List.foldl f nil xs
			    end))
	end

    fun testFoldr () =
	let
	    val test1 = [0, 1, 2, 3]
		
	    fun t f b   nil   = b
	      | t f b (x::xs) = t f (f (x, b)) xs


	in
	    Test.test (fn xs => let
				   val v1 = Vector.fromList xs
				in 
				    Vector.foldr List.:: nil v1 =
				    xs
				end) test1;
	    Gen.try 100 (Gen.list Gen.int) 
	        (Test.test (fn xs => 
			    let
				val v = Vector.fromList xs
			    in 
				Vector.foldr List.:: nil v =
				List.foldr List.:: nil xs
			    end))
	end

    fun testFoldli () =
	let
	    val test1 = [0, 1, 2, 3]
		
	    fun t f b   nil   = b
	      | t f b (x::xs) = t f (f (x, b)) xs

	    fun f (i, a, b) = b@[a + i]

	    fun f' (i, a, b) = a::b


	in
	    Test.test (fn xs => let
				   val v1 = Vector.fromList xs
				in 
				    Vector.foldli f' nil v1 =
				    List.rev xs
				end) test1;
	    Gen.try 100 (Gen.list Gen.int) 
	        (Test.test (fn xs => 
			    let
				val v = Vector.fromList xs
			    in 
				Vector.foldli f nil v =
				List.foldli f nil xs
			    end))
	end

    fun testFoldri () =
	let
	    val test1 = [0, 1, 2, 3]
		
	    fun t f b   nil   = b
	      | t f b (x::xs) = t f (f (x, b)) xs

	    fun f (i, a, b) = (a + i) :: b

	    fun f' (i, a, b) = a::b

	in
	    Test.test (fn xs => let
				   val v1 = Vector.fromList xs
				in 
				    Vector.foldri f' nil v1 =
				    xs
				end) test1;
	    Gen.try 100 (Gen.list Gen.int) 
	        (Test.test (fn xs => 
			    let
				val v = Vector.fromList xs
			    in 
				Vector.foldri f nil v =
				List.foldri f nil xs
			    end))
	end

    fun testApp () =
	let
	    val x1 = ref nil
	    val x2 = ref nil

	    fun f y x = y := (x :: !y)
	in
	    Gen.try 10 (Gen.vector Gen.int)
	      (Test.test (fn v => (List.app (f x1) (Vector.toList v);
				   Vector.app (f x2) v;
				    let
					val b = !x1 = !x2
				    in 
					x1 := nil;
					x2 := nil; b
				    end)))
	end

    fun testAppr () =
	let
	    val x1 = ref nil
	    val x2 = ref nil

	    fun f y x = y := (x :: !y)
	in
	    Gen.try 10 (Gen.vector Gen.int)
	      (Test.test (fn v => (List.appr (f x1) (Vector.toList v);
				    Vector.appr (f x2) v;
				    let
					val b = !x1 = !x2
				    in 
					x1 := nil;
					x2 := nil; b
				    end)))
	end

    fun testAppi () =
	let
	    val x1 = ref nil
	    val x2 = ref nil

	    fun f y (i, x) = y := ((i + x) :: !y)
	in
	    Gen.try 10 (Gen.vector Gen.int)
	      (Test.test (fn v => (List.appi (f x1) (Vector.toList v);
				   Vector.appi (f x2) v;
				    let
					val b = !x1 = !x2
				    in 
					x1 := nil;
					x2 := nil; b
				    end)))
	end

    fun testAppri () =
	let
	    val x1 = ref nil
	    val x2 = ref nil

	    fun f y (i, x) = y := ((i + x) :: !y)
	in
	    Gen.try 10 (Gen.vector Gen.int)
	      (Test.test (fn v => (List.appri (f x1) (Vector.toList v);
				    Vector.appri (f x2) v;
				    let
					val b = !x1 = !x2
				    in 
					x1 := nil;
					x2 := nil; b
				    end)))
	end


    fun testMap () =
	let
	    val x1 = ref nil
	    val x2 = ref nil

	    fun t x i = (x := i :: !x; i + 5)

	in
	    Gen.try 100 (Gen.vector Gen.int) 
	       (Test.test (fn v => (x1 := nil;
				    x2 := nil;
				    Vector.toList (Vector.map (t x1) v) =
				    List.map (t x2) (Vector.toList v) andalso
				    !x1 = !x2 andalso 
				    !x1 = List.rev (Vector.toList v))))
	end

    fun testMapi () =
	let
	    val x1 = ref nil
	    val x2 = ref nil

	    fun t x (i, a) = (x := a :: !x; a + i + 5)
	in
	    Gen.try 100 (Gen.vector Gen.int) 
	       (Test.test (fn v => (x1 := nil; x2 := nil;
				    Vector.toList (Vector.mapi (t x1) v) =
				    List.mapi (t x2) (Vector.toList v) andalso
				    !x1 = !x2 andalso
				    !x2 = List.rev (Vector.toList v))))
	end

    val suite = ("Vector", [("maxLen", testMaxLen),
			    ("sub", testSub),
			    ("update", testUpdate),
			    ("length", testLength),
			    ("toList", testToList),
			    ("fromList", testFromList),
			    ("tabulate", testTabulate),
			    ("concat", testConcat),
			    ("contains", testContains),
			    ("notContains", testNotContains),
			    ("sort", testSort),
			    ("isSorted", testIsSorted),
			    ("equal", testEqual),
			    ("collate", testCollate),
			    ("rev", testRev),
			    ("all", testAll),
			    ("exists", testExists),
			    ("find", testFind),
			    ("alli", testAlli),
			    ("existsi", testExistsi),
			    ("findi", testFindi),
			    ("foldl", testFoldl),
			    ("foldr", testFoldr),
			    ("foldri", testFoldri),
			    ("foldli", testFoldli),
			    ("map", testMap),
			    ("mapi", testMapi),
			    ("app", testApp),
			    ("appr", testAppr),
			    ("appi", testAppi),
			    ("appri", testAppri)])
end


