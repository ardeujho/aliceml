import signature REGRESSION from "REGRESSION-sig"

structure General : REGRESSION =
struct

val name = "general"

val ok = SOME "general.ok"

val result = ref ""

fun concatResult s = result := (!result) ^ s


(* Auxiliary functions for test cases *)

infix 1 seq
fun e1 seq e2 = e2;
fun check b = if b then "OK" else "WRONG";
fun check' f = (if f () then "OK" else "WRONG") handle _ => "EXN";

fun range (f, to) p = 
    let open Int 
    in
	(f > to) orelse (p f) andalso (range (f+1, to) p)
    end;

fun checkrange bounds = check o range bounds;

fun tst0 s s' = concatResult (s ^ "    \t" ^ s' ^ "\n");
fun tst  s b = tst0 s (check  b);
fun tst' s f = tst0 s (check' f);

fun tstrange s bounds = (tst s) o range bounds  


(* General -- incomplete 1996-04-19, 1996-09-30, 1997-03-12 *)


val _ = concatResult "\nFile general.sml: Testing structure General...\n"

exception NoExceptionRaised

fun getExn (f : unit -> 'a) = 
    (f (); NoExceptionRaised) handle e => e

fun prExn(exnStr, exn) =
    (concatResult "Should be `"; concatResult exnStr; concatResult "':\n  ";
     concatResult (exnName exn); concatResult "\n  ";
     concatResult (exnMessage exn); concatResult "\n");

exception E1;
exception E2 = E1;

val _ = List.map prExn
    [("E1 or E2",  E2),
     ("Bind",      getExn(fn _ => let val true = false in () end)),
     ("Match",     getExn(fn _ => (fn true => ()) false)),
     ("Subscript", getExn(fn _ => Vector.sub(vector [], ~1))),
     ("Overflow",  getExn(fn _ => Array.array(Array.maxLen+1, ()))),
     ("Div",       getExn(fn _ => 1 div 0)),
     ("Chr",       getExn(fn _ => Char.chr 9999999)),
     ("Fail",      Fail "demo"),
     ("Option",    getExn(fn _ => valOf NONE)),
     ("Empty",     getExn(fn _ => List.hd []))
(*     ("SysErr",    getExn (fn _ => FileSys.modTime "exists.not")), *)
(*     ("Io",        getExn (fn _ => TextIO.openOut "."))*)
     ];


val result = !result

end
