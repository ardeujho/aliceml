
processing outFuhMishra0...running TYPE...
Result of TYPE:


 
Coersion set:     
    REAL |> 'a15, 
    'a7 |> 'a15->'a16, 
    'a16 |> 'a12, 
    INT |> 'a13, 
    'a7 |> 'a13->'a14, 
    'a14 |> 'a11, 
    'a11*'a12 |> 'a8, 
    'a9 |> 'a10, 
    'a9->'a10 |> 'a7, 
    'a8 |> 'a6
Type environment: 
Expression:       let Id=(fn x =>x) in ((Id @ 3),(Id @ 4.?))end
Type:             'a6running MATCH...


Result of MATCH:


 
Coersion set:     
    REAL |> 'a15, 
    'a17->'a18 |> 'a15->'a16, 
    'a16 |> 'a12, 
    INT |> 'a13, 
    'a17->'a18 |> 'a13->'a14, 
    'a14 |> 'a11, 
    'a11*'a12 |> 'a21*'a22, 
    'a9 |> 'a10, 
    'a9->'a10 |> 'a17->'a18, 
    'a21*'a22 |> 'a25*'a26
Type environment: 
Expression:       let Id=(fn x =>x) in ((Id @ 3),(Id @ 4.?))end
Type:             'a25*'a26
processing outFuhMishra1...running TYPE...
Result of TYPE:


 
Coersion set:     
    REAL |> 'a13, 
    'a7 |> 'a13->'a14, 
    'a14 |> 'a8, 
    'a9 |> 'a12, 
    'a9 |> 'a11, 
    'a11*'a12 |> 'a10, 
    'a9->'a10 |> 'a7, 
    'a8 |> 'a6
Type environment: 
Expression:       let makepair=(fn x =>(x,x)) in (makepair @ 3.?)end
Type:             'a6running MATCH...


Result of MATCH:


 
Coersion set:     
    REAL |> 'a13, 
    'a15->'a29*'a30 |> 'a13->'a31*'a32, 
    'a31*'a32 |> 'a23*'a24, 
    'a9 |> 'a12, 
    'a9 |> 'a11, 
    'a11*'a12 |> 'a19*'a20, 
    'a9->'a19*'a20 |> 'a15->'a29*'a30, 
    'a23*'a24 |> 'a35*'a36
Type environment: 
Expression:       let makepair=(fn x =>(x,x)) in (makepair @ 3.?)end
Type:             'a35*'a36
processing outFuhMishra2...running TYPE...
Result of TYPE:


 
Coersion set:     
    REAL |> 'a28, 
    REAL |> 'a27, 
    'a27*'a28 |> 'a23, 
    REAL->INT |> 'a25, 
    'a7 |> 'a25->'a26, 
    'a26 |> 'a23->'a24, 
    'a24 |> 'a8, 
    'a11 |> 'a21, 
    'a0*'a1->'a1 |> 'a21->'a22, 
    'a22 |> 'a19, 
    'a9 |> 'a19->'a20, 
    'a20 |> 'a14, 
    'a11 |> 'a17, 
    'a0*'a1->'a0 |> 'a17->'a18, 
    'a18 |> 'a15, 
    'a9 |> 'a15->'a16, 
    'a16 |> 'a13, 
    'a13*'a14 |> 'a12, 
    'a11->'a12 |> 'a10, 
    'a9->'a10 |> 'a7, 
    'a8 |> 'a6
Type environment: 
Expression:       let mappair=(fn f =>(fn x =>((f @ (fst @ x)),(f @ (snd @ x))))) in ((mappair @ floor) @ (3.?,2.?))end
Type:             'a6running MATCH...


Result of MATCH:


 
Coersion set:     
    REAL |> 'a28, 
    REAL |> 'a27, 
    'a27*'a28 |> 'a29*'a30, 
    REAL->INT |> 'a33->'a34, 
    ('a37->'a38)->'a46*'a47->'a91*'a92 |> ('a33->'a34)->'a49*'a50->'a89*'a90, 
    'a49*'a50->'a89*'a90 |> 'a29*'a30->'a95*'a96, 
    'a95*'a96 |> 'a83*'a84, 
    'a59*'a60 |> 'a55*'a56, 
    'a0*'a1->'a1 |> 'a55*'a56->'a22, 
    'a22 |> 'a19, 
    'a63->'a64 |> 'a19->'a20, 
    'a20 |> 'a14, 
    'a59*'a60 |> 'a67*'a68, 
    'a0*'a1->'a0 |> 'a67*'a68->'a18, 
    'a18 |> 'a15, 
    'a63->'a64 |> 'a15->'a16, 
    'a16 |> 'a13, 
    'a13*'a14 |> 'a71*'a72, 
    'a59*'a60->'a71*'a72 |> 'a75*'a76->'a77*'a78, 
    ('a63->'a64)->'a75*'a76->'a77*'a78 |> ('a37->'a38)->'a46*'a47->'a91*'a92, 
    'a83*'a84 |> 'a99*'a100
Type environment: 
Expression:       let mappair=(fn f =>(fn x =>((f @ (fst @ x)),(f @ (snd @ x))))) in ((mappair @ floor) @ (3.?,2.?))end
Type:             'a99*'a100
processing outFuhMishra3...running TYPE...
Result of TYPE:


 
Coersion set:     
    'a7 |> 'a8, 
    'a7->'a8 |> 'a6
Type environment: 
Expression:       (fn x =>x)
Type:             'a6running MATCH...


Result of MATCH:


 
Coersion set:     
    'a7 |> 'a8, 
    'a7->'a8 |> 'a9->'a10
Type environment: 
Expression:       (fn x =>x)
Type:             'a9->'a10
processing outFuhMishra4...running TYPE...
Result of TYPE:


 
Coersion set:     
    'a9 |> 'a11, 
    'a7 |> 'a11->'a12, 
    'a12 |> 'a10, 
    'a9->'a10 |> 'a8, 
    'a7->'a8 |> 'a6
Type environment: 
Expression:       (fn f =>(fn x =>(f @ x)))
Type:             'a6running MATCH...


Result of MATCH:


 
Coersion set:     
    'a9 |> 'a11, 
    'a13->'a14 |> 'a11->'a12, 
    'a12 |> 'a10, 
    'a9->'a10 |> 'a17->'a18, 
    ('a13->'a14)->'a17->'a18 |> ('a21->'a22)->'a23->'a24
Type environment: 
Expression:       (fn f =>(fn x =>(f @ x)))
Type:             ('a21->'a22)->'a23->'a24
processing outFuhMishra5...running TYPE...
Result of TYPE:


 
Coersion set:     
    'a9 |> 'a13, 
    'a7 |> 'a13->'a14, 
    'a14 |> 'a11, 
    'a7 |> 'a11->'a12, 
    'a12 |> 'a10, 
    'a9->'a10 |> 'a8, 
    'a7->'a8 |> 'a6
Type environment: 
Expression:       (fn f =>(fn x =>(f @ (f @ x))))
Type:             'a6running MATCH...


Result of MATCH:


 
Coersion set:     
    'a9 |> 'a13, 
    'a15->'a16 |> 'a13->'a14, 
    'a14 |> 'a11, 
    'a15->'a16 |> 'a11->'a12, 
    'a12 |> 'a10, 
    'a9->'a10 |> 'a19->'a20, 
    ('a15->'a16)->'a19->'a20 |> ('a23->'a24)->'a25->'a26
Type environment: 
Expression:       (fn f =>(fn x =>(f @ (f @ x))))
Type:             ('a23->'a24)->'a25->'a26
