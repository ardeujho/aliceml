import structure Space  from "x-alice:/lib/gecode/Space"
import structure FD     from "x-alice:/lib/gecode/FD"
import structure FS     from "x-alice:/lib/gecode/FS"
import structure Remote from "x-alice:/lib/distribution/Remote"

import structure Common    from "Common"
import structure Utils     from "Utils"
import structure MyStack   from "Utils"
import structure Interface from "Interface"
import structure Path      from "Path"
import signature RSPACE    from "RSPACE-sig"
import structure Debug     from "Debug"

functor MkWorker (MkRSpace : RSPACE) (ScriptGen : Common.SCRIPT_GEN) =
struct	

 open Debug

 (* A sequential server. *)
 structure Log = Utils.NewSequence ()

 (* Init the script : create the variables and the root space. *)
 structure Script = ScriptGen.MkScript Space FD FS
 val    rootSpace = Script.root
 val            _ = Script.script rootSpace

 (* Orders to compare solutions. *)
 val (isBestMode, iOrder) =
   case Script.searchMode of
     Common.BEST (order, _) => (true, order)
   | _ => (false, fn (_,_) => assert false) (* Is not used *)

 val xOrder =
   case Script.searchMode of
     Common.BEST (iord, Common.Internalize (f, localscript)) =>
       (Common.mkOrder (iord,f, rootSpace, localscript))
   | Common.BEST (_, Common.ExternalOrder xord) => xord
   | _ => (fn (_,_) => assert false) (* Is not used *)
   
 (* Recomputable space *)
 structure RSpace = MkRSpace (type     a = (* ScriptGen.sol *) int vector
			      val  order = iOrder
			      val   root = rootSpace
			      val  rdist = ScriptGen.rdist)

 fun register (id, name, llog, verbosity, 
	       managerIntf : (* ScriptGen.sol *) (int vector) Interface.manager_intf) =
   let
     val logtime = ref 0

     (* Be slow for the demo ! *)
     val slow = not(Word31.compare (dbZero, verbosity && dbSlow) = EQUAL)

     fun log (lvl, msg) =
       if Word31.compare (dbZero, verbosity && lvl) = EQUAL then ()
       else Log.add (fn () => let val _ = logtime := !logtime + 1
                                  val msg = Int.toString (!logtime)^" - "^msg
                              in
                                llog msg ;
                                #log managerIntf (id, msg)
                              end)
                
     (* Current best solution. *)
     val best = ref NONE
     val bestNumber = ref 0
       
     fun bestMsg sol =
       (log (dbCom || dbSearch, "Manager sends a best solution.\n") ;
        if isBestMode then
          let
            val p = Promise.promise ()
            val oldbest = Ref.exchange (best, Promise.future p)
          in
            if oldbest = NONE orelse xOrder (valOf oldbest, sol) then
              (bestNumber := !bestNumber + 1 ; 
               Promise.fulfill (p, SOME sol))
            else Promise.fulfill (p, oldbest)
          end
        else ())

     fun update (lvl, rspace) =
       let val newlvl = !bestNumber in
         if newlvl > lvl then (* Update needed. *)
           (log (dbSearch, "Update needed.\n") ;
            (* A harmless race condition here. *)
            (newlvl, RSpace.best (rspace, valOf (!best))))
         else (log (dbSearch, "No update needed.\n") ;
               (lvl, rspace))
       end
       
     (* The tasks to be done are stored in a stack.
      * Each task is represented as a rspace to be explored. *)
     val tasks = MyStack.new ()
     val stopped = ref false

     fun share () =
       (log (dbCom, "Looking for some work to SHARE.\n") ;
        if MyStack.isEmpty tasks then (log (dbCom, "None found.\n") ; NONE)
        else case MyStack.takeLast tasks of
          NONE => (log (dbCom, "None found.\n") ; NONE)
        | SOME (lvl,rsp) => 
            let val rsp' = if isBestMode then #2 (update (lvl, rsp)) else rsp
            in
              log (dbCom, "Giving some work.\n") ;
              SOME (RSpace.path rsp')
            end)


     val msgNotAssigned =
       "Some variables are not assigned, " ^ 
       "but no more branching is possible.\n" ^
       "This probably means that the given search problem " ^
       "is not well specified.\n"
       
     (* Take a task from the task list and search. *)
     fun doSearch () =
       (log (dbSearch, "doSearch\n") ;
        if !stopped then ()
        else
        case MyStack.pop tasks of
          NONE => #find managerIntf id (* Ask for some work. *)
        | SOME (lvl, rspace) =>
            let val (newlvl, rspace') =
              if isBestMode then update (lvl, rspace) else (0, rspace)
            in
              log (dbSearch, "asking the rspace at " ^
                   (Path.print (RSpace.path rspace') ^ ".\n")) ;
              
              case RSpace.status rspace' of
                Space.FAILED =>
                  (log (dbSearch, "Failure" ^
                        (Path.print (RSpace.path rspace'))
                        ^ "...next.\n") ;
                   doSearch ()) (* Next. *)
              | Space.SOLVED =>
                  let val _ = log (dbSearch, "Succeeded. Got a sol at " ^
                                   (Path.print (RSpace.path rspace'))
                                   ^ ".\n")
                    val space = RSpace.getSpace rspace'
                  in
                    #collect managerIntf
                    (Script.getSolution space, id,
                     RSpace.path rspace')
                    handle FD.NotAssigned =>
                      log (dbExc, msgNotAssigned) ;
                      
                      doSearch ()
                  end
              | Space.BRANCH =>
                  let val _ = log (dbSearch, "Some alternatives at " ^
                                   (Path.print (RSpace.path rspace'))
                                   ^ ".\n")
                    val left = RSpace.getLeft rspace'
                    val right = RSpace.getRight rspace'
                  in
                    MyStack.push (tasks, (newlvl, right)) ;
                    MyStack.push (tasks, (newlvl, left)) ;
                    if slow then Utils.sleepms 520 else () ; (* SLEEP !!! *)
                    doSearch ()
                  end
            end)
       
     (* 'explore' message : create a new rspace
      * and put it in the task list. *)
     fun explore z =
       (log (dbCom, "Exploring given path.\n") ;
        assert (MyStack.isEmpty tasks) ;
        (MyStack.push (tasks, (0, RSpace.space z))
         handle (Fail s) => 
           (log (dbExc, "The initial search space is already failed.\n") ;
            log (dbExc, "Exception Fail : " ^ s ^ "\n")));
        doSearch ())
       
     fun stop () =
       (stopped := true ;
        log (dbCom || dbSearch, "Terminating.\n") ;
        Log.stop ())

     fun shutdown () =
       (spawn (Utils.sleepms 500 ; OS.Process.exit OS.Process.success) ;
        ())

     (* Handle exceptions. *)
     val pex = Promise.promise ()
     fun wrapHandle f = fn args =>
       (f args handle ex => 
         (Promise.fulfill (pex, ex) ;
           raise ex))
         
     val workerInterface =
       let
         val share    = Remote.proxy (wrapHandle share)
         val explore  = Remote.proxy (wrapHandle explore)
         val stop     = Remote.proxy (wrapHandle stop)
         val bestMsg  = Remote.proxy (wrapHandle bestMsg)
         val shutdown = Remote.proxy shutdown
       in
         {id       = id ,
          name     = name ,
          share    = share ,
          best     = fn sol  => spawn (bestMsg sol) ,
          explore  = fn args => spawn (explore args) , (* Asynchronous *)
          stop     = stop ,
          shutdown = shutdown }
       end
     
   in
     #register managerIntf workerInterface ;
     
     log (dbCom, "Asking for some work.\n") ;
     #find managerIntf id ;
     
     log (dbCom, "I have asked. Now waiting.\n") ;
     
     (* Capture exceptions of other threads. *)
     raise (Future.await (Promise.future pex))
   end
end
