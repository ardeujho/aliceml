(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 *  See the file "../LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Space     from "x-alice:/lib/gecode/Space"
import structure FS        from "x-alice:/lib/gecode/FS"
import structure Print     from "x-alice:/lib/system/Print"
import structure Explorer     from "x-alice:/tools/Explorer"

	(**
	* Asserts v holds for all solutions, performs f if failed node met.
	*)
	
    fun testVerify s v f =
	let
	    fun dfe (s,d) =
		 case Space.status s of
		    Space.FAILED => (f (); Space.discard s)
		  | Space.SOLVED => (
		  assert (v s); 
		  Space.discard s)
		  | Space.BRANCH _ =>
		    let
			val c = Space.clone s
		    in
			Space.commit(s, 0);
			Space.commit(c, 1);
			(dfe (s,d+1));
			(dfe (c,d+1))
		    end
	in
	    dfe ((Space.clone s),0)
	end

	fun testVerifySimple s v = testVerify s v (fn () => (print "Space failed!";assert false))
	fun testVerifyComplex s v = testVerify s v (fn () => ())	
	
	fun unionTest () =
	let
		val space = Space.new()
		val root as #[a,b] = FS.setvarVec (space, 2)
		val top = FS.Value.make (space,#[(0,5)])
	in
		FS.subset (space, a, top);
		FS.subset (space, b, top);
		FS.convexHull (space, a, b);
(*        FS.setvarbranch(space, root, FS.FSB_NONE, FS.FSB_MIN); *)
		FS.randomBranch(space, root, 1);
		(root, space)
	end
	
	fun fakeVerify _ = true
	

	fun range2II (i1,i2) = 
	let
		val _= assert (i1 >= 0);
		val diff = i2 - i1
		val ones = IntInf.<< ((IntInf.fromInt 2),Word.fromInt diff ) - (IntInf.fromInt 1)
	in
		IntInf.<<(ones, Word.fromInt i1)
	end
	
	(*Eta forewa! :-) *)
	val vdom2II = Vector.foldl ( fn (r,a)=> IntInf.orb ((range2II r),a) ) (IntInf.fromInt 0)

	fun vBool v1 root space =
	let
		val root2 : (IntInf.int vector)= Vector.map 
				(  fn v => vdom2II ( FS.Reflect.lowerBound (space,v) )  )
				root
	in
		v1 root2
	end

	fun vUnion1 (root2 as #[a,b,c]) = (IntInf.orb(b,c) = a)
	fun vUnion2 (a,b,c) = (IntInf.orb(b,c) = a)	
	val vUnion = vBool vUnion1

	fun vInter1 (root2 as #[a,b,c]) = (IntInf.andb(b,c) = a)
	(* a is a subset of b: no element in a and not in b*)
	fun vSubSet1 (root2 as #[a,b]) =
		IntInf.andb (IntInf.xorb(a,b),a)= IntInf.fromInt 0		
	fun vNoSubSet1 root2 = Bool.not (vSubSet1 root2)
		
	fun vSuperOfInt1 (root2 as #[a,b,c]) =
		vSubSet1(#[IntInf.andb(b,c),a])
	fun vSubOfUni1 (root2 as #[a,b,c]) =
		vSubSet1(#[a,IntInf.orb(b,c)])
	
	fun vDiff1 (root2 as #[a,b,c]) = IntInf.andb (IntInf.xorb(c,b),b) = c
	fun vDisjoint1 (root2 as #[a,b]) = IntInf.andb(a,b) = IntInf.fromInt 0
	fun vDistinct1 (root2 as #[a,b]) = IntInf.xorb(a,b) > IntInf.fromInt 0
	fun vPartition1 (root2) = (vDisjoint1 root2 ) andalso (vUnion1 root2)
	
	fun vEquals1 (root2 as #[a,b]) = (a=b)
	
	
	fun vConvex #[a] space = 
	let
		val ad = FS.Reflect.lowerBound (space,a)
	in
		(Vector.length ad) = 1
	end
	
	fun vConvexHull #[a,b] space =
		(vConvex #[a] space) andalso
		( (vBool vSubSet1) #[b,a] space )
	
	fun b2II b = if b then IntInf.fromInt 1 else IntInf.fromInt 0
	
	val one = IntInf.fromInt 1
	val zero = IntInf.fromInt 0
	
	fun countTernaryVerifier (max, (a,b,c), v, acc) =
	let
		val acc = (b2II (v(a,b,c))) + acc
		val _ = print "Calculating "
		val _ = Print.printVal (a,b,c)
		val _ = print "\n"		
	in
		if (a < max) then countTernaryVerifier (max, (a+one,b,c), v, acc)
		else if (b < max) then countTernaryVerifier (max, (a,b+one,c), v, acc)
			else if (c < max) then countTernaryVerifier (max, (a,b,c+one), v, acc)			
				else acc
	end

	fun countBinaryVerifier (max, (a,b), v, acc) =
	let
		val acc = (b2II (v(a,b))) + acc
	in
		if (a < max) then countBinaryVerifier (max, (a+one,b), v, acc)
		else if (b < max) then countBinaryVerifier (max, (a,b+one), v, acc)
			else acc
	end


	val _ = print "Number of solutions for union, max=1: "
val _ = Print.printVal (countTernaryVerifier(one, (zero,zero,zero), vUnion2, zero))
	val (root, space)= unionTest ()
(*	val _ = Explorer.exploreOne unionTest	*)
	
	val _ = testVerifySimple space (vBool vNoSubSet1 root) 
	val _ = testVerifySimple space (fn _ => true) 
	val _ = print "done.\n";
	val _ = OS.Process.exit OS.Process.success
