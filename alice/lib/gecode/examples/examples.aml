(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 *  See the file "../LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Space     from "x-alice:/lib/gecode/Space"
import structure FD        from "x-alice:/lib/gecode/FD"

fun queens n cl =
    let
	val space = Space.new()
	open FD

	val v = rangeVec(space, n, (0, n-1))
	val v1 = Vector.tabulate (n, fn n => (n, Vector.sub(v,n)))
	val v2 = Vector.tabulate (n, fn n => (~n, Vector.sub(v,n)))
    in
	distinctOffset(space, v1, cl);
	distinctOffset(space, v2, cl);
	distinct(space, v, cl);
	branch(space, v, B_SIZE_MIN, B_MIN);
	(v, space)
    end

fun money cl = 
    let
	val space = Space.new()
	open FD

	val v as #[s,e,n,d,m,o',r,y] = rangeVec(space, 8, (0,9))

	val v1 = #[(1000,   s),
		   (100,    e),
		   (10,     n),
		   (1,      d),

		   (1000,   m),
		   (100,    o'),
		   (10,     r),
		   (1,      e),

		   (~10000, m),
		   (~1000,  o'),
		   (~100,   n),
		   (~10,    e),
		   (~1,     y)]
    in
	relI(space, s, NQ, 0);
	relI(space, m, NQ, 0);
	linear(space, v1, EQ, 0, cl);
	distinct(space, v, cl);
	branch(space, v, B_SIZE_MIN, B_MIN);
	(v, space)
    end

fun photo () =
    let
	val space = Space.new()
	open FD

	val s_prefs = #[(0,2), (1,4), (2,3), 
			(2,4), (3,0), (4,3),
			(4,0), (4,1)]
	val small = {n_names=5, n_prefs=8, prefs=s_prefs}
	val spec = small
	val pos = rangeVec(space,
			   #n_names spec,
			   (0,(#n_names spec)-1))
	val sat = range(space, (0, #n_prefs spec))
	val ful = boolvarVec (space, #n_prefs spec)

	val eq = Vector.tabulate ((#n_prefs spec)+1,
            fn n => 
	       if n=(#n_prefs spec) then
		   (~1, sat)
	       else
		   (1, Reflect.boolvar2intvar (Vector.sub(ful, n))))

	fun better(s1, s2) =
	    relI(s1, sat, GR, Reflect.value(s2, sat))
    in
	Vector.appi (fn (i,(pa, pb)) =>
			let
			    val b = boolvarVec(space,2)
			in
			    Reified.linear(space,
				    #[(1, Vector.sub(pos, pb)),
				      (~1, Vector.sub(pos, pa))],
				    EQ, 1, Vector.sub(b, 0), DEF);
			    Reified.linear(space,
				    #[(1, Vector.sub(pos, pa)),
				      (~1, Vector.sub(pos, pb))],
				    EQ, 1, Vector.sub(b, 1), DEF);
			    exor(space,
				     Vector.sub(b, 0),
				     Vector.sub(b, 1),
				     Vector.sub(ful, i))
			end) (#prefs spec);

	linear(space, eq, EQ, 0, DEF);
	distinct(space, pos, DEF);
	rel(space, Vector.sub(pos, 0), LE,
	    Vector.sub(pos, 1));
	branch(space, pos, B_NONE, B_MIN);

	(pos, sat, better, space)
    end

fun for' f offset max 0 = (f (offset+max))
  | for' f offset max n = (f (offset+max-n); for' f offset max (n-1))

fun for f start max = if start>max then ()
		      else for' f start (max-start) (max-start)

fun golomb n cl =
    let
	val space = Space.new()
	open FD

	fun diag(i,j) = (i*(2*n-i-1)) div 2 + j - i - 1

	val nn = n*n
	val dn = (n*n-n) div 2

	val k = rangeVec(space, n, (0,nn))
	val d = rangeVec(space, dn,(0,nn))

	fun better(s1, s2) =
	    relI(s1, Vector.sub(k, n-1), LE,
		 Reflect.value(s2, Vector.sub(k, n-1)))
    in
	relI(space, Vector.sub(k, 0), EQ, 0);

	for (fn i =>
		for (fn j => 
			linear(space,
			       #[(1, Vector.sub(k,j)),
				 (~1, Vector.sub(k,i)),
				 (~1, Vector.sub(d, diag(i,j)))],
			       EQ, 0, DEF))
		    (i+1) (n-1))
	    0 (n-2);

	for (fn i =>
		rel(space,
		    Vector.sub(k, i+1), GR,
		    Vector.sub(k, i))) 0 (n-2);
	distinct(space, d, cl);
	if n>2 then
	    rel(space,
		Vector.sub(d, diag(0,1)), LE,
		Vector.sub(d, diag(n-2, n-1)))
	else ();
	branch(space, k, B_MIN_MIN, B_MIN);

	(k, better, space)
    end
