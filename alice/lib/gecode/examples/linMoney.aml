(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 *  See the file "../LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 * Last change:
 *   $Date: 2004/05/04 07:53:07 $ by $Author: tack $
 *   $Revision: 1.3 $
 *)

import structure Space     from "x-alice:/lib/gecode/Space"
import structure FD        from "x-alice:/lib/gecode/FD"
import structure Search    from "x-alice:/lib/gecode/Search"
import structure Linear    from "x-alice:/lib/gecode/Linear"
import structure Print     from "x-alice:/lib/system/Print"
open Linear

fun money cl = 
    let
	val space = Space.new()
	open FD

	val v = rangeVec(space, 8, (0,9))
	val linv as #[s,e,n,d,m,o',r,y] = Vector.map (fn x=>FD(x)) v

	val v1 =(`1000 `* s  `+
		  `100 `* e  `+
		   `10 `* n  `+
		          d  `+
	         `1000 `* m  `+
		  `100 `* o' `+
		   `10 `* r  `+
		          e  `=
                `10000 `* m  `+		    
                 `1000 `* o' `+
		  `100 `* n  `+
		   `10 `* e  `+
		   y )
    in
		post(space, s `<> `0, cl);
		post(space, m `<> `0, cl);
		post(space, v1, cl);
		distinct(space, v, cl);
		branch(space, v, B_SIZE_MIN, B_MIN);
		(v, space)
    end

val (root,space) = money FD.DEF
val (SOME sol) = Search.searchOne space
val s = Vector.map (fn v => FD.Reflect.value(sol,v)) root
val _ = Print.printVal s
val _ = OS.Process.exit OS.Process.success
