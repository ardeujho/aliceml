(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

signature FS =
sig
    eqtype space
    eqtype intvar
    eqtype boolvar
    eqtype setvar

    type domain = (int*int) vector
    exception InvalidDomain
    (* Exception thrown by all domain tells *)
    (* if something that is no proper domain is used *)

    (* Allocation of finite set variables *)
    val setvar :  space  ->  setvar
    val setvarVec :  space * int ->  setvar vector

    val lowerBound : space * domain -> setvar
    val upperBound : space * domain -> setvar
    val bounds : space * domain * domain -> setvar

    datatype intrel =
	     EQ (* Equality         == *)
	   | NQ (* Disequality      != *)
	   | LQ (* Less or equal    <= *)
	   | LE (* Less             <  *)
	   | GQ (* Greater or equal >= *)
	   | GR (* Greater          >  *)

    datatype setrel = CMPL | DISJ | SEQ | SNQ | SUB | SUP
    datatype setop = DUNION | INTER | MINUS | UNION

    (* Domain constraints *)
    val dom : space * setvar * setrel * domain -> unit
    val domR : space * setvar * setrel * domain * boolvar -> unit
    val cardRange : space * int * int * setvar -> unit

    (* Relation constraints *)
    val rel : space * setvar * setrel * setvar -> unit
    val relR : space * setvar * setrel * setvar * boolvar -> unit
    val relOp : space * setvar * setop * setvar * setrel * setvar -> unit
    val relI : space * setvar * setrel * intvar -> unit
    val relIR : space * setvar * setrel * intvar * boolvar -> unit
    val relII : space * setvar * intrel * intvar -> unit
    val relN : space * setop * setvar vector * setvar -> unit
    val relNI : space * setop * intvar vector * setvar -> unit

    val relCSS : space * domain * setop * setvar * setrel * setvar -> unit
    val relSCS : space * setvar * setop * domain * setrel * setvar -> unit
    val relSSC : space * setvar * setop * setvar * setrel * domain -> unit
    val relCCS : space * domain * setop * domain * setrel * setvar -> unit
    val relCSC : space * domain * setop * setvar * setrel * domain -> unit
    val relSCC : space * setvar * setop * domain * setrel * domain -> unit

    val cardinality : space * setvar * intvar -> unit
    val maxElement : space * setvar * intvar -> unit
    val minElement : space * setvar * intvar -> unit
    val match : space * setvar * intvar vector -> unit

    val convex : space * setvar -> unit
    val convexHull : space * setvar * setvar -> unit
    val sequence : space * setvar vector -> unit
    val sequentialUnion : space * setvar vector * setvar -> unit

    structure Value :
	sig
	    val make : space * domain -> setvar
	    val empty : space -> setvar
	    val single : space * int -> setvar
(*	    val universal : space -> setvar*)
	    val is : space * setvar -> bool
	end

    structure Selection : sig
	val setvar : space * setvar vector * intvar * setvar -> unit
	val union : space * setvar vector * setvar * setvar -> unit
	val inter : space * setvar vector * setvar * setvar -> unit
	val interIn : space * setvar vector * setvar * setvar * domain -> unit
        val disjoint : space * setvar vector * setvar -> unit
    end
	
    structure Reflect : sig
	val card : space * setvar -> (int * int)
	val lowerBound : space * setvar -> domain
	val upperBound : space * setvar -> domain
	val unknown : space * setvar -> domain
	val cardOfLowerBound : space * setvar -> int
	val cardOfUpperBound : space * setvar -> int
	val cardOfUnknown : space * setvar -> int
        val assigned : space * setvar -> bool
    end

    (* Branching strategies *)

    datatype fsb_var_sel =
	     FSB_MAX_CARD
	   | FSB_MIN_CARD
           | FSB_MIN_UNKNOWN_ELEM
	   | FSB_NONE
	     
    datatype fsb_val_sel =
	     FSB_MAX
	   | FSB_MIN

    val setvarbranch :  space *  setvar vector * fsb_var_sel *
			fsb_val_sel -> unit

end
