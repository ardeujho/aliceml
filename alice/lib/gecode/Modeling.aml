(*
 * Author:
 *   Gabor Szokoli <szokoli@ps.uni-sb.de>
 *   Dominik Brill <brill@ps.uni-sb.de>
 *
 * Copyright:
 *   Gabor Szokoli, 2003, 2004
 *   Dominik Brill, 2006
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure FD       from "FD"
import structure Space    from "Space"
import signature MODELING from "MODELING-sig"

structure Modeling : MODELING
          where type space = Space.space
	  where type intvar = FD.intvar
	  where type boolvar = FD.boolvar
	  where type conlevel = FD.conlevel =
struct

    type space = Space.space
    type intvar = FD.intvar
    type boolvar = FD.boolvar
	
    datatype conlevel = 
	BND | DEF | DOM | VAL


    infix  7  `*
    infix  6  `+ `-
    infix  5  `#
    infix  4  `= `<> `> `>= `< `<=
    infix  3  `<->
	
    datatype domain_element =
	`` of int
      | `# of int * int
	
    type domain = domain_element list
	
    datatype b_var_sel =
	B_DEGREE_MAX
      | B_DEGREE_MIN
      | B_MAX_MAX
      | B_MAX_MIN
      | B_MIN_MAX
      | B_MIN_MIN
      | B_NONE
      | B_REGRET_MAX_MAX
      | B_REGRET_MAX_MIN
      | B_REGRET_MIN_MAX
      | B_REGRET_MIN_MIN
      | B_SIZE_MAX
      | B_SIZE_MIN
	
    datatype b_val_sel =
	B_MAX
      | B_MED
      | B_MIN
      | B_SPLIT_MAX
      | B_SPLIT_MIN
	
    datatype term =
	FD of intvar
      | `  of int 
      | `+ of term * term
      | `- of term * term
      | `* of term * term
      | SUMV of intvar vector
	
    datatype rel =
	`<   of term * term
      | `<=  of term * term
      | `=   of term * term
      | `<>  of term * term
      | `>=  of term * term
      | `>   of term * term
    (*  | `<-> of rel * boolvar *)

    (*Bool stuff*)
    (*Somebody help me with priorities please!*)
    infix  3  `->
    infix  3  `<-
    infix  3  `==
    infix  3  `&
    infix  3  `|
    infix  3  XOR
	
    datatype b_term = 
	BV of boolvar
      | BC of bool
      | HOLDS of rel
      | `-> of b_term * b_term
      | `<- of b_term * b_term
      | `== of b_term * b_term
      | `! of b_term
      | `& of b_term * b_term
      | `| of b_term * b_term
      | XOR of b_term * b_term

    fun fdterm2varVect (` _) = #[]
      | fdterm2varVect (FD v) = #[v]
      | fdterm2varVect (SUMV l) = l
      | fdterm2varVect (op `+(t1,t2)) =
	Vector.concat[fdterm2varVect t1,fdterm2varVect t2]
      | fdterm2varVect (op `-(t1,t2)) =
	Vector.concat[fdterm2varVect t1,fdterm2varVect t2]
      | fdterm2varVect (op `*(t1,t2)) =
	Vector.concat[fdterm2varVect t1,fdterm2varVect t2]

    fun boolterm2boolvarVect(BC _) = #[]
      | boolterm2boolvarVect(HOLDS _) = #[]
      | boolterm2boolvarVect(BV v) = #[v]
      | boolterm2boolvarVect(`!(t)) = boolterm2boolvarVect t
      | boolterm2boolvarVect(op`==(t1,t2)) =
	Vector.concat [boolterm2boolvarVect t1,boolterm2boolvarVect t2]
      | boolterm2boolvarVect(op`&(t1,t2)) = boolterm2boolvarVect(op`==(t1,t2))
      | boolterm2boolvarVect(op`|(t1,t2)) = boolterm2boolvarVect(op`==(t1,t2))
      | boolterm2boolvarVect(op XOR(t1,t2)) =
	boolterm2boolvarVect(op`==(t1,t2))
      | boolterm2boolvarVect(op`->(t1,t2)) = boolterm2boolvarVect(op`==(t1,t2))
      | boolterm2boolvarVect(op`<-(t1,t2)) = boolterm2boolvarVect(op`==(t1,t2))


    exception NoWay
    (*FD stuff*)

    fun domain_elementConverter (``c) = (c,c)
      | domain_elementConverter (op`#(a,b)) = 
	if a=b then (a,a)
	else if a < b then (a,b) else (b,a)  
	    

    fun fdterm (s,d)= 
	let
	    val fdd = Vector.fromList(List.map domain_elementConverter d)
	in
	    (case fdd of 
		 #[(i,j)] if (i=j) =>  `i
	       | x                 => FD (FD.intvar(s,x))
	    )
	end		
 
    fun fdtermVec (s,n,d)= 
	let
	    val fdd = Vector.fromList(List.map domain_elementConverter d)
	in
	    (case fdd of 
		 #[(i,j)] if (i=j) => Vector.tabulate (n, (fn q => `i))
	       | x                 => Vector.map (fn v =>FD(v))
		                      (FD.intvarVec(s,n,x))
	    )
	end

	

    fun isProduct (FD _) = true
      | isProduct (` _) = true
      | isProduct (SUMV _) = true
      | isProduct (op`*(a,b)) = (isProduct a) andalso (isProduct b)
      | isProduct _ = false

    (*perform multiplication on (a+b)*c*)
    fun termMul (a,b, c) =
	op`+(op`*(a,c),op`*(b,c))
		

    (*get rid of all a-b terms: a+(~1*b)  *)	
    fun unMinus (op`-(a,b)) = op`+(unMinus a, op`*(`(~1),unMinus b))
      | unMinus (op`+(a,b)) = op`+(unMinus a,unMinus b)
      | unMinus (op`*(a,b)) = op`*(unMinus a,unMinus b)
      | unMinus x=x 	
	

    (*re-order the binary term tree into sum of proucts 
      exploiting (a+b)c = ac+bc*)
    (*Not too smart, does O(n^2) isProduct checks: "Make it work" phase *)
    fun toDNF (op`*(op`+(a,b),c)) = 
	toDNF(termMul(a,b,c))
      | toDNF (op`*(c,op`+(a,b))) = 
	toDNF(termMul(a,b,c))
      | toDNF (op`+(a,b)) = 
	op`+(toDNF(a),toDNF(b)) 
      | toDNF (op`*(a,b)) = 
	(case (isProduct a, isProduct b) of
	     (true,true) => op`*(a,b) |
		 (true,false) => toDNF (op`*(a,toDNF b)) |
		     (false,true) => toDNF (op`*(toDNF a,b)) |
			 (false,false) => toDNF (op`*(toDNF a, toDNF b))
			     )
      | toDNF a = a
	     
    exception ShouldBeDNF
    datatype leaf = VAR of FD.intvar | CONST of int
    type product = leaf list
    type sum = product list
	

    (*Binary term-tree into sum/product/leaf tree*)
    fun collapse1 (s,op`+(_,_)) = raise ShouldBeDNF
      | collapse1 (s,FD a) = [VAR a]
      | collapse1 (s,SUMV(l))=
	let 
	    val maxVal = (valOf (Int.maxInt))div 2
	    val tmp = FD.range(s,(1,maxVal))
	    val tmp2 = (~1, tmp) :: map (fn x' => (1, x')) (Vector.toList l)
	in
	    FD.linear(s,Vector.fromList(tmp2),FD.EQ,0,FD.DOM);
	    [VAR tmp]
	end
      | collapse1 (s,` a) = [CONST a]
      | collapse1 (s,op`*(a,b)) = (collapse1 (s,a))@(collapse1 (s,b))
      | collapse1 (s,op`-(_,_)) = raise NoWay

    fun collapse (s,op`+(a,b)) = (collapse (s,a))@(collapse (s,b))
      | collapse (s,FD a) = [[VAR a]]
      | collapse (s,SUMV(l)) =
	let 
	    val maxVal = (valOf (Int.maxInt))div 2
	    val tmp = FD.range(s,(1,maxVal))
	    val tmp2 = (~1, tmp) :: map (fn x' => (1, x')) (Vector.toList l)
	in
	    FD.linear(s,Vector.fromList(tmp2),FD.EQ,0,FD.DOM);
	    [[VAR tmp]]
	end
      | collapse (s,` a) = [[CONST a]]
      | collapse (s,op`*(a,b)) = [collapse1 (s,op`*(a,b))]
      | collapse (s,op`-(_,_)) = raise NoWay

    fun isConst (CONST _)= true
      | isConst (VAR _) = false

    fun mulConsts nil = 1
      | mulConsts ((CONST a)::t) = a * mulConsts t	
      | mulConsts _ = raise NoWay

    fun multiplyConstants leafList = 
	let
	    val(consts,vars)=List.partition isConst leafList
	    val constProd = mulConsts consts
	in
	    CONST(constProd)::vars
	end

    fun multiplyAllConstants a = List.map multiplyConstants a
	
    (*Filters 1 element constant lists*)
    fun isConstList [CONST _] = true
      | isConstList _ = false

    fun sumConsts nil = 0
      | sumConsts ([CONST a]::t) = a + sumConsts t
      | sumConsts _ = raise NoWay

    (*This only performs the addition of constants,
      should add same-order terms too*)

    fun sumAddables a =
	let 
	    val(consts, terms)= List.partition isConstList a
	    val constSum = sumConsts consts
	in
	    [CONST(constSum)]::terms
	end
	
    fun constsNTerms a =
	let 
	    val(consts, terms)= List.partition isConstList a
	    val constSum = sumConsts consts
	in
	    (constSum,terms)
	end
		
    fun createLinearElement [CONST c, VAR v] = (c,v)
      | createLinearElement _ = raise NoWay
    fun createLinearList s = Vector.fromList (List.map createLinearElement s)

    fun post''(s, a, b, rel,cl,linear) =	   
	let
	    val a' = sumAddables (multiplyAllConstants
				  (collapse(s,toDNF(unMinus(op`-(a,b))))))
	    val (b'' ,a'') = constsNTerms a'
		
	    val (lin,notlin)=
		List.partition (fn x => List.length x < 3)  a''
	    fun help [] start endl =(start,endl)
	      | help((CONST x)::xs)start endl = help xs(x*start)endl
	      | help((VAR x)::xs)start endl = help xs start(x::endl)
	    val maxV = (valOf (Int.maxInt))div 2
	in
	    (*Special cases should be detected for rel and relI*)
	    (*Then instead of linear only, the full range of FD would
	      be needed as an argument*)
	    if ((List.length notlin)= 0) then 		
		FD.linear(s, createLinearList a'', rel, (~1)*b'',cl)
	    else		
		let 
		    val a3 = List.map(fn l =>
			     let
				 val(const,list)= help l 1 nil
				 fun newvar ([])start = start	
				   | newvar (x::xs) start =
				      let
					  val tmp = FD.range(s,(~100000,maxV))
				      in
					  newvar xs (FD.mult(s,start,x,tmp,cl);
						     tmp)
				      end
			     in
				 (const,newvar (List.tl list) (List.hd list))
			     end) notlin
		    val linearvector =
			Vector.concat([createLinearList lin,
				       Vector.fromList(a3)])
		in
		    FD.linear(s,linearvector,rel, (~1)*b'',cl)
		end

	end   

    fun post' (s, op`<(a, b),e,l)   = post''(s, a, b, FD.LE,e,l)
      | post' (s, op`<=(a, b),e,l)  = post''(s, a, b, FD.LQ,e,l)
      | post' (s, op`=(a, b),e,l)   = post''(s, a, b, FD.EQ,e,l)
      | post' (s, op`<>(a, b),e,l)  = post''(s, a, b, FD.NQ,e,l)
      | post' (s, op`>=(a, b),e,l)  = post''(s, a, b, FD.GQ,e,l)
      | post' (s, op`>(a, b),e,l)   = post''(s, a, b, FD.GR,e,l)	

    fun post(s,r,e) = post'(s,r,e,FD.linear)	
	
    fun postReified(s,r,c,e) =
	post'(s,r,e,(fn(s',a',r',b',e')=>FD.Reified.linear(s',a',r',b',c,e')))
	
    val fdToFD = Vector.map (fn FD fd => fd | _ => raise Match)
    fun distinct (s,v,cl) = FD.distinct (s,fdToFD v,cl)
    fun branch (s,v,varsel,valsel) = FD.branch (s,fdToFD v,varsel,valsel)
	
    (*boolean stuff*)

    fun boolterm s = BV(FD.boolvar s)

    fun booltermVec(s,n) = Vector.map (fn b=>BV b) (FD.boolvarVec (s,n))

    (*To And-Or-Not form, get rid of all other fancy stuff*)
    (*Make it look as CNFish as possible to avoid work later*)
    fun toAON(BC(c)) = BC(c)
      | toAON(BV(v)) = BV(v)
      | toAON(HOLDS(r)) = HOLDS(r)
      | toAON(`!(t)) = `!(toAON(t))
      | toAON(op`&(t1,t2)) = op`&(toAON(t1),toAON(t2))
      | toAON(op`|(t1,t2)) = op`|(toAON(t1),toAON(t2))
      | toAON(op`->(t1,t2)) = op`|(`!(toAON(t1)),toAON(t2))
      | toAON(op`<-(t2,t1)) = toAON(op`->(t1,t2))
      | toAON(op`==(t1,t2)) = let 
				  val t1' = toAON(t1)
				  val t2' = toAON(t2)
			      in
				  op`&(op`|(t1',`!(t2')), op`|(`!(t1'),t2'))
			      end
      | toAON(op XOR(t1,t2)) = toAON(op`==(t1,`!(t2)))
 	
    (*Push negations down to atoms, assumes AON input*)
    fun  pushNeg(`!(`!(t))) = pushNeg(t)
      | pushNeg(`!(BC true)) = BC false
      | pushNeg(`!(BC false)) = BC true
      | pushNeg(`!(op`&(t1,t2))) = op`|(pushNeg(`!(t1)),pushNeg(`!(t2)))
      | pushNeg(`!(op`|(t1,t2))) = op`&(pushNeg(`!(t1)),pushNeg(`!(t2)))
      | pushNeg(op`&(t1,t2)) = op`&(pushNeg(t1),pushNeg(t2))
      | pushNeg(op`|(t1,t2)) = op`|(pushNeg(t1),pushNeg(t2))
      | pushNeg(t) = t

    (*Use distributivity of OR over AND mercilessly until CNF*)
    (*Pretty dumb, just you wait Henry Higgins!*) 	
    fun distrib(op`|(op`&(a,b),c)) = (distrib(a`|c))`& (distrib(b`|c))
      | distrib(op`|(c,op`&(a,b))) = distrib(op`|(op`&(a,b),c))
      | distrib(op`&(a,b)) = op`& (distrib(a), distrib(b))
      | distrib(op`|(t1,t2))= 
	let
	    val d1 = distrib t1
	    val d2 = distrib t2
	in
	    case (d1,d2) of
		(op`&(_,_),_)=>distrib(d1 `| d2)
	      |( _ ,op`&(_,_))=>distrib(d2 `| d1)
	      |(_,_)=>(d1 `| d2)
	end 
      | distrib(t)=t
	
	
    fun getOrList(op`&(t1,t2)) = raise NoWay
      | getOrList(op`|(t1,t2)) = (getOrList t1)@(getOrList t2)
      | getOrList(t)= [t]
	
    (*Create list of list of (possibly negated)ground *)
    fun getAndList(op`&(t1,t2))= (getAndList t1)@(getAndList t2)
      | getAndList(t)=[getOrList t]
	
	
    fun notTrue(BC true) = false
      | notTrue(_) = true
    fun notFalse(BC false) = false
	|notFalse(_)=true
	
    fun hasNoSameNegated nil = true
      | hasNoSameNegated((`!h)::t) =
	(not (List.contains t h)) andalso hasNoSameNegated t
      | hasNoSameNegated(h::t) =
	(not (List.contains t (`! h))) andalso hasNoSameNegated t
	
    (*Gets rid of clauses with constant true BV true*)
    fun dropTrue(cnf) = List.filter (List.all notTrue) cnf
    (*Gets rid of clauses with dynamic true (b|!b)*)
    fun dropDynTrue(cnf) = List.filter hasNoSameNegated cnf
    (*Gets rid of constant false terms in clauses (empty clause means fail)*)
    fun dropFalse(cnf) = List.map (List.filter notFalse) cnf
	
    fun consolidateCNF(cnf)= dropDynTrue(dropFalse(dropTrue(cnf)))
	
    (*Should use a cache for negating variables!*)
    fun groundToVar s (BV(v)) = v
      | groundToVar s (`!(BV (v))) = 
	let
	    val nv = FD.boolvar(s)
	    val _ = FD.nega(s,v,nv)
	in
	    nv
	end
      | groundToVar s (HOLDS(r)) = 
	let
	    val v = FD.boolvar(s)
	    val _ = postReified(s,r,v,FD.DOM)
	in
	    v
	end
      | groundToVar s (`!(HOLDS(r))) =
	groundToVar s (`!(BV (groundToVar s (HOLDS(r)))))
      | groundToVar _ _ = raise NoWay
	
    (*strip the variable-only cnf listlist from
      b_term encapsulation, perform reification*)
    fun stripCNF(s,cnf) = List.map (List.map (groundToVar s)) cnf
		
    fun getTrue(s)=
	let
	    val b=FD.boolvar(s) 
	in
	    FD.relI(s, FD.boolvar2intvar b, FD.EQ, 1);
	    b
	end

    (*Rough version, especially if failed spaces allow post-mortem
      introspection*)
    fun fail(s) =
	let
	    val b = FD.intvar(s,#[(42,42)])
	in
	    FD.relI(s,b,FD.EQ,57)
	end

    fun postClause (s,t) nil = fail s
      | postClause (s,t) clause = FD.disjV(s, Vector.fromList clause, t) 
	
    fun postCNF(s,cnf) = 
	let
	    val t=getTrue(s)
	in
	    List.app (postClause (s,t)) cnf
	end
    
    fun postTrue(s,t) = 
	postCNF(s,(stripCNF(s,
	              consolidateCNF(getAndList(distrib(pushNeg(toAON(t))))))))
	
end
