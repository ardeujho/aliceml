(*
 * Authors:
 *   Gabor Szokoli <szokoli@ps.uni-sb.de>
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Gabor Szokoli and Guido Tack, 2004
 *
 *  See the file "../LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure FS        from "x-alice:/lib/gecode/FS"
import structure Print     from "x-alice:/lib/system/Print"

import structure GecodeTest from "GecodeTest"

type t = int -> int list -> (string * (unit -> unit) list)
type tn = int -> int -> int list -> (string * (unit -> unit) list)
structure TestSuite :
  sig
      val union : t
      val unionN : tn
      val inter : t
      val interN : tn
      val subset : t
      val noSubset : t
      val superOfInter : t
      val subOfUnion : t
      val diff : t
      val disjoint : t
      val distinct : t
      val partition : t
      val partitionN : tn
      val equals : t
      val convexHull : t
      val seqU : tn
  end
  =
  struct

	fun range2II (i1,i2) = 
	let
		val _= assert (i1 >= 0);
		val diff = i2 - i1
		val ones = IntInf.<<(IntInf.fromInt 2, Word.fromInt diff)
                           - IntInf.fromInt 1
	in
	    IntInf.<< (ones, Word.fromInt i1)
	end
	
	(*Eta forewa! :-) *)
	val vdom2II = Vector.foldl ( fn (r,a)=> IntInf.orb ((range2II r),a) )
                                   (IntInf.fromInt 0)

	fun vBoolTern v1 (a,b,c) space =
	let
            val a = vdom2II ( FS.Reflect.lowerBound (space,a))
            val b = vdom2II ( FS.Reflect.lowerBound (space,b))
            val c = vdom2II ( FS.Reflect.lowerBound (space,c))
	in
		v1 (a,b,c)
	end
	fun vBoolBin v1 (a,b) space =
	let
            val a = vdom2II ( FS.Reflect.lowerBound (space,a))
            val b = vdom2II ( FS.Reflect.lowerBound (space,b))
	in
		v1 (a,b)
	end	
	fun vBoolN v1 (x, a) space =
	let 
            val a = vdom2II ( FS.Reflect.lowerBound (space,a))
            val x = Vector.map
                        (fn xi=> vdom2II ( FS.Reflect.lowerBound (space,xi))) x
        in
    	    v1(x, a)
        end
                                  
        (*
         * Verifier functions
         *
         *)
         

    fun vSeq x space =
    let
    	val xDom = Vector.map ( fn xi=>FS.Reflect.lowerBound (space, xi) ) x  
    in
    	Vector.isSorted (fn (x1,x2) =>     	
    		if Pair.snd (Vector.sub (x1,0)) < Pair.fst (Vector.sub (x2,(Vector.length x2)-1) )
    		then LESS 
    		else if Pair.snd (Vector.sub (x2,0)) < Pair.fst (Vector.sub (x1,(Vector.length x1)-1) )
    		then GREATER
    		else raise Unordered
    	) xDom
    end
	
	fun vUnion1 (a,b,c) = (IntInf.orb(b,c) = a)
	
	fun vUnionN1 (x, u) = 
		(Vector.foldl IntInf.orb (IntInf.fromInt 0) x) = u
	
	fun vInter1 (a,b,c) = (IntInf.andb(b,c) = a)

	fun vInterN1 (x, i) = 
		(Vector.foldl IntInf.andb (Vector.sub (x,0)) x) = i

	(*These two expect lists instead of vectors!*)
	fun vDisjointN2 (_, nil) = true
	| vDisjointN2 (u, h::t) =
	  (IntInf.andb (u,h) = IntInf.fromInt 0)
          andalso vDisjointN2( IntInf.orb (u,h),t)

	fun vPartitionN2 (p,u, nil) = (p = u)
	| vPartitionN2 (p,u, h::t) =
	  (IntInf.andb (u,h) = IntInf.fromInt 0)
          andalso vPartitionN2(p, IntInf.orb(u,h), t)

        fun vPartitionN1 (x, i) =
            vPartitionN2(i, IntInf.fromInt 0, Vector.toList x)

	fun vSubSet1 (a,b) =
		IntInf.andb (IntInf.xorb(a,b),a)= IntInf.fromInt 0
		
	
	fun vNoSubSet1 (root2 as (a,b))  = 
            if not (vSubSet1 root2) then true else
            (print "root: (";
             print (IntInf.fmt StringCvt.BIN a);
             print ",";
             print (IntInf.fmt StringCvt.BIN b);
             print ")\n"; false)
		
	fun vSuperOfInt1 (a,b,c) =
		vSubSet1(IntInf.andb(b,c),a)
	fun vSubOfUni1 (a,b,c) =
		vSubSet1(a,IntInf.orb(b,c))
	
	fun vDiff1 (a,b,c) = IntInf.andb (IntInf.xorb(c,b),b) = a
	fun vDisjoint1 (a,b) = IntInf.andb(a,b) = IntInf.fromInt 0
	fun vDistinct1 (a,b) = IntInf.xorb(a,b) > IntInf.fromInt 0
	fun vPartition1 (a,b,c) = (vDisjoint1 (b,c) ) andalso (vUnion1 (a,b,c))
	
	fun vEquals1 (a,b) = a=b
	
	fun vSeqU (x,a) space = 
(*		if (vSeq x space) andalso ((vBoolN vPartitionN1) (x,a) space) then true else false *)
	let
		val b1 = (vSeq x space)
		val b2 = ((vBoolN vPartitionN1) (x,a) space)
		val _ = if (not b1) then (print "Not a sequence!") else ()
		val _ = if (not b2) then (print "Not union!") else ()
	in
		if b1 andalso b2 then true else false
	end
	
	fun vConvex a space = 
	let
	    val ad = FS.Reflect.lowerBound (space,a)
	in
	    Vector.length ad = 1
	end
	
	fun vSameMinMax (a,b) space =
	let
	    val a = FS.Reflect.lowerBound (space,a)
	    val b = FS.Reflect.lowerBound (space,b)	    
	in
	    Pair.fst (Vector.sub (a,0)) = Pair.fst (Vector.sub (b,0))
            andalso
	    Pair.snd (Vector.sub (a,(Vector.length a)-1)) = 
	    Pair.snd (Vector.sub (b,(Vector.length b)-1)) 
	end
	
	fun vConvexHull (a,b) space =
            if not (vConvex a space) then
                (print "not Convex!\n";
                 Print.printVal (FS.Reflect.lowerBound (space,a));
                 print "\n";
                 false)
            else
                if not ( vBoolBin vSubSet1 (b,a) space )
                then
                (print "no subset!\n";
                 Print.printVal (FS.Reflect.lowerBound (space,a));
                 print "\n";
                 Print.printVal (FS.Reflect.lowerBound (space,b));
                 print "\n";
                 false)
                else if not ( vSameMinMax (a,b) space )
                then (print "no tight hull!\n";
	              Print.printVal (FS.Reflect.lowerBound (space,a));
	              print "\n";
    	              Print.printVal (FS.Reflect.lowerBound (space,b));
    	              print "\n";
        	      false)
		else true

	
		fun vSelectSomething1 something (result, v, selector) =
		let
			val l=Vector.toList v
			val l2 = List.filteri (
				fn (i,_)=>IntInf.andb(
					IntInf.<<(IntInf.fromInt 1, Word.fromInt i),selector
					) > IntInf.fromInt 0
				) l
			val l3 = List.map Pair.snd l2
			val v2 = Vector.fromList l3
		in
			something(v2,result)
		end
	
		val vSelectUnion1 = vSelectSomething1 vUnionN1
		val vSelectInter1 = vSelectSomething1 vInterN1
		
		
		(*
		 *Counters for IntInf based verifiers
		 *
		 *)
		 
		 	fun b2II b = if b then IntInf.fromInt 1 else IntInf.fromInt 0
			
			val one = IntInf.fromInt 1
			val zero = IntInf.fromInt 0
			
			fun countTernaryVerifier1 (max, (a,b,c), v, acc) =
			let
				val acc = (b2II (v(a,b,c))) + acc
			in
				if (a < max) then countTernaryVerifier1 (max, (a+one,b,c), v, acc)
				else if (b < max) then countTernaryVerifier1 (max, (zero,b+one,c), v, acc)
					else if (c < max) then countTernaryVerifier1 (max, (zero,zero,c+one), v, acc)			
						else acc
			end
		
			fun countTernaryVerifier(max,v) = countTernaryVerifier1(IntInf.<<(one, Word.fromInt max), (zero,zero,zero), v, zero)
		
			fun countBinaryVerifier1 (max, (a,b), v, acc) =
			let
				val acc = (b2II (v(a,b))) + acc
			in
				if (a < max) then countBinaryVerifier1 (max, (a+one,b), v, acc)
				else if (b < max) then countBinaryVerifier1 (max, (zero,b+one), v, acc)
					else acc
			end
		
			fun countBinaryVerifier(max,v) = countBinaryVerifier1(IntInf.<<(one, Word.fromInt max), (zero,zero), v, zero)
		 
		 	fun getInt(start,length,v)=
		 		let
		 			val shiftDown = IntInf.~>>(v,Word.fromInt start)
		 		in
		 			IntInf.andb(shiftDown, IntInf.<<(one,Word.fromInt length))
		 		end
		 	
		 	fun sliceInt(max,n,v)=
		 		Vector.tabulate (n,fn i=>getInt(i*max,max,v))
		 	
		 	fun countNaryOne1(max, n, v, x, y, acc)=
	 			let
	 				val acc = b2II(v(y,sliceInt(max,n,x))) +acc
	 			in
	 				if (x < IntInf.<<(one, Word.fromInt(max*n))) then 
	 					countNaryOne1(max, n, v, x+one, y, acc)
					else if (y < IntInf.<<(one,Word.fromInt(max))) then 
							countNaryOne1(max, n, v, zero, y+one, acc)
				 		else acc		 				
	 			end


		 	fun countNaryOne(max, n, v)= countNaryOne1(max, n, v, zero, zero, zero)


        (*
         * Test cases
         *
         *)

        fun union max seeds =
            GecodeTest.ternarySet ("Union",max,seeds,
                                   FS.union,
                                   vBoolTern vUnion1)

        fun unionN arity max seeds =
            GecodeTest.narySet ("UnionN",max,seeds,arity,
                                FS.unionN,
                                vBoolN vUnionN1)

        fun inter max seeds =
            GecodeTest.ternarySet ("Intersection",max,seeds,
                                   FS.intersect,
                                   vBoolTern vInter1)

        fun interN arity max seeds =
            GecodeTest.narySet ("IntersectionN",max,seeds,arity,
                                FS.intersectN,
                                vBoolN vInterN1)

        fun subset max seeds =
            GecodeTest.binarySet ("Subset",max,seeds,
                                   FS.subset,
                                   vBoolBin vSubSet1)
        fun noSubset max seeds =
            GecodeTest.binarySet ("NoSubset",max,seeds,
                                   FS.noSubset,
                                   vBoolBin vNoSubSet1)
        fun superOfInter max seeds =
            GecodeTest.ternarySet ("SuperOfInter",max,seeds,
                                   FS.superOfInter,
                                   vBoolTern vSuperOfInt1)
        fun subOfUnion max seeds =
            GecodeTest.ternarySet ("SubOfUnion",max,seeds,
                                   FS.subOfUnion,
                                   vBoolTern vSubOfUni1)
        fun diff max seeds =
            GecodeTest.ternarySet ("Diff",max,seeds,
                                   FS.difference,
                                   vBoolTern vDiff1)
        fun disjoint max seeds =
            GecodeTest.binarySet ("Disjoint",max,seeds,
                                  FS.disjoint,
                                  vBoolBin vDisjoint1)
        fun distinct max seeds =
            GecodeTest.binarySet ("Distinct",max,seeds,
                                  FS.distinct,
                                  vBoolBin vDistinct1)
        fun partition max seeds =
            GecodeTest.ternarySet ("Partition",max,seeds,
                                   FS.partition,
                                   vBoolTern vPartition1)
        fun partitionN arity max seeds =
            GecodeTest.narySet ("PartitionN",max,seeds,arity,
                                FS.partitionN,
                                vBoolN vPartitionN1)

        fun seqU arity max seeds =
            GecodeTest.narySet ("SeqU",max,seeds,arity,
                                FS.seqU,
                                vSeqU)
                              
        fun equals max seeds =
            GecodeTest.binarySet ("Equals",max,seeds,
                                   FS.equals,
                                   vBoolBin vEquals1)
        fun convexHull max seeds =
            GecodeTest.binarySet ("ConvexHull",max,seeds,
                                   FS.convexHull,
                                   vConvexHull)
  end
