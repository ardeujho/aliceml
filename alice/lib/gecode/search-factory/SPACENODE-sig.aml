(*
 * Author:
 *   Didier Le Botlan <botlan@ps.uni-sb.de>
 *
 * Copyright:
 *   Didier Le Botlan, 2004
 *
 *  See the file "../LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Space from "x-alice:/lib/gecode/Space"
import structure Path  from "Path"

signature SPACENODE =
sig
  (* Totally thread-safe. *)

  exception Child

  type space_node
  type t = space_node
  type solution  (* Only needed for Branch & Bound. Otherwise, can be unit. *)

  (* Returns a space_node corresponding to the root space. *)
  val root : space_node
  val fromPath : solution Path.t -> space_node

  (* newChild (mom, i)
   * Creates a new space_node as child of node mom with alternative number i.
   * Raises Child if this alternative does not exist. *)
  val newChild : space_node * int -> space_node

  (* getSpace node
   * returns a clone of the computation space associated with this node. *)
  val getSpace : space_node -> Space.space

  (* Like Space.status *)
  val status : space_node -> Space.status

  (* Returns the path corresponding to this node. *)
  val getPath : space_node -> solution Path.t

  (* B&B : Signals a solution found elsewhere (e.g. distributed search) *)
  val addSolution : solution -> unit

end

