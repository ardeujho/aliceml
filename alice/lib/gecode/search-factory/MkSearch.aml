(*
 * Author:
 *   Didier Le Botlan <botlan@ps.uni-sb.de>
 *
 * Copyright:
 *   Didier Le Botlan, 2004
 *
 *  See the file "../LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Space       from "x-alice:/lib/gecode/Space"
import structure FD          from "x-alice:/lib/gecode/FD"
import structure Path        from "Path"
import signature SEARCH      from "SEARCH-sig"
import signature PROBLEM     from "PROBLEM-sig"
import structure Debug       from "Debug"
import functor   MkTreeNode  from "MkTreeNode"

functor MkSearch (Problem : PROBLEM where type space = Space.space) 
  :> SEARCH where type solution = Problem.solution 
            where type space    = Space.space =
struct

  open Debug

  type solution = Problem.solution
  type space    = Space.space

  structure TreeNode = MkTreeNode Problem

  fun print msg = dbPrint (dbSearch, TreeNode.mask, msg)
  fun printPath n = Path.toString (TreeNode.getPath n) ^ "\n"

  (* Sleep for t milliseconds *)        
  fun sleepms t = Thread.sleep (Time.fromMilliseconds (Int.toLarge t))

  (* Be slow for the demo ! *)
  val slow = not(Word31.compare (dbZero, TreeNode.mask && dbSlow) = EQUAL)
  val _ = if slow
          then print "Warning: The search is slow because dbSlow is set.\n"
          else ()

  exception NotAssigned

  datatype status = Stopped | Running | StopIt of unit Promise.promise
  val status = ref Stopped

  fun isFinished () = !status = Stopped

  (* Atomically update the given reference.
   * The argument f is such that f(old) returns (new, res)
   * Where 'new' is the new list and 'res' is returned as a result. *)
  fun updateRef r f =
    let
      val p = Promise.promise ()
      val old = Ref.exchange (r, Promise.future p)
      val (new, res) = f old
    in
      Promise.fulfill (p, new) ;
      res
    end

  fun stopSearch () =
    (Future.await (updateRef status
                        (fn st => case st of
                                    Stopped => (st, ())
                                  | StopIt p => (st, Promise.future p)
                                  | Running => 
                                      let val p = Promise.promise ()
                                      in  (StopIt p, Promise.future p) end)) ;
     print "Search stopped.\n")

  val root = TreeNode.root
  val unexplored = ref [root]
  fun updateNodes f = updateRef unexplored f

  fun init path =
    if updateRef status (fn st => if st <> Stopped then (st, false)
                                  else
                                    (print "Search : new root path\n" ;
                                     unexplored := [TreeNode.fromPath path] ;
                                     (st, true)))
      then ()
    else raise (Fail "MkSearch.init")

  fun getNode () = updateNodes (fn [] => ([], NONE) | x :: xs => (xs, SOME x))
  fun addNode nd = updateNodes (fn l => (nd :: l, ()))
 
  fun nextStep () =
    case updateRef status
      (fn StopIt p => (Promise.fulfill (p,()) ; (Stopped, NONE))
        | (Stopped | Running ) =>
                    let val anode = getNode ()
                    in (case anode of NONE => Stopped | _ => Running, anode) end)
      of
        NONE   => NONE
      | SOME n =>
          case TreeNode.status n of
            Space.FAILED => (print ("A failure at path " ^ (printPath n));NONE)
          | Space.SOLVED => (print ("A solution at path " ^ (printPath n));
                             SOME (TreeNode.getSpace n, TreeNode.getPath n))
          | Space.BRANCH desc =>
              let
                val _ = print ("A branch at path " ^ (printPath n))
                val left = TreeNode.getLeft n
                val right = TreeNode.getRight n
              in
                addNode right ;
                addNode left ;
                NONE
              end
           
  fun nextSolved () =
    case nextStep () of
      NONE => if isFinished ()
                then (print "Search finished.\n" ; NONE)
                else (if slow then sleepms 550 else () ; nextSolved ())
    | s    => s      
 
  (* This is not called often. It does not have to be efficient. *)
  fun getLast (accu, []) = assert false
    | getLast (accu, x :: []) = (List.rev accu, SOME (TreeNode.getPath x))
    | getLast (accu, x :: xs) = getLast (x :: accu, xs)

  fun getUnexploredPath () =
      (print "Find some unexplored path.\n" ;
       updateNodes
	   (fn l => case l of ([] | [_]) => (l, NONE) | _ => getLast ([], l)))

  fun safeRead space = Problem.readSolution space
    handle FD.NotAssigned => raise NotAssigned
  (* FS.NotAssigned does not exist, yet... *)

  fun getOneSolution () = Option.map (Pair.mapFst safeRead) (nextSolved ())

  fun getAll accu = case nextSolved () of
			NONE => accu
		      | SOME (sp,_) => getAll (safeRead sp :: accu)

  fun getAllSolutions () = getAll []

  fun betterThan sol = TreeNode.addSolution sol
    
end
