(*
 * Author:
 *   Didier Le Botlan <botlan@ps.uni-sb.de>
 *
 * Copyright:
 *   Didier Le Botlan, 2004
 *
 *  See the file "../LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Debug     from "Debug"
import signature PROBLEM   from "PROBLEM-sig"
import signature SPACENODE from "SPACENODE-sig"
import structure Space     from "x-alice:/lib/gecode/Space"
import structure FD        from "x-alice:/lib/gecode/FD"
import structure Path      from "Path"

functor MkSpaceNode (Problem:PROBLEM where type space = Space.space)
  :> SPACENODE where type solution = Problem.solution =
struct

  open Debug

  type solution = Problem.solution
  exception Child

  datatype space_node = Node of node_rep
  withtype node_rep =
    {mom    : space_node ,  (* Ancestor *)
     altNum : int ,         (* Which alternative, ~1 means root node *)
     space  : Space.space option ref , (* Working space *)
     copy   : Space.space option ref ,
     status : Space.status ,
     bestId : int ,  (* ID number of the best solution known at this node. *)
     best   : solution option , (* Solution applied to this node. *)
     depth  : int }

  val undefined = lazy assert false

  val globalBest = ref undefined
  val globalBestId = ref 0  (* ID Number of the current best solution *)

  (* Invariants :
   *   - A new value put in globalBest is always better than the previous one.
   *   - globalBestId is increased iff globalBest is updated.
   *)

  type t = space_node

  fun dbPrint (mask, msg) = Debug.dbPrint (mask, Problem.mask, msg)

  fun cloneSpace space = ((*assert Space.status space <> Space.FAILED ;*)
			  Space.clone space)

  val root =
    let 
      val status = Space.status Problem.root
      val spaceref = ref (SOME (cloneSpace Problem.root))
      val copyref = ref (SOME Problem.root)
    in
    Node {mom    = undefined ,
          altNum = ~1 ,
          space  = spaceref ,
          copy   = copyref ,
          status = status ,
          bestId = !globalBestId ,
          best   = NONE ,
          depth  = 0 }
    end    

  fun status    (Node node) = #status node
  fun depth     (Node node) = #depth  node
  fun getBestId (Node node) = #bestId node
  fun getCopy   (Node node) = #copy   node

  val bab = Problem.bab
  val bound = Problem.bound

  (* Update globalBest and globalBestId if
   *  'condf currentBest currentId' is true *)
  fun setBestIfCond (sol,condf) =
    let
      val p = Promise.promise ()
      val currentBest = Ref.exchange (globalBest, Promise.future p)
      val _           = if !globalBestId = 0 then () (* No need to wait *)
                        else ignore(Future.await currentBest)
      val currentId   = !globalBestId
    in
      if currentId = 0 orelse condf (currentBest, currentId)
        then
          (globalBestId := currentId + 1 ;
           Promise.fulfill (p, sol) ;
           dbPrint (dbBaB, "Updated best solution.\n") ;
           true)
        else (Promise.fulfill (p, currentBest); false)
    end
    
  (* Compare the solution in the given SOLVED space
   * with the current best one. *)
  fun hardCompare (currentBest, space) =
    let val testSpace = cloneSpace space 
    in
      (*assert (Space.status testSpace = Space.SOLVED) ;*)
      bound (testSpace, currentBest) ;
      case Space.status testSpace of
        Space.SOLVED => true (* Better. *)
      | Space.FAILED => false
      | _ => assert false
    end

  (* Tail-recursive getPath *)
  fun getTailPath (Node node, tail) =
    let
      val altNum = #altNum node
      val newtail = case #best node of   (* May trigger computation of lazy *)
                      NONE   => (altNum, NONE) :: tail
                    | SOME b => (altNum, SOME b) :: tail
    in
      if altNum = ~1 then tail
      else getTailPath (#mom node, newtail)
    end

  fun getPath node = getTailPath (node, [])

  fun updateCloneRef (r,v) =
    let val clone = cloneSpace v
    in r := SOME v ; clone end
   
  (* Recomputes the space of this node. *)
  fun recompute node =
    let
      val mom = #mom node
      val space = getWorkingSpace mom
    in
      dbPrint(dbRecomp,
              "Recomputing node at PATH " ^ 
              (Path.toString (getPath (Node node))) ^ "\n");
      case status mom of
        Space.BRANCH (_,descr) =>
          (Space.commit (space, descr, #altNum node) ;
           
           (* Branch and Bound. *)
           (case #best node of
              NONE     => space
            | SOME sol => (bound (space, sol) ; space)))

      | _ => assert false
    end

  and getWorkingSpace (Node node) =
    let
      val wspace = Ref.exchange (#space node, NONE)
      val rcopy  = #copy node
    in
      case (wspace, !rcopy) of 
        (NONE  , SOME s) => cloneSpace s  (* clone copy   *)
      | (NONE  , NONE  ) => recompute node (* recomputation *)
      | (SOME s, NONE  ) if (Problem.copyq (#depth node)) =>
	  (dbPrint (dbClone, "CLONE at path " ^ 
                           (Path.toString (getPath (Node node))) ^ "\n") ;
           updateCloneRef (rcopy, s))
      | (SOME s, acopy ) => s              (* donate space *)
    end

  fun getSpace (Node node) = 
    let
      val _ = #status node (* Avoid recomputation if this node is new *)
      val rcopy = #copy node
      val rspace = #space node
      val wspace = Ref.exchange (rspace, NONE)
    in
      case (!rcopy, wspace) of
        (SOME s, _     ) => (rspace := wspace ; cloneSpace s)
      | (NONE  , SOME s) => updateCloneRef (rspace, s)
      | (NONE  , NONE  ) => updateCloneRef (rcopy, recompute node)
    end

  (* Return a pair (bestId, bestSol) that
   * is computed lazily when bestSol is requested,
   * so that it uses the up-to-date best solution.  *)
  fun getIdSol momNode =
    let
      val bestIdp = Promise.promise ()
      val momBestId = getBestId momNode
      val bestSol = lazy
        let
          (* Is there a best solution to apply? *)
          val currentBestId = !globalBestId
          val currentBest = !globalBest (* Harmless race condition *)        
          val _ = assert currentBestId >= momBestId
        in
          if currentBestId > momBestId
            then
              (Promise.fulfill (bestIdp, currentBestId) ;
               SOME currentBest)
            else
              (Promise.fulfill (bestIdp, momBestId) ;
               NONE)
        end
    in
      (Promise.future bestIdp,
       bestSol)
    end

  (* Create a new child *)
  fun newChild (node, i) =
    let
      val spaceRef = ref NONE        
      val descr = case status node of
                    Space.BRANCH (_,descr) => descr
                  | _ => raise Child

      val (newBestId, newBestSol) = if bab then getIdSol node else (0, NONE)
      val status = lazy
        let
          val space = getWorkingSpace node
          val _ = Space.commit (space, descr, i)
          val _ =
            (* If a new best solution is present, bound the node. *)
            case newBestSol of  (* May trigger computation of lazy value. *)
              NONE => ()
            | SOME best => bound (space, best)
                
          val status = Space.status space
        in
          (*assert(!spaceRef = NONE) ;*)
          spaceRef := SOME space ;

          (* When a solution is found, BOUND *)
          case status of Space.SOLVED  =>
            if bab then
	    let
              val solution = Problem.readSolution space
              (* This solution is not always better than previous solutions:
               * the current node might have been bound too early
               * (e.g. because of a call to getPath)
               * Hence, we have to check if this new solution is the best. *)
            in
            ignore(setBestIfCond (solution,
				  (fn (best, bestId) =>
				      newBestId = bestId
				      orelse hardCompare(best,space))))
            end
            handle FD.NotAssigned => ()
	    else ()
          | _ => () ;
          status  
        end
    in
      Node {mom    = node ,
            altNum = i ,
            space  = spaceRef ,
            copy   = ref NONE ,
            status = status,
            bestId = newBestId ,
            best   = newBestSol ,
            depth  = depth node + 1 }
    end

  (* Apply the path element to the given space *)
  fun applyPath space ((n, b), (parent, best)) =
    let 
      val _ = case Space.status space of
                Space.BRANCH (_, descr) => Space.commit (space, descr, n)
              | _ => raise Child

      val newBest = case b of
                      NONE => best
                    | SOME bb => (bound (space, bb); b)

      val newNode = Node {mom    = parent ,
                          altNum = n ,
                          space  = ref NONE ,
                          copy   = ref NONE ,
                          status = Space.status space,
                          bestId = 0 ,
                          best   = b ,
                          depth  = depth parent + 1}
    in
      (newNode, newBest)
    end
    
  fun fromPath path =
    let
      val space = getSpace root
      val (node, pbest) = List.foldl (applyPath space) (root, NONE) path
      val _ = case status node of
		  Space.BRANCH _ => getCopy node := SOME (cloneSpace space)
		| _ => ()
    in
      if bab then 
        case pbest of
          NONE => node
        | SOME sol =>
            if setBestIfCond (sol, fn (best, _) => Problem.compare (best, sol))
              then 
                let val Node rnode = node 
                in
                  Node {rnode where bestId = !globalBestId}
                end
            else node
      else node
    end

  fun addSolution sol =
    ignore(setBestIfCond (sol, fn (best, _) => Problem.compare (best, sol)))

end
