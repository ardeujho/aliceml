(*
 * Authors:
 *   Benedikt Grundmann <bgrund@ps.uni-sb.de>
 *
 * Copyright:
 *   Benedikt Grundmann, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

signature GEN =
sig
    type 'a test    = 'a -> unit
    type 'a gen	    = int -> 'a

    val randomize : unit -> unit
    (* executes Random.randomize *)

    val try: int -> 'a gen -> 'a test -> unit
    (* [try num gen test] executes test num times 
     * using gen to generate test data 
     *)

    (* Generators / Combinators *)
    val pair:	'a gen * 'b gen -> ('a * 'b) gen
    val triple: 'a gen * 'b gen * 'c gen -> ('a * 'b * 'c) gen
	
    val const:	'a -> 'a gen
    (* [const v] returns a generator which
     * always returns v
     *)

    val oneOf:	    'a gen list -> 'a gen
    val oneOfFreq:  (int * 'a gen) list -> 'a gen
    val filter:	    'a gen * ('a -> bool) -> 'a gen 
  
    val list:	     'a gen -> 'a list gen
    val option:	     'a gen -> 'a option gen
    val alt:	     'a gen * 'b gen -> ('a, 'b) alt gen
    val vector:	     'a gen -> 'a vector gen
    val word8Vector:    'a gen -> Word8Vector.vector gen
    val charVector:     'a gen -> CharVector.vector gen
    val wideCharVector: 'a gen -> WideCharVector.vector gen
    val vectorSlice: 'a gen -> 'a VectorSlice.slice gen
    val word8VectorSlice:    'a gen -> Word8VectorSlice.slice gen
    val charVectorSlice:     'a gen -> CharVectorSlice.slice gen
    val wideCharVectorSlice: 'a gen -> WideCharVectorSlice.slice gen
    val array:	     'a gen -> 'a array gen
    val word8Array:  'a gen -> Word8Array.array gen
    val charArray:   'a gen -> CharArray.array gen
    val wideCharArray: 'a gen -> WideCharArray.array gen
    val arraySlice:  'a gen -> 'a ArraySlice.slice gen
    val word8ArraySlice:    'a gen -> Word8ArraySlice.slice gen
    val charArraySlice:     'a gen -> CharArraySlice.slice gen
    val wideCharArraySlice: 'a gen -> WideCharArraySlice.slice gen
    val array2:      'a gen -> 'a Array2.array gen
    val refOf:	     'a gen -> 'a ref gen

    (* Standard generators *)
    val word:	    word gen
    val word8:      Word8.word gen
    val word32:     LargeWord.word gen
    val real:	    real gen
    val realNan:    real gen
    val realInf:    real gen
    val realAll:    real gen
    val bool:	    bool gen
    val string:	    string gen
    val substring:  Substring.substring gen
    val char:	    char gen
    val wideChar:   WideChar.char gen
    val int:	    int gen
    val largeInt:   IntInf.int gen
    val cardinal:   int gen
    val exn:        exn gen

end


