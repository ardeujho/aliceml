(*
 * Authors:
 *   Benedikt Grundmann <bgrund@ps.uni-sb.de>
 *
 * Copyright:
 *   Benedikt Grundmann, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)
import structure Remote from "x-alice:/lib/distribution/Remote"
import signature REMOTE from "x-alice:/lib/distribution/REMOTE-sig"
import signature COMPONENT_MANAGER from "x-alice:/lib/system/COMPONENT_MANAGER-sig"
import structure Url from "x-alice:/lib/system/Url"
import signature OS from "x-alice:/lib/system/OS-sig"

functor MkSeparate (type arg 
                    type res 
                    val f: arg -> res 
                    val host: string) :>
sig
    val execute: arg -> res
    val shutdown: unit -> unit
end
=
struct
    val _ = print "creating functor\n"
    
    val remoteUrl = Url.fromString "x-alice:/lib/system/Remote"
    val osUrl = Url.fromString "x-alice:/lib/system/OS"

    functor MkE (CM: COMPONENT_MANAGER) =
    struct
        structure LRemote = CM.Link (val url = remoteUrl 
                                    signature S = sig 
                                                    structure Remote : REMOTE 
                                                  end ) 
        structure LOS = CM.Link (val url = osUrl 
                                signature S = sig 
                                                structure OS : OS 
                                              end ) 
        structure OS = LOS.OS
        val execute = LRemote.Remote.proxy f
        val shutdown = LRemote.Remote.proxy (fn () => 
					    OS.Process.exit OS.Process.success)
    end

    val _ = print "executing functor on remote site\n"

    structure E = Remote.Eval (val host = host 
                               signature S = 
			       sig 
				 val execute: arg -> res 
				 val shutdown: unit -> unit 
			       end
			       structure F = MkE)

    val _ = print "execution of functor on remote site done\n"

    val execute = E.execute
    val shutdown = E.shutdown
end






