(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature TEST        from "TEST-sig"
import structure MkSeparate  from "MkSeparate"

import structure PrettyPrint from "x-alice:/lib/utility/PrettyPrint"
import structure PPValue     from "x-alice:/lib/system/PPValue"

structure Test :> TEST =
struct

    exception Error of (exn * string)

    type test_case   = string * (unit -> unit)

    type test_suite  = string * test_case list
    
    datatype failure = 
        FAIL_EXN of exn		(* Exception raised *)
    |	FAIL_ASSERT of string * int
    |	FAIL_TIMEOUT 

    type result = {
	    name: string,
	    passed: int,
	    failed: int,
	    failures: (test_case * failure * string) list
    }

    type config = {
	    timeout: Time.time,
	    separate: bool,
	    showMissing: bool
    }
    
    val defaultConfig = {
	    timeout = Time.fromSeconds (Int.toLarge 10),
	    separate = false,
	    showMissing = true
    }

    fun executeTC (cfg:config) (_, f) = 
      (case Future.awaitEither (spawn (f ();()), 
				Future.alarm (#timeout cfg)) of
		FST ex => (Future.await ex; NONE)
	    |	SND _  => SOME (FAIL_TIMEOUT, "")) 
		handle Error x => 
		          (case x of 
			     (Assert t, str) => SOME (FAIL_ASSERT t,str)
		           | (e,        str) => SOME (FAIL_EXN e, str))
		     |    e    => SOME (FAIL_EXN e,"")


    fun executeSepTC (cfg:config) tc = 
	let
	    structure Sep = MkSeparate (val host = "localhost" 
					type arg = test_case
					type res = (failure * string) option
					val f 	 = executeTC cfg)
	in
	    Sep.execute tc
	end

    fun combine (executeTC: test_case -> (failure * string) option) 
		(tc, res:result) =
        case executeTC tc of
            NONE	 =>  { res where passed = #passed res + 1 } 
        |   SOME (f, s) =>  { res where failed = #failed res + 1, 
                              failures =  (tc, f, s) :: #failures res }
    
    fun run cfg (name, testcases) = 
        let 
	    val res = List.foldl (combine (if #separate cfg 
					   then executeSepTC cfg 
					   else executeTC cfg))
					    { name = name, passed = 0, 
                                              failed = 0, failures = [] } 
								     testcases
	in
	    { res where failures = List.rev (#failures res) }
	end
end
