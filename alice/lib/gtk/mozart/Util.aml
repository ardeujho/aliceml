(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2001
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import signature UTIL from "UTIL-sig"

structure Util :> UTIL =
    struct
	fun checkPrefix'(X::Xr, Y::Yr) = X = Y andalso checkPrefix'(Xr, Yr)
	  | checkPrefix'(nil, _)       = true
	  | checkPrefix' _             = false

	fun checkPrefix(Xs, Ys) =
	    checkPrefix'(String.explode Xs, String.explode Ys)

	fun stripPrefix'(#"_"::Xr) = String.implode Xr
	  | stripPrefix' Xs        = String.implode Xs
	    
	fun stripPrefix Xs = stripPrefix'(String.explode Xs)

	fun cutPrefix'(X::Xr, Ys as Y::Yr) =
	    if ((Char.toUpper X) = (Char.toUpper Y)) then cutPrefix'(Xr, Yr)
	    else String.implode Ys
	  | cutPrefix'(nil, Ys) = String.implode Ys

	fun cutPrefix(Xs, Ys) =
	    cutPrefix'(String.explode Xs, String.explode Ys)

	fun cleanPointers' ((#"[")::(#"]")::Xr) = #"*"::(cleanPointers' Xr)
	  | cleanPointers' (X::Xr)          = X::(cleanPointers' Xr)
	  | cleanPointers' nil              = nil

	fun cleanPointers Xs =
	    String.implode (cleanPointers' (String.explode Xs))
			       
	fun firstLower'(X::Xr) = String.implode ((Char.toLower X)::Xr)
	  | firstLower' nil    = ""

	fun firstLower Xs = firstLower'(String.explode Xs)

	fun firstUpper'(X::Xr) = String.implode ((Char.toUpper X)::Xr)
	  | firstUpper' nil    = ""
	    
	fun firstUpper Xs = firstUpper'(String.explode Xs)

	local
	    fun killPtrs' nil       = nil
	      | killPtrs' (#"*"::_) = nil
	      | killPtrs' (c::cr)   = c::(killPtrs' cr)
	in
	    fun killPtrs s = String.implode (killPtrs' (String.explode s))
	end

	fun indent n = if n = 0 then "" else "   " ^ (indent (n - 1))

	local
	    fun sep #"_" = true
	      | sep _    = false
	in
	    fun translateName str =
		let
		    val ss = map firstUpper (String.tokens sep str)
		in
		    firstLower (String.concat ss)
		end
	end

	fun computeWrapperName (space, str) =
	    let
		val prefix = (case space of
				  "gtk_canvas" => "gtkCanvas"
				| _            => space)
		in
		    cutPrefix(prefix, translateName str)
	    end
    end
