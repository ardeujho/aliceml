(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2001
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Inspector  from "x-alice:/lib/tools/Inspector"
import structure Gtk        from "x-alice:/lib/gtk/Gtk"
import structure Gdk        from "x-alice:/lib/gtk/Gdk"
import structure GtkBuilder from "GtkBuilder"
import structure Config     from "x-alice:/lib/system/Config"

local
    datatype event = datatype Gtk.event
    datatype arg   = datatype Gtk.arg

    open GtkBuilder

    fun newServer () =
	let
	    val tail   = Promise.promise ()
	    val stream = Ref.ref tail

	    fun process s = (case s of
				 nil   => ()
			       | p::pr => (p (); process pr))
	    fun send p =
		let
		    val newtail = Promise.promise ()
		    val tail    = Ref.exchange(stream, newtail)
		in
		    Promise.fulfill(tail, p::(Promise.future newtail))
		end
	in
	    (spawn (process(Promise.future tail));
	     send)
	end

    val serve = newServer ()

    fun fileToString (file, lines) =
	(case TextIO.inputLine file of
	     NONE      => (TextIO.closeIn file; rev lines)
	   | SOME line => fileToString(file, line::lines))

    val keys = ["abstype", "and", "andalso", "as", "case", "datatype",
		"do", "else", "end", "exception", "fn", "fun", "handle",
		"if", "in", "infix", "infixr", "let", "local", "nonfix",
		"of", "op", "open", "orelse", "raise", "rec", "then",
		"type", "val", "with", "withtype", "while",
		"eqtype", "functor", "include", "sharing",
		"sig", "signature", "structure", "struct", "where",
                "any", "constructor", "fct", "from", "import", "non",
                "pack", "unpack", "when", "withfun", "withval"
	       ]

    fun searchKey(key, nil)   = false
      | searchKey(key, k::kr) = (key = k) orelse searchKey(key, kr)

    fun isKeyWord key = searchKey(key, keys) 

    val isSep = not o Char.isAlphaNum

    fun isToken c = not (isSep c)

    fun insertTokens(pars as (text, tc, nc, bg, ft), nil)       = ()
      | insertTokens(pars as (text, tc, nc, bg, ft), token::tr) =
	let
	    val fg = if isKeyWord token then tc else nc
	in
	    (Gtk.textInsert(text, ft, fg, bg, token, String.size token);
	     insertTokens(pars, tr))
	end

    fun collectSeps(ts, nil)         = (String.implode (rev ts), nil)
      | collectSeps(ts, cs as c::cr) =
	if isSep c then collectSeps(c::ts, cr)
	else (String.implode (rev ts), cs)

    fun collectTokens(ts, nil)         = (String.implode (rev ts), nil)
      | collectTokens(ts, cs as c::cr) =
	if isToken c then collectTokens(c::ts, cr)
	else (String.implode (rev ts), cs)

    fun lineToTokens(nil)         = nil
      | lineToTokens(cs as c::cr) =
	(case isSep c of
	     true  =>
		 let
		     val (str, cr) = collectSeps(nil, cs)
		 in
		     [str] @ lineToTokens(cr)
		 end
	   | false =>
		 let
		     val (str, cr) = collectTokens(nil, cs)
		 in
		     [str] @ lineToTokens(cr)
		 end)

    fun insertLines(pars, nil)      = ()
      | insertLines(pars, line::lr) =
	(insertTokens(pars, lineToTokens (String.explode line));
	 insertLines(pars, lr))

    val textcolor = ref (Gdk.allocColor(0xf0f0, 0x2020, 0xa0a0))
    val curwin    = ref NONE : Gtk.object option ref
    val curtext   = ref NONE : Gtk.object option ref
    val curfile   = ref ""

    val font = Gdk.fontLoad "8x13"

    fun fileToWindow file =
	let
	    val xdim    = 550.0
	    val ydim    = 350.0
	    val lines   = if file = "" then nil
			  else fileToString(TextIO.openIn file, nil)

	    val text    = MakeWidget (Text {xdim=xdim, ydim=ydim, text=nil})
	    val xa      = Gtk.adjustmentNew(0.0, 0.0, xdim, 1.0, xdim, xdim)
	    val ya      = Gtk.adjustmentNew(0.0, 0.0, ydim, 1.0, ydim, ydim)
	    val vs      = Gtk.vscrollbarNew(ya)
	    val entries = [TableSimple {x=0, y=0, item=Window text},
			   TableSimple {x=1, y=0, item=Window vs}]

	    val map   = Gdk.colormapGetSystem ()
	    val black = Gdk.allocColor(0, 0, 0)
	    val white = Gdk.allocColor(65535, 65535, 65535)
	    val kcol  = !textcolor
	in
	    (Gtk.widgetSetUsize(text, Real.round xdim, Real.round ydim);
	     Gtk.textSetEditable(text, true);
	     curtext := SOME text;
	     Gtk.textSetAdjustments(text, xa, ya);
	     Gdk.colormapAllocColor(map, black, false, true);
	     Gdk.colormapAllocColor(map, white, false, true);
	     Gdk.colormapAllocColor(map, kcol, false, true);
	     insertLines((text, kcol, black, white, font), lines);
	     Table {rows=1, columns=2, homogeneous=false, entries=entries})
	end

    fun displayFile () =
	let
	    val note   = valOf(!curwin)
	    val window = fileToWindow (!curfile)
	    val align  = MakeWidget(Alignment {xalign=0.0,
					       yalign=0.0, xscale=1.0,
					       yscale=1.0, inner=window})
	    val label  = MakeWidget(Label "")
	in
	    (Gtk.notebookRemovePage(note, 0);
	     Gtk.widgetShowAll(align);
	     Gtk.notebookAppendPage(note, align, label))
	end

    local
	val xdim = 550.0
	val ydim = 150.0

	val map   = Gdk.colormapGetSystem ()
	val white = Gdk.allocColor(65535, 65535, 65535)
	val black = Gdk.allocColor(0, 0, 0)

	val text  = MakeWidget (Text {xdim=xdim, ydim=ydim, text=nil})
    in
	fun resultWindow () =
	    let
		val xa = Gtk.adjustmentNew(0.0, 0.0, xdim, 1.0, xdim, xdim)
		val ya = Gtk.adjustmentNew(0.0, 0.0, ydim, 1.0, ydim, ydim)
		val vs = Gtk.vscrollbarNew ya
		val entries = [TableSimple {x=0, y=0, item=Window text},
			       TableSimple {x=1, y=0, item=Window vs}]
	    in
		(Gtk.widgetSetUsize(text, Real.round xdim, Real.round ydim);
		 Gtk.textSetEditable(text, false);
		 Gtk.textSetAdjustments(text, xa, ya);
		 Gdk.colormapAllocColor(map, black, false, true);
		 Gdk.colormapAllocColor(map, white, false, true);
		 Table {rows=1, columns=2, homogeneous=false, entries=entries})
	    end
	
	fun isSep #"\n" = true
	  | isSep _     = false

	fun filLine s =
	    (case String.explode s of
		 #">":: #" ":: _ => false
	       | #" ":: #" ":: _ => false
	       | _               => true)

	fun insertLines nil        = ()
	  | insertLines (line::lr) =
	    let
		val nline = (line ^ "\n")
	    in
		(Gtk.textInsert(text, font, black,
				white, nline, String.size nline);
		 insertLines lr)
	    end

	fun showResult s = serve
	   (fn () => insertLines (List.filter filLine (String.tokens isSep s)))
    end

    local
	val proc =
	    (case Config.platform of
		 Config.WIN32 => Unix.execute ("cmd", ["/c", "alice"])
	       | Config.UNIX  => Unix.execute ("alice", nil))
	val (instream, outstream) = Unix.streamsOf proc

	fun printResult () =
	    (case TextIO.inputLine instream of
		 NONE   => showResult "interpreter terminated."
	       | SOME s => (showResult s; printResult ()))
    in
	fun listenToShell () = spawn (printResult ())

	fun textToShell () =
	    let
		val text     = valOf(!curtext)
		val lines    = Gtk.editableGetChars(text, 0, Gtk.textGetLength text);
		val newlines = String.translate (fn #"\n" => " \n" | c => str c) lines
	    in
		(TextIO.output(outstream, newlines);
		 TextIO.output(outstream, ";\n"))
	    end
    end

    local
	datatype entercase = FRESH | TRUE | FALSE

	val enter = ref FRESH

	val colorSel = Gtk.colorSelectionNew ()
	val dialog   = Hole.hole ()
	    
	exception Error

	fun numToHex 0 = #"0"
	  | numToHex 1 = #"1"
	  | numToHex 2 = #"2"
	  | numToHex 3 = #"3"
	  | numToHex 4 = #"4"
	  | numToHex 5 = #"5"
	  | numToHex 6 = #"6"
	  | numToHex 7 = #"7"
	  | numToHex 8 = #"8"
	  | numToHex 9 = #"9"
	  | numToHex 10 = #"A"
	  | numToHex 11 = #"B"
	  | numToHex 12 = #"C"
	  | numToHex 13 = #"D"
	  | numToHex 14 = #"E"
	  | numToHex 15 = #"F"
	  | numToHex _  = raise Error

	fun fromReal r =
	    let
		val rn = Real.*(r, 255.0)
		val ri = Real.floor rn
	    in
		String.implode [numToHex(ri div 16), numToHex(ri mod 16)]
	    end

	fun okHandler _ = serve
	    (fn () =>
	     let
		 val [r, g, b, _] = Gtk.colorSelectionGetColor colorSel
		 val (ri, gi, bi) = (fromReal r, fromReal g, fromReal b)
		 val color        = Gdk.allocColor(0, 0, 0)
		 val colorString  = "RGB:" ^ ri ^ "/" ^ gi ^ "/" ^ bi
	     in
		 (textcolor := color;
		  Gdk.colorParse(colorString, color);
		  displayFile ();
		  enter := TRUE;
		  Gtk.widgetUnmap dialog)
	     end)
	    
	fun cancelHandler _ = serve
	    (fn () => (enter := TRUE;
		       Gtk.widgetUnmap dialog))
	    
	val okButton     = Button("Ok", [Handler("clicked", okHandler)])
	val cancelButton = Button("Cancel", [Handler("clicked", cancelHandler)])
	val bBox         = HButtonBox(EndStyle, [okButton, cancelButton])
	val vBox         = VBox {homogeneous=false, spacing=4,
				 entries=[BoxSimple (Window colorSel), BoxSimple bBox]}
	val toplevel     = Toplevel {title="Select keyword color",
				     border=4, handler=nil, inner=vBox}
    in
	fun getKeywordColor () =
	    (case !enter of
		 FRESH => (Hole.fill(dialog, MakeWidget toplevel);
			   enter := TRUE;
			   getKeywordColor ())
	       | FALSE => ()
	       | TRUE  =>
		     (enter := FALSE;
		      Gtk.widgetMap dialog))
    end

    val tour = Hole.hole ()

    fun tourAliceHandler _ = ()
    fun tourColorHandler _ = getKeywordColor ()
    fun tourExitHandler _  = () (* Gtk.signalEmit("destroy", tour) *)

    val tourMenu  = [MenuItem("About Alice...",
			      [Handler ("select", tourAliceHandler)]),
		     MenuItem("Keyword color...",
			      [Handler ("select", tourColorHandler)]),
		     MenuItem("Exit", [Handler("select", tourExitHandler)])]
    val menuBar   = MenuBar([{label="Tour", submenu=tourMenu}])
    val menuAlign = Alignment {xalign=0.0, yalign=0.0, xscale=1.0, yscale=0.0, inner=menuBar}

    val codeWin    = (curfile := ""; fileToWindow "")
    val codeAalign = Alignment {xalign=0.0, yalign=0.0, xscale=1.0, yscale=1.0, inner=codeWin}
    val codeNote   = MakeWidget (Notebook(false, [{label="", note=codeAalign}]))
    val codeFrame  = Frame {title=" Demo Source ",
			    ftype=ShadowIn,
			    inner=Window codeNote}

    val resWin   = resultWindow ()
    val resAlign = Alignment {xalign=0.0, yalign=0.0, xscale=1.0, yscale=1.0, inner=resWin}
    val resFrame = Frame {title=" System Answer ",
			  ftype=ShadowIn,
			  inner=resWin}

    val codeResEntries = [BoxSimple codeFrame,
			  BoxSimple resFrame]
    val codeResBox     = VBox {homogeneous=false, spacing=4, entries=codeResEntries}
	
    val demoTree  = [SubTree("Constraints",
			     [TreeItem "SEND+MORE=MONEY",
			      TreeItem "Photo Alignment"]),
		     SubTree("Gtk",
			     [TreeItem "Hello, World!",
			      TreeItem "Fifteen"])
		     ]

    fun treeHandler (item, "select") = serve
	(fn () =>
	 (case item of
	      "SEND+MORE=MONEY" => (curfile := "data/money.aml"; displayFile ())
	    | "Photo Alignment" => (curfile := "data/photo.aml"; displayFile ())
	    | "Hello, World!"   => (curfile := "data/hello.aml"; displayFile ())
	    | "Fifteen"         => (curfile := "data/fifteen.aml"; displayFile ())
	    | _                 => ()))
      | treeHandler (item, _)        = ()

    val treeWin   = Tree(demoTree, treeHandler)
    val treeFrame = Frame {title=" Select Demo ",
			   ftype=ShadowIn,
			   inner=treeWin}

    val conentEntries = [BoxSimple treeFrame,
			 BoxSimple codeResBox]

    val contentBox = HBox {homogeneous=false, spacing=4, entries=conentEntries}

    fun launchHandler _ = serve
	(fn () => (textToShell ()))

    val launchButton    = Button("Execute Source Code", [Handler("clicked", launchHandler)])
    val launchAlignment = Alignment {xalign=0.0, yalign=0.0, xscale=1.0, yscale=0.0,
				     inner=launchButton}

    val topEntries        = [BoxSimple menuAlign,
			     BoxSimple contentBox,
			     BoxSimple launchAlignment]
    val topBox            = VBox {homogeneous=false, spacing=4,  entries=topEntries}
    val topDestroyHandler = Handler("destroy", fn _ => OS.Process.exit OS.Process.success)
    val topWin            = Toplevel {title="Alice Tour", border=2,
				      handler=[topDestroyHandler], inner=topBox}
in
    val _ = (curwin := SOME codeNote; listenToShell (); Hole.fill(tour, MakeWidget topWin))
end
