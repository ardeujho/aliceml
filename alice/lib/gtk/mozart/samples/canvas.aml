(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2000
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Inspector from "x-alice:/lib/tools/Inspector"
import structure Gdk       from "x-alice:/lib/gtk/Gdk"
import structure Gtk       from "x-alice:/lib/gtk/Gtk"
import structure GtkCanvas from "x-alice:/lib/gtk/GtkCanvas"

local
    datatype arg   = datatype Gtk.arg
    datatype event = datatype Gdk.event

    fun Delete _ = OS.Process.exit OS.Process.success
    val Window   = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
    val _        = Gtk.signalConnect (Window, "delete-event", Delete)

    val map      = Gdk.colormapGetSystem ()
    val black    = Gdk.allocColor (0,0,0)
    val white    = Gdk.allocColor (65535,65535,65535)
    val _        = Gdk.colormapAllocColor (map, black, false, true)
    val _        = Gdk.colormapAllocColor (map, white, false, true)
    val MyCanvas = GtkCanvas.new 0
    val root     = GtkCanvas.root MyCanvas

(*
    val targs =
	[("text", STRING "Dies ist ein Test"),
	 ("x", DOUBLE 100.0),
	 ("y", DOUBLE 100.0),
	 ("font",
	  SRTING "-adobe-helvetica-medium-r-normal--12-*-72-72-p-*-iso8859-1"),
	 ("fill_color_gdk", OBJECT black)]
    val titem = GtkCanvas.itemNew(root, GtkCanvas.textGetType(), targs)
*)

    val rargs = [("x1", DOUBLE 10.0),
		 ("y1", DOUBLE 20.0),
		 ("x2", DOUBLE 380.0),
		 ("y2", DOUBLE 380.0),
		 ("fill_color_gdk", OBJECT white),
		 ("outline_color_gdk", OBJECT black)]
    val ritem = GtkCanvas.itemNew (root, GtkCanvas.RECTANGLE, rargs)

    fun show s = Inspector.inspect s

    fun canvasEvent [EVENT(event)] =
	(case event of
	     GDK_EXPOSE _          => show "Got Expose Event"
	   | GDK_MOTION_NOTIFY _   => show "Got Motion Event"
	   | GDK_BUTTON_PRESS _    => show "Got ButtonPress Event"
	   | GDK_2BUTTON_PRESS _   => show "Got Button2Press Event"
	   | GDK_3BUTTON_PRESS _   => show "Got Button3Press Event"
	   | GDK_BUTTON_RELEASE _  => show "Got ButtonRelease Event"
	   | GDK_KEY_PRESS _       => show "Got KeyPress Event"
	   | GDK_KEY_RELEASE _     => show "Got KeyRelease Event"
	   | GDK_ENTER_NOTIFY _    => show "Got Enter Event"
	   | GDK_LEAVE_NOTIFY _    => show "Got Leave Event"
	   | GDK_FOCUS_CHANGE _    => show "Got Focus Event"
	   | GDK_CONFIGURE _       => show "Got Configure Event"
	   | GDK_NO_EXPOSE _       => show "Got NoExpose Event"
	   | GDK_NOTHING           => show "Got Nothing Event"
	   | GDK_DELETE            => show "Got Delete Event"
	   | GDK_DESTROY           => show "Got Destroy Event"
	   | GDK_MAP               => show "Got Map Event"
	   | GDK_UNMAP             => show "Got Unmap Event"
	   | GDK_PROPERTY_NOTIFY   => show "Got Property Event"
	   | GDK_SELECTION_CLEAR   => show "Got SelecitonClear Event"
	   | GDK_SELECTION_REQUEST => show "Got SelectionRequest Event"
	   | GDK_SELECTION_NOTIFY  => show "Got SelectionNotify Event"
	   | GDK_PROXIMITY_IN      => show "Got ProximityIn Event"
	   | GDK_PROXIMITY_OUT     => show "Got ProximityOut Event"
	   | GDK_DRAG_ENTER        => show "Got DragEnter Event"
	   | GDK_DRAG_LEAVE        => show "Got DragLeave Event"
	   | GDK_DRAG_MOTION       => show "Got DrawMotion Event"
	   | GDK_DRAG_STATUS       => show "Got DragStatus Event"
	   | GDK_DROP_START        => show "Got DropStart Event"
	   | GDK_DROP_FINISHED     => show "Got DropFinished Event"
	   | GDK_CLIENT_EVENT      => show "Got Client Event"
	   | UNSUPPORTED           => show "Got UNSUPPORTED Event"
	   | _                     => show "Got Strange Event")
	     
    val _ = Gtk.signalConnect (ritem, "event", canvasEvent)
	
    val pargs = [("points", POINTS([20, 20, 380, 200, 20, 380])),
		 ("fill_color_gdk", OBJECT black),
		 ("width_pixels", INT 2)]
    val pitem = GtkCanvas.itemNew (root, GtkCanvas.LINE, pargs)
in
    val _ = (Gtk.containerSetBorderWidth (Window, 10);
	     Gtk.widgetSetUsize (MyCanvas, 400, 400);
	     GtkCanvas.setScrollRegion (MyCanvas, 0.0, 0.0, 400.0, 400.0);
	     Gtk.containerAdd (Window, MyCanvas);
	     Gtk.widgetShowAll Window)
end
