(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2001
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure GtkTreeTypes from "GtkTreeTypes"
import structure Util         from "Util"
import signature TYPE_MANAGER from "TYPE_MANAGER-sig"

functor MkTypeManager(val types :
			  GtkTreeTypes.tree_item list) :> TYPE_MANAGER =
    struct
	open GtkTreeTypes

	datatype arg_type = IN of string | OUT of string

	local
	    fun getName (FUNCTION(name, _))  = name
	      | getName (STRUCTURE(name, _)) = name
	      | getName (UNION(name, _))     = name
	      | getName (ENUM(name, _))      = name
	      | getName (ALIAS(name, _, _))  = name
	      | getName (CLASSES _)          = ""
	      | getName (NOTYPE)             = ""
	in
	    fun searchType(typ, nil)   = NOTYPE
	      | searchType(typ, t::tr) =
		if (getName t = typ) then t else searchType(typ, tr)
	end

	fun isStringType "gchar*"       = true
	  | isStringType "char*"        = true
	  | isStringType "const gchar*" = true
	  | isStringType "const char*"  = true
	  | isStringType _              = false

	fun isCoreType "gboolean"     = true
	  | isCoreType "gchar"        = true
	  | isCoreType "guchar"       = true
	  | isCoreType "gint"         = true
	  | isCoreType "int"          = true
	  | isCoreType "guint"        = true
	  | isCoreType "gshort"       = true
	  | isCoreType "gushort"      = true
	  | isCoreType "glong"        = true
	  | isCoreType "gulong"       = true
	  | isCoreType "gint8"        = true
	  | isCoreType "guint8"       = true
	  | isCoreType "gint16"       = true
	  | isCoreType "guint16"      = true
	  | isCoreType "gint32"       = true
	  | isCoreType "guint32"      = true
	  | isCoreType "gint64"       = true
	  | isCoreType "guint64"      = true
	  | isCoreType "gfloat"       = true
	  | isCoreType "gdouble"      = true
	  | isCoreType "double"       = true
	  | isCoreType "gsize"        = true
	  | isCoreType "gssize"       = true
	  | isCoreType "gchar*"       = true
	  | isCoreType "char*"        = true
	  | isCoreType "const gchar*" = true
	  | isCoreType "const char*"  = true
(*	  | isCoreType "..."          = true *)
	  | isCoreType _              = false

	(* Check for Basic Types *)
	fun isBasicType tStr =
	    if (isCoreType tStr) then true
	    else (case searchType(tStr, types) of
		      ALIAS(_, name, ptrs) => isBasicType (name ^ ptrs)
		    | ENUM _               => true
		    | _                    => false)

	(* Argument Transformation *)
	local
	    fun prepareSingleArg (i, ARG(TYPE("gchar", "*[]"), _)) =
		(i, IN("gchar*[]"), "none")
	      | prepareSingleArg(i, ARG(TYPE(base, ptrs), _)) =
		let
		    val tStr = base ^ (Util.cleanPointers ptrs)
		    val tTyp = (case tStr of
				    "int*"      => OUT("int")
				  | "gint*"     => OUT("int")
				  | "guint*"    => OUT("int")
				  | "double*"   => OUT("double")
				  | "gdouble*"  => OUT("double")
				  | _           => IN(tStr))
		    val conv = (if tStr = "GList*" then "glist"
                     	        else if (isStringType tStr) then "string"
				else if (isBasicType tStr) then "none"
				else "object")
		in
		    (i, tTyp, conv)
		end
	in
	    fun prepareArgs (_, nil)     = nil
	      | prepareArgs (i, arg::ar) =
		(prepareSingleArg(i, arg)::(prepareArgs((i + 1), ar)))
	end


	(* Compute Class Type *)
	local
	    val classes = (case types of
			       (CLASSES(cs)::_) => cs
			     | _                => nil)

	    fun noParent (CLASS(_, class)) = class

	    val gdk     = (map noParent
			   (List.filter
			    (fn (CLASS(_, {space="GDK", ...})) => true
			      | _                              => false)
			    classes))
	    val gtk     = (map noParent
			   (List.filter
			    (fn (CLASS(_, {space="GTK", ...})) => true
			      | _                              => false)
			    classes))
	    val canvas  = (map noParent
			   (List.filter
			    (fn (CLASS(_, {space="GTKCANVAS", ...})) => true
			      | _                                    => false)
			    classes))

	    fun prepareName (p, n) =
		Util.killPtrs (Util.firstLower (Util.cutPrefix (p, n)))

	    fun extractClass class =
		if Util.checkPrefix ("Gdk", class) then
		    (gdk, "GDK.", prepareName ("Gdk", class))
		else if Util.checkPrefix ("Gtk", class) then
		    (gtk, "GTK.", prepareName ("Gtk", class))
		else (nil, "", class)

	    fun searchClass (_, nil)                 = "NONE"
	      | searchClass (class, {name, space}::cr) =
		if class = name then class else searchClass (class, cr)
	in
	    fun getClassType "GtkCanvas*"      = "GTKCANVAS.canvas"
	      | getClassType "GtkCanvasGroup*" = "GTKCANVAS.canvasGroup" 
	      | getClassType "GtkCanvasItem*"  = "GTKCANVAS.canvasItem"
	      | getClassType typ               =
		 let
		     val (classes, prefix, name) = extractClass typ
		     val class = (case searchClass(name, classes) of
				      "NONE" => "none"
				    | class  => prefix ^ class)
		 in
		     (* Gtk Base classes Object/Widget are suspicious;
		      *  use safe auto check instead
		      *)
		     (case class of
			  "GTK.object" => "auto"
			| "GTK.widget" => "auto"
			| class        => class)
		 end
	end

	fun isClassName s =
	    let
		val s' = (Util.cutPrefix ("_", s)) ^ "*"
	    in
		(case getClassType s' of
		     "none" => false
		   | _      => true)
	    end
	
	local
	    fun splitTypes'(nil, tree)           = tree
	      | splitTypes'(t::tr, (ms, fs, cs)) =
		(case t of
		     FUNCTION _  => splitTypes'(tr, (t::ms, fs, cs))
		   | STRUCTURE _ => splitTypes'(tr, (ms, t::fs, cs))
		   | ENUM _      => splitTypes'(tr, (ms, fs, t::cs))
		   | _           => raise Match)
	in
	    fun splitTypes ts = splitTypes'(ts, (nil, nil, nil))
	end
    end
